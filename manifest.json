{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v11.json", "dbt_version": "1.7.4", "generated_at": "2024-01-21T08:21:28.146497Z", "invocation_id": "e0831b8d-bf53-41bd-86bb-44d7c9dff311", "env": {}, "project_name": "ods", "project_id": "ef1817547dffab0331a27d6733b49538", "user_id": "f70b8f01-27b1-4ac4-9eb0-0a08a51c7198", "send_anonymous_usage_stats": true, "adapter_type": "duckdb"}, "nodes": {"model.ods.stg_banner__saturn__spriden": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__spriden", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__spriden.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__spriden.sql", "unique_id": "model.ods.stg_banner__saturn__spriden", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__spriden"], "alias": "stg_banner__saturn__spriden", "checksum": {"name": "sha256", "checksum": "c3eef101f6eacaaec7c80f08aefc5b9092bc5a1e9e1d6988583b916d25d26bea"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner ID (active and inactive/duplicate) and legal name (past and present)", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_or_last_name": {"name": "organization_or_last_name", "description": "Organization or Person last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "legal_first_name": {"name": "legal_first_name", "description": "Person legal first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_initial": {"name": "middle_initial", "description": "Person middle initial", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "change_ind": {"name": "change_ind", "description": "| Value | Description        |\n|-------|--------------------|\n| A     | Current record     |\n| I     | Inactive/Duplicate | \n| N     | Namechange         |\n", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "Person or Organzation indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.1164029, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__spriden\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'spriden') }}\n\n),\n\nrenamed as (\n\n    select\n        spriden_pidm                     as internal_banner_id,\n        spriden_id                       as banner_id,\n        spriden_last_name                as organization_or_last_name,\n        spriden_first_name               as legal_first_name,\n        substr(spriden_mi,1,1)           as middle_initial,\n        COALESCE(spriden_change_ind,'A') as change_ind,\n        case \n          when spriden_entity_ind = 'P' \n            then 'Y'\n          else 'N'                     \n        end                              as is_person,\n        spriden_activity_date            as updated_at\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        spriden_user,\n        spriden_origin,\n        spriden_search_last_name,\n        spriden_search_first_name,\n        spriden_search_mi,\n        spriden_soundex_last_name,\n        spriden_soundex_first_name,\n        spriden_ntyp_code,\n        spriden_create_user,\n        spriden_create_date,\n        spriden_data_origin,\n        spriden_create_fdmn_code,\n        spriden_surname_prefix,\n        spriden_surrogate_id,\n        spriden_version,\n        spriden_user_id,\n        spriden_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "spriden"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.spriden"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__spriden.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"spriden\"\n\n),\n\nrenamed as (\n\n    select\n        spriden_pidm                     as internal_banner_id,\n        spriden_id                       as banner_id,\n        spriden_last_name                as organization_or_last_name,\n        spriden_first_name               as legal_first_name,\n        substr(spriden_mi,1,1)           as middle_initial,\n        COALESCE(spriden_change_ind,'A') as change_ind,\n        case \n          when spriden_entity_ind = 'P' \n            then 'Y'\n          else 'N'                     \n        end                              as is_person,\n        spriden_activity_date            as updated_at\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        spriden_user,\n        spriden_origin,\n        spriden_search_last_name,\n        spriden_search_first_name,\n        spriden_search_mi,\n        spriden_soundex_last_name,\n        spriden_soundex_first_name,\n        spriden_ntyp_code,\n        spriden_create_user,\n        spriden_create_date,\n        spriden_data_origin,\n        spriden_create_fdmn_code,\n        spriden_surname_prefix,\n        spriden_surrogate_id,\n        spriden_version,\n        spriden_user_id,\n        spriden_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvnatn": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvnatn", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__stvnatn.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__stvnatn.sql", "unique_id": "model.ods.stg_banner__saturn__stvnatn", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__stvnatn"], "alias": "stg_banner__saturn__stvnatn", "checksum": {"name": "sha256", "checksum": "5071161efb2764361a1aa04d75bf1ea0bb00dbd8d483ce5d39dc55a0ed3c8d44"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner address nation", "columns": {"nation_code": {"name": "nation_code", "description": "Nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_desc": {"name": "nation_desc", "description": "Nation description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.1200068, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvnatn\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvnatn') }}\n\n),\n\nrenamed as (\n\n    select\n        stvnatn_code   as nation_code,\n        stvnatn_nation as nation_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvnatn_capital,\n        stvnatn_area,\n        stvnatn_population,\n        stvnatn_activity_date,\n        stvnatn_edi_equiv,\n        stvnatn_lms_equiv,\n        stvnatn_postal_mask,\n        stvnatn_tele_mask,\n        stvnatn_statscan_cde,\n        stvnatn_scod_code_iso,\n        stvnatn_ssa_reporting_equiv,\n        stvnatn_sevis_equiv,\n        stvnatn_surrogate_id,\n        stvnatn_version,\n        stvnatn_user_id,\n        stvnatn_data_origin,\n        stvnatn_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvnatn"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvnatn"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__stvnatn.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvnatn\"\n\n),\n\nrenamed as (\n\n    select\n        stvnatn_code   as nation_code,\n        stvnatn_nation as nation_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvnatn_capital,\n        stvnatn_area,\n        stvnatn_population,\n        stvnatn_activity_date,\n        stvnatn_edi_equiv,\n        stvnatn_lms_equiv,\n        stvnatn_postal_mask,\n        stvnatn_tele_mask,\n        stvnatn_statscan_cde,\n        stvnatn_scod_code_iso,\n        stvnatn_ssa_reporting_equiv,\n        stvnatn_sevis_equiv,\n        stvnatn_surrogate_id,\n        stvnatn_version,\n        stvnatn_user_id,\n        stvnatn_data_origin,\n        stvnatn_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__spbpers": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__spbpers", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__spbpers.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__spbpers.sql", "unique_id": "model.ods.stg_banner__saturn__spbpers", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__spbpers"], "alias": "stg_banner__saturn__spbpers", "checksum": {"name": "sha256", "checksum": "eff33e8b2e45a00cd6ae5d64ab8b53ddf788dd2d7c32c55b9efd3038bab1cc15"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner person detail", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_first_name": {"name": "preferred_first_name", "description": "Person preferred first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_confidential": {"name": "is_confidential", "description": "Confidential indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.1131651, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__spbpers\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'spbpers') }}\n\n),\n\nrenamed as (\n\n    select\n\n        spbpers_pidm                    as internal_banner_id,\n        spbpers_pref_first_name         as preferred_first_name,\n        case\n          when spbpers_confid_ind = 'Y' \n            then 'Y'\n          else 'N'\n        end                             as is_confidential\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields -- \n        /*\n        spbpers_ssn,\n        spbpers_birth_date,\n        spbpers_lgcy_code,\n        spbpers_ethn_code,\n        spbpers_mrtl_code,\n        spbpers_relg_code,\n        spbpers_sex,\n        spbpers_dead_ind,\n        spbpers_vetc_file_number,\n        spbpers_legal_name,\n        spbpers_name_prefix,\n        spbpers_name_suffix,\n        spbpers_activity_date,\n        spbpers_vera_ind,\n        spbpers_citz_ind,\n        spbpers_dead_date,\n        spbpers_pin,\n        spbpers_citz_code,\n        spbpers_hair_code,\n        spbpers_eyes_code,\n        spbpers_city_birth,\n        spbpers_stat_code_birth,\n        spbpers_driver_license,\n        spbpers_stat_code_driver,\n        spbpers_natn_code_driver,\n        spbpers_uoms_code_height,\n        spbpers_height,\n        spbpers_uoms_code_weight,\n        spbpers_weight,\n        spbpers_sdvet_ind,\n        spbpers_license_issued_date,\n        spbpers_license_expires_date,\n        spbpers_incar_ind,\n        spbpers_webid,\n        spbpers_web_last_access,\n        spbpers_pin_disabled_ind,\n        spbpers_itin,\n        spbpers_active_duty_sepr_date,\n        spbpers_data_origin,\n        spbpers_user_id,\n        spbpers_ethn_cde,\n        spbpers_confirmed_re_cde,\n        spbpers_confirmed_re_date,\n        spbpers_armed_serv_med_vet_ind,\n        spbpers_surrogate_id,\n        spbpers_version,\n        spbpers_vpdi_code,\n        spbpers_gndr_code,\n        spbpers_pprn_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "spbpers"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.spbpers"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__spbpers.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"spbpers\"\n\n),\n\nrenamed as (\n\n    select\n\n        spbpers_pidm                    as internal_banner_id,\n        spbpers_pref_first_name         as preferred_first_name,\n        case\n          when spbpers_confid_ind = 'Y' \n            then 'Y'\n          else 'N'\n        end                             as is_confidential\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields -- \n        /*\n        spbpers_ssn,\n        spbpers_birth_date,\n        spbpers_lgcy_code,\n        spbpers_ethn_code,\n        spbpers_mrtl_code,\n        spbpers_relg_code,\n        spbpers_sex,\n        spbpers_dead_ind,\n        spbpers_vetc_file_number,\n        spbpers_legal_name,\n        spbpers_name_prefix,\n        spbpers_name_suffix,\n        spbpers_activity_date,\n        spbpers_vera_ind,\n        spbpers_citz_ind,\n        spbpers_dead_date,\n        spbpers_pin,\n        spbpers_citz_code,\n        spbpers_hair_code,\n        spbpers_eyes_code,\n        spbpers_city_birth,\n        spbpers_stat_code_birth,\n        spbpers_driver_license,\n        spbpers_stat_code_driver,\n        spbpers_natn_code_driver,\n        spbpers_uoms_code_height,\n        spbpers_height,\n        spbpers_uoms_code_weight,\n        spbpers_weight,\n        spbpers_sdvet_ind,\n        spbpers_license_issued_date,\n        spbpers_license_expires_date,\n        spbpers_incar_ind,\n        spbpers_webid,\n        spbpers_web_last_access,\n        spbpers_pin_disabled_ind,\n        spbpers_itin,\n        spbpers_active_duty_sepr_date,\n        spbpers_data_origin,\n        spbpers_user_id,\n        spbpers_ethn_cde,\n        spbpers_confirmed_re_cde,\n        spbpers_confirmed_re_date,\n        spbpers_armed_serv_med_vet_ind,\n        spbpers_surrogate_id,\n        spbpers_version,\n        spbpers_vpdi_code,\n        spbpers_gndr_code,\n        spbpers_pprn_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sprtele": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sprtele", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__sprtele.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__sprtele.sql", "unique_id": "model.ods.stg_banner__saturn__sprtele", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__sprtele"], "alias": "stg_banner__saturn__sprtele", "checksum": {"name": "sha256", "checksum": "c39850972c70900ec6f3ce0e6daf08b4663f65eeb320aee583eed5450d771e89"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner telephone number", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_seqno": {"name": "phone_seqno", "description": "Phone record sequence number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_type_code": {"name": "phone_type_code", "description": "Phone type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_area": {"name": "phone_area", "description": "Phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_ext": {"name": "phone_ext", "description": "Phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Phone active indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_unlisted": {"name": "is_unlisted", "description": "Phone unlisted indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_comment": {"name": "phone_comment", "description": "Phone comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "intl_access": {"name": "intl_access", "description": "International access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_country_code": {"name": "phone_country_code", "description": "Phone country code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.1182468, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sprtele\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sprtele') }}\n\n),\n\nrenamed as (\n\n    select\n        sprtele_pidm                      as internal_banner_id,\n        sprtele_seqno                     as phone_seqno,\n        sprtele_tele_code                 as phone_type_code,\n        sprtele_activity_date             as updated_at,\n        sprtele_phone_area                as phone_area,\n        sprtele_phone_number              as phone_number,\n        sprtele_phone_ext                 as phone_ext,\n        case\n          when sprtele_status_ind = 'I'\n            then 'N'\n          else 'Y'\n        end                               as is_active,\n        COALESCE(sprtele_unlist_ind, 'N') as is_unlisted,\n        sprtele_comment                   as phone_comment,\n        sprtele_intl_access               as intl_access,\n        sprtele_ctry_code_phone           as phone_country_code\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        sprtele_atyp_code,\n        sprtele_addr_seqno,\n        sprtele_primary_ind,\n        sprtele_data_origin,\n        sprtele_user_id,\n        sprtele_surrogate_id,\n        sprtele_version,\n        sprtele_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "sprtele"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sprtele"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__sprtele.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sprtele\"\n\n),\n\nrenamed as (\n\n    select\n        sprtele_pidm                      as internal_banner_id,\n        sprtele_seqno                     as phone_seqno,\n        sprtele_tele_code                 as phone_type_code,\n        sprtele_activity_date             as updated_at,\n        sprtele_phone_area                as phone_area,\n        sprtele_phone_number              as phone_number,\n        sprtele_phone_ext                 as phone_ext,\n        case\n          when sprtele_status_ind = 'I'\n            then 'N'\n          else 'Y'\n        end                               as is_active,\n        COALESCE(sprtele_unlist_ind, 'N') as is_unlisted,\n        sprtele_comment                   as phone_comment,\n        sprtele_intl_access               as intl_access,\n        sprtele_ctry_code_phone           as phone_country_code\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        sprtele_atyp_code,\n        sprtele_addr_seqno,\n        sprtele_primary_ind,\n        sprtele_data_origin,\n        sprtele_user_id,\n        sprtele_surrogate_id,\n        sprtele_version,\n        sprtele_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvstat": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvstat", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__stvstat.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__stvstat.sql", "unique_id": "model.ods.stg_banner__saturn__stvstat", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__stvstat"], "alias": "stg_banner__saturn__stvstat", "checksum": {"name": "sha256", "checksum": "ae6d023451c73c6f5a5004abd21139d4e8b85866aaf6f9816a41fa98591e60cc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner address state/province", "columns": {"state_code": {"name": "state_code", "description": "State/Province code", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "state_desc": {"name": "state_desc", "description": "State/Province description", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.1213849, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvstat\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvstat') }}\n\n),\n\nrenamed as (\n\n    select\n        stvstat_code as state_code,\n        stvstat_desc as state_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unsed Fields --\n        /*\n        stvstat_activity_date,\n        stvstat_edi_equiv,\n        stvstat_statscan_cde,\n        stvstat_ipeds_cde,\n        stvstat_surrogate_id,\n        stvstat_version,\n        stvstat_user_id,\n        stvstat_data_origin,\n        stvstat_vpdi_code,\n        stvstat_scod_code_iso\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvstat"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvstat"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__stvstat.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvstat\"\n\n),\n\nrenamed as (\n\n    select\n        stvstat_code as state_code,\n        stvstat_desc as state_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unsed Fields --\n        /*\n        stvstat_activity_date,\n        stvstat_edi_equiv,\n        stvstat_statscan_cde,\n        stvstat_ipeds_cde,\n        stvstat_surrogate_id,\n        stvstat_version,\n        stvstat_user_id,\n        stvstat_data_origin,\n        stvstat_vpdi_code,\n        stvstat_scod_code_iso\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvtele": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvtele", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__stvtele.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__stvtele.sql", "unique_id": "model.ods.stg_banner__saturn__stvtele", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__stvtele"], "alias": "stg_banner__saturn__stvtele", "checksum": {"name": "sha256", "checksum": "cb796001e1f0c208f7efcb98af295ac2a70fac2c50937d1c1e1a08baf6fca15d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner phone type", "columns": {"phone_type_code": {"name": "phone_type_code", "description": "Phone type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_type_code_desc": {"name": "phone_type_code_desc", "description": "Phone type code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.122259, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvtele\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvtele') }}\n\n),\n\nrenamed as (\n\n    select\n        stvtele_code as phone_type_code,\n        stvtele_desc as phone_type_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvtele_activity_date,\n        stvtele_surrogate_id,\n        stvtele_version,\n        stvtele_user_id,\n        stvtele_data_origin,\n        stvtele_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvtele"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvtele"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__stvtele.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvtele\"\n\n),\n\nrenamed as (\n\n    select\n        stvtele_code as phone_type_code,\n        stvtele_desc as phone_type_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvtele_activity_date,\n        stvtele_surrogate_id,\n        stvtele_version,\n        stvtele_user_id,\n        stvtele_data_origin,\n        stvtele_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvatyp": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvatyp", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__stvatyp.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__stvatyp.sql", "unique_id": "model.ods.stg_banner__saturn__stvatyp", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__stvatyp"], "alias": "stg_banner__saturn__stvatyp", "checksum": {"name": "sha256", "checksum": "1e527a303684be099756054bcfec4023cde3bbddd006677880b17588a744029c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner address type", "columns": {"address_type_code": {"name": "address_type_code", "description": "Address type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_type_desc": {"name": "address_type_desc", "description": "Address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.119127, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvatyp\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvatyp') }}\n\n),\n\nrenamed as (\n\n    select\n        stvatyp_code as address_type_code,\n        stvatyp_desc as address_type_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvatyp_activity_date,\n        stvatyp_system_req_ind,\n        stvatyp_tele_code,\n        stvatyp_update_web_ind,\n        stvatyp_surrogate_id,\n        stvatyp_version,\n        stvatyp_user_id,\n        stvatyp_data_origin,\n        stvatyp_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvatyp"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvatyp"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__stvatyp.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvatyp\"\n\n),\n\nrenamed as (\n\n    select\n        stvatyp_code as address_type_code,\n        stvatyp_desc as address_type_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvatyp_activity_date,\n        stvatyp_system_req_ind,\n        stvatyp_tele_code,\n        stvatyp_update_web_ind,\n        stvatyp_surrogate_id,\n        stvatyp_version,\n        stvatyp_user_id,\n        stvatyp_data_origin,\n        stvatyp_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__spraddr": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__spraddr", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__saturn__spraddr.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__saturn__spraddr.sql", "unique_id": "model.ods.stg_banner__saturn__spraddr", "fqn": ["ods", "staging", "banner", "stg_banner__saturn__spraddr"], "alias": "stg_banner__saturn__spraddr", "checksum": {"name": "sha256", "checksum": "9fa71fb7fd4bacea808b2ba3f7c67d4fc6a53a40d8cade536360e68c61a78dfe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner address", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_type_code": {"name": "address_type_code", "description": "Address type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_seqno": {"name": "address_seqno", "description": "Address sequence number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_1": {"name": "address_line_1", "description": "Address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_2": {"name": "address_line_2", "description": "Address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_3": {"name": "address_line_3", "description": "Address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_code": {"name": "state_code", "description": "State/Province code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_code": {"name": "nation_code", "description": "Nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Address active indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.115016, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__spraddr\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'spraddr') }}\n\n),\n\nrenamed as (\n\n    select\n        spraddr_pidm                    as internal_banner_id,\n        spraddr_atyp_code               as address_type_code,\n        spraddr_seqno                   as address_seqno,\n        spraddr_street_line1            as address_line_1,\n        spraddr_street_line2            as address_line_2,\n        spraddr_street_line3            as address_line_3,\n        spraddr_city                    as city,\n        spraddr_stat_code               as state_code,\n        spraddr_zip                     as zip_code,\n        spraddr_natn_code               as nation_code,\n        case\n          when spraddr_status_ind = 'I'\n            then 'N'\n          else 'Y'\n        end                             as is_active,\n        spraddr_activity_date           as updated_at\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        spraddr_from_date,\n        spraddr_to_date,\n        spraddr_cnty_code,\n        spraddr_phone_area,\n        spraddr_phone_number,\n        spraddr_phone_ext,\n        spraddr_user,\n        spraddr_asrc_code,\n        spraddr_validated_ind,\n        spraddr_validated_date,\n        spraddr_carrier_route,\n        spraddr_delivery_point,\n        spraddr_correction_digit,\n        spraddr_gst_tax_id,\n        spraddr_reviewed_ind,\n        spraddr_reviewed_user,\n        spraddr_data_origin,\n        spraddr_ctry_code_phone,\n        spraddr_house_number,\n        spraddr_street_line4,\n        spraddr_surrogate_id,\n        spraddr_version,\n        spraddr_user_id,\n        spraddr_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "spraddr"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.spraddr"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__saturn__spraddr.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"spraddr\"\n\n),\n\nrenamed as (\n\n    select\n        spraddr_pidm                    as internal_banner_id,\n        spraddr_atyp_code               as address_type_code,\n        spraddr_seqno                   as address_seqno,\n        spraddr_street_line1            as address_line_1,\n        spraddr_street_line2            as address_line_2,\n        spraddr_street_line3            as address_line_3,\n        spraddr_city                    as city,\n        spraddr_stat_code               as state_code,\n        spraddr_zip                     as zip_code,\n        spraddr_natn_code               as nation_code,\n        case\n          when spraddr_status_ind = 'I'\n            then 'N'\n          else 'Y'\n        end                             as is_active,\n        spraddr_activity_date           as updated_at\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        spraddr_from_date,\n        spraddr_to_date,\n        spraddr_cnty_code,\n        spraddr_phone_area,\n        spraddr_phone_number,\n        spraddr_phone_ext,\n        spraddr_user,\n        spraddr_asrc_code,\n        spraddr_validated_ind,\n        spraddr_validated_date,\n        spraddr_carrier_route,\n        spraddr_delivery_point,\n        spraddr_correction_digit,\n        spraddr_gst_tax_id,\n        spraddr_reviewed_ind,\n        spraddr_reviewed_user,\n        spraddr_data_origin,\n        spraddr_ctry_code_phone,\n        spraddr_house_number,\n        spraddr_street_line4,\n        spraddr_surrogate_id,\n        spraddr_version,\n        spraddr_user_id,\n        spraddr_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__general__gtvemal": {"database": "ods", "schema": "banner", "name": "stg_banner__general__gtvemal", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__general__gtvemal.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__general__gtvemal.sql", "unique_id": "model.ods.stg_banner__general__gtvemal", "fqn": ["ods", "staging", "banner", "stg_banner__general__gtvemal"], "alias": "stg_banner__general__gtvemal", "checksum": {"name": "sha256", "checksum": "610f44f7d88a2bcc6af251bf678d4135c7a14808946eb882c2468c7983938a11"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner email address type", "columns": {"email_type_code": {"name": "email_type_code", "description": "Email type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_type_desc": {"name": "email_type_desc", "description": "Email type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.1121879, "relation_name": "\"ods\".\"banner\".\"stg_banner__general__gtvemal\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__general', 'gtvemal') }}\n\n),\n\nrenamed as (\n\n    select\n        gtvemal_code as email_type_code,\n        gtvemal_desc as email_type_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        gtvemal_activity_date,\n        gtvemal_disp_web_ind,\n        gtvemal_url_ind,\n        gtvemal_surrogate_id,\n        gtvemal_version,\n        gtvemal_user_id,\n        gtvemal_data_origin,\n        gtvemal_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__general", "gtvemal"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__general.gtvemal"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__general__gtvemal.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"gtvemal\"\n\n),\n\nrenamed as (\n\n    select\n        gtvemal_code as email_type_code,\n        gtvemal_desc as email_type_desc\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        gtvemal_activity_date,\n        gtvemal_disp_web_ind,\n        gtvemal_url_ind,\n        gtvemal_surrogate_id,\n        gtvemal_version,\n        gtvemal_user_id,\n        gtvemal_data_origin,\n        gtvemal_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__general__goremal": {"database": "ods", "schema": "banner", "name": "stg_banner__general__goremal", "resource_type": "model", "package_name": "ods", "path": "staging/banner/stg_banner__general__goremal.sql", "original_file_path": "domains/general/models/staging/banner/stg_banner__general__goremal.sql", "unique_id": "model.ods.stg_banner__general__goremal", "fqn": ["ods", "staging", "banner", "stg_banner__general__goremal"], "alias": "stg_banner__general__goremal", "checksum": {"name": "sha256", "checksum": "0b116b5665e1295a21d11f558a1c39a5c4f55f0522b84cd25fd602a003a829a2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner email address", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_type_code": {"name": "email_type_code", "description": "Email address type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_active": {"name": "is_active", "description": "Active email address indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/staging/banner/_banner__general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "access": "private"}, "created_at": 1705823512.1110778, "relation_name": "\"ods\".\"banner\".\"stg_banner__general__goremal\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__general', 'goremal') }}\n\n),\n\nrenamed as (\n\n    select\n        goremal_pidm                        as internal_banner_id,\n        goremal_emal_code                   as email_type_code,\n        goremal_email_address               as email_address,\n        case \n          when goremal_status_ind = 'A'\n            then 'Y'\n          else 'N'\n         end                                as is_active,\n        goremal_activity_date               as updated_at\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        goremal_preferred_ind,\n        goremal_user_id,\n        goremal_comment,\n        goremal_disp_web_ind,\n        goremal_data_origin,\n        goremal_surrogate_id,\n        goremal_version,\n        goremal_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__general", "goremal"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__general.goremal"]}, "compiled_path": "target/compiled/ods/domains/general/models/staging/banner/stg_banner__general__goremal.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"goremal\"\n\n),\n\nrenamed as (\n\n    select\n        goremal_pidm                        as internal_banner_id,\n        goremal_emal_code                   as email_type_code,\n        goremal_email_address               as email_address,\n        case \n          when goremal_status_ind = 'A'\n            then 'Y'\n          else 'N'\n         end                                as is_active,\n        goremal_activity_date               as updated_at\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        goremal_preferred_ind,\n        goremal_user_id,\n        goremal_comment,\n        goremal_disp_web_ind,\n        goremal_data_origin,\n        goremal_surrogate_id,\n        goremal_version,\n        goremal_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__entities__filtered_to__organizations": {"database": "ods", "schema": "banner", "name": "int_banner__entities__filtered_to__organizations", "resource_type": "model", "package_name": "ods", "path": "intermediate/organizations/int_banner__entities__filtered_to__organizations.sql", "original_file_path": "domains/general/models/intermediate/organizations/int_banner__entities__filtered_to__organizations.sql", "unique_id": "model.ods.int_banner__entities__filtered_to__organizations", "fqn": ["ods", "intermediate", "organizations", "int_banner__entities__filtered_to__organizations"], "alias": "int_banner__entities__filtered_to__organizations", "checksum": {"name": "sha256", "checksum": "118aeeab68c750174ba56ff5c652044b262e570ebc2c47492d72a026f4920532"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner entities filtered to organzation", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_name": {"name": "organization_name", "description": "Organization name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_address": {"name": "uo_email_address", "description": "University of Oregon email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_type_desc": {"name": "uo_email_type_desc", "description": "University of Oregon email address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_area": {"name": "ma_phone_area", "description": "Mailing phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_number": {"name": "ma_phone_number", "description": "Mailing phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_ext": {"name": "ma_phone_ext", "description": "Mailing phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_intl_access": {"name": "ma_intl_access", "description": "Mailing international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_type_desc": {"name": "ma_phone_type_desc", "description": "Mailing phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_area": {"name": "pr_phone_area", "description": "Permanent phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_number": {"name": "pr_phone_number", "description": "Permanent phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_ext": {"name": "pr_phone_ext", "description": "Permanent phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_intl_access": {"name": "pr_intl_access", "description": "Permanent international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_type_desc": {"name": "pr_phone_type_desc", "description": "Permanent phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_1": {"name": "ma_address_line_1", "description": "Mailing address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_2": {"name": "ma_address_line_2", "description": "Mailing address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_3": {"name": "ma_address_line_3", "description": "Mailing address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_city": {"name": "ma_city", "description": "Mailing city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_code": {"name": "ma_state_code", "description": "Mailing state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_desc": {"name": "ma_state_desc", "description": "Mailing state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_zip_code": {"name": "ma_zip_code", "description": "Mailing ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_code": {"name": "ma_nation_code", "description": "Mailing nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_desc": {"name": "ma_nation_desc", "description": "Mailing nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_1": {"name": "pr_address_line_1", "description": "Permanent address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_2": {"name": "pr_address_line_2", "description": "Permanent address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_3": {"name": "pr_address_line_3", "description": "Permanent address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_city": {"name": "pr_city", "description": "Permanent city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_code": {"name": "pr_state_code", "description": "Permanent state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_desc": {"name": "pr_state_desc", "description": "Permanent state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_zip_code": {"name": "pr_zip_code", "description": "Permanent ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_code": {"name": "pr_nation_code", "description": "Permanent nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_desc": {"name": "pr_nation_desc", "description": "Permanent nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/organizations/_int_organizations__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "internal_banner_id"}, "access": "private"}, "created_at": 1705823512.128006, "relation_name": "\"ods\".\"banner\".\"int_banner__entities__filtered_to__organizations\"", "raw_code": "with banner__active_entities as (\n\n  select * from {{ ref('mart_entities') }}\n\n),\n\nfilter_to_organization as (\n\n  select \n        \n  -- banner__active_entities\n  {{ dbt_utils.star(from=ref('mart_entities'),\n                    relation_alias='banner__active_entities',\n                    except=[\"ods_surrogate_key\",\n                            \"is_person\",\n                            \"legal_first_name\",\n                            \"middle_initial\",\n                            \"organization_or_last_name\"]) }},\n  banner__active_entities.organization_or_last_name as organization_name\n    \n  from banner__active_entities\n  where is_person = 'N'\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom filter_to_organization", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}, {"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/organizations/int_banner__entities__filtered_to__organizations.sql", "compiled": true, "compiled_code": "with banner__active_entities as (\n\n  select * from \"ods\".\"banner\".\"mart_entities\"\n\n),\n\nfilter_to_organization as (\n\n  select \n        \n  -- banner__active_entities\n  banner__active_entities.\"internal_banner_id\",\n  banner__active_entities.\"banner_id\",\n  banner__active_entities.\"uo_email_address\",\n  banner__active_entities.\"uo_email_type_desc\",\n  banner__active_entities.\"ma_phone_area\",\n  banner__active_entities.\"ma_phone_number\",\n  banner__active_entities.\"ma_phone_ext\",\n  banner__active_entities.\"ma_intl_access\",\n  banner__active_entities.\"ma_phone_type_desc\",\n  banner__active_entities.\"pr_phone_area\",\n  banner__active_entities.\"pr_phone_number\",\n  banner__active_entities.\"pr_phone_ext\",\n  banner__active_entities.\"pr_intl_access\",\n  banner__active_entities.\"pr_phone_type_desc\",\n  banner__active_entities.\"ma_address_line_1\",\n  banner__active_entities.\"ma_address_line_2\",\n  banner__active_entities.\"ma_address_line_3\",\n  banner__active_entities.\"ma_city\",\n  banner__active_entities.\"ma_state_code\",\n  banner__active_entities.\"ma_state_desc\",\n  banner__active_entities.\"ma_zip_code\",\n  banner__active_entities.\"ma_nation_code\",\n  banner__active_entities.\"ma_nation_desc\",\n  banner__active_entities.\"pr_address_line_1\",\n  banner__active_entities.\"pr_address_line_2\",\n  banner__active_entities.\"pr_address_line_3\",\n  banner__active_entities.\"pr_city\",\n  banner__active_entities.\"pr_state_code\",\n  banner__active_entities.\"pr_state_desc\",\n  banner__active_entities.\"pr_zip_code\",\n  banner__active_entities.\"pr_nation_code\",\n  banner__active_entities.\"pr_nation_desc\",\n  banner__active_entities.organization_or_last_name as organization_name\n    \n  from banner__active_entities\n  where is_person = 'N'\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom filter_to_organization", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__phones__filtered_to_active": {"database": "ods", "schema": "banner", "name": "int_banner__phones__filtered_to_active", "resource_type": "model", "package_name": "ods", "path": "intermediate/phones/int_banner__phones__filtered_to_active.sql", "original_file_path": "domains/general/models/intermediate/phones/int_banner__phones__filtered_to_active.sql", "unique_id": "model.ods.int_banner__phones__filtered_to_active", "fqn": ["ods", "intermediate", "phones", "int_banner__phones__filtered_to_active"], "alias": "int_banner__phones__filtered_to_active", "checksum": {"name": "sha256", "checksum": "65d71d229dc3faa398e5ef0090e37af7ceb7eb4f6c88cea8c4af2768ff66784b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, phone_type_code, phone_seqno"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner active phones", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_seqno": {"name": "phone_seqno", "description": "Phone record sequence number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_type_code": {"name": "phone_type_code", "description": "Phone type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_area": {"name": "phone_area", "description": "Phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_number": {"name": "phone_number", "description": "Phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_ext": {"name": "phone_ext", "description": "Phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_unlisted": {"name": "is_unlisted", "description": "Phone unlisted indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_comment": {"name": "phone_comment", "description": "Phone comment", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "intl_access": {"name": "intl_access", "description": "International access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_country_code": {"name": "phone_country_code", "description": "Phone country code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_type_desc": {"name": "phone_type_desc", "description": "Phone type code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id, phone_type_code, phone_seqno"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/phones/_int_phones__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, phone_type_code, phone_seqno"}, "access": "private"}, "created_at": 1705823512.1348338, "relation_name": "\"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"", "raw_code": "with banner_phones as (\n\n   select * from {{ ref('stg_banner__saturn__sprtele') }}\n\n),\n\nbanner_phone_types as (\n\n   select * from {{ ref('int_banner__phone_types') }}\n\n),\n\nphones_and_type_desc as (\n\n  select \n\n  -- banner_phones (driver)\n  {{ dbt_utils.star(from=ref('stg_banner__saturn__sprtele'),\n                    relation_alias='banner_phones',\n                    except=[\"is_active\"]) }},\n\n   -- banner_phone_types\n  {{ dbt_utils.star(from=ref('int_banner__phone_types'),\n                    relation_alias='banner_phone_types',\n                    except=[\"ods_surrogate_key\",\n                            \"phone_type_code\"]) }}\n\n  from banner_phones\n  left join banner_phone_types \n    on banner_phone_types.phone_type_code = \n            banner_phones.phone_type_code\n  where is_active = 'Y'\n\n),\n\n-- relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active\ntest_clean as (\n\n  select *\n  from phones_and_type_desc t1\n  -- failed test sql\n  where t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from {{ ref('int_banner__entities__filtered_to_active') }} t2\n                                 )\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id',\n             'phone_type_code',\n             'phone_seqno']) }}           as ods_surrogate_key \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__sprtele", "package": null, "version": null}, {"name": "int_banner__phone_types", "package": null, "version": null}, {"name": "stg_banner__saturn__sprtele", "package": null, "version": null}, {"name": "int_banner__phone_types", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__sprtele", "model.ods.int_banner__phone_types", "model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/int_banner__phones__filtered_to_active.sql", "compiled": true, "compiled_code": "with banner_phones as (\n\n   select * from \"ods\".\"banner\".\"stg_banner__saturn__sprtele\"\n\n),\n\nbanner_phone_types as (\n\n   select * from \"ods\".\"banner\".\"int_banner__phone_types\"\n\n),\n\nphones_and_type_desc as (\n\n  select \n\n  -- banner_phones (driver)\n  banner_phones.\"internal_banner_id\",\n  banner_phones.\"phone_seqno\",\n  banner_phones.\"phone_type_code\",\n  banner_phones.\"updated_at\",\n  banner_phones.\"phone_area\",\n  banner_phones.\"phone_number\",\n  banner_phones.\"phone_ext\",\n  banner_phones.\"is_unlisted\",\n  banner_phones.\"phone_comment\",\n  banner_phones.\"intl_access\",\n  banner_phones.\"phone_country_code\",\n\n   -- banner_phone_types\n  banner_phone_types.\"phone_type_desc\"\n\n  from banner_phones\n  left join banner_phone_types \n    on banner_phone_types.phone_type_code = \n            banner_phones.phone_type_code\n  where is_active = 'Y'\n\n),\n\n-- relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active\ntest_clean as (\n\n  select *\n  from phones_and_type_desc t1\n  -- failed test sql\n  where t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\" t2\n                                 )\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(phone_type_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(phone_seqno as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__phone_types": {"database": "ods", "schema": "banner", "name": "int_banner__phone_types", "resource_type": "model", "package_name": "ods", "path": "intermediate/phones/int_banner__phone_types.sql", "original_file_path": "domains/general/models/intermediate/phones/int_banner__phone_types.sql", "unique_id": "model.ods.int_banner__phone_types", "fqn": ["ods", "intermediate", "phones", "int_banner__phone_types"], "alias": "int_banner__phone_types", "checksum": {"name": "sha256", "checksum": "2006ac954fc1805aaaee27e15c57e601471374dd3c0a82b0b7729669b58071fa"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "phone_type_code"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner phone type", "columns": {"phone_type_code": {"name": "phone_type_code", "description": "Phone type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "phone_type_desc": {"name": "phone_type_desc", "description": "Phone type code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "phone_type_code"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/phones/_int_phones__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "phone_type_code"}, "access": "private"}, "created_at": 1705823512.13346, "relation_name": "\"ods\".\"banner\".\"int_banner__phone_types\"", "raw_code": "with banner_phone_types as (\n\n    select * from {{ ref('stg_banner__saturn__stvtele') }}\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['phone_type_code']) }}           as ods_surrogate_key\nfrom banner_phone_types", "language": "sql", "refs": [{"name": "stg_banner__saturn__stvtele", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__stvtele"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/int_banner__phone_types.sql", "compiled": true, "compiled_code": "with banner_phone_types as (\n\n    select * from \"ods\".\"banner\".\"stg_banner__saturn__stvtele\"\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(phone_type_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom banner_phone_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__email_address_types": {"database": "ods", "schema": "banner", "name": "int_banner__email_address_types", "resource_type": "model", "package_name": "ods", "path": "intermediate/email_addresses/int_banner__email_address_types.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/int_banner__email_address_types.sql", "unique_id": "model.ods.int_banner__email_address_types", "fqn": ["ods", "intermediate", "email_addresses", "int_banner__email_address_types"], "alias": "int_banner__email_address_types", "checksum": {"name": "sha256", "checksum": "6260cbd62390903b7f6211ce5a1d9ee5a401c6aa9f2a335bd1834b6772bafe1e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "email_type_code"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner email address type", "columns": {"email_type_code": {"name": "email_type_code", "description": "Email type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_type_desc": {"name": "email_type_desc", "description": "Email type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "email_type_code"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "email_type_code"}, "access": "private"}, "created_at": 1705823512.1479151, "relation_name": "\"ods\".\"banner\".\"int_banner__email_address_types\"", "raw_code": "with banner_email_address_types as (\n\n    select * from {{ ref('stg_banner__general__gtvemal') }}\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['email_type_code']) }}           as ods_surrogate_key\nfrom banner_email_address_types", "language": "sql", "refs": [{"name": "stg_banner__general__gtvemal", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__general__gtvemal"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/int_banner__email_address_types.sql", "compiled": true, "compiled_code": "with banner_email_address_types as (\n\n    select * from \"ods\".\"banner\".\"stg_banner__general__gtvemal\"\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(email_type_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom banner_email_address_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__email_addresses__filtered_to_active": {"database": "ods", "schema": "banner", "name": "int_banner__email_addresses__filtered_to_active", "resource_type": "model", "package_name": "ods", "path": "intermediate/email_addresses/int_banner__email_addresses__filtered_to_active.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/int_banner__email_addresses__filtered_to_active.sql", "unique_id": "model.ods.int_banner__email_addresses__filtered_to_active", "fqn": ["ods", "intermediate", "email_addresses", "int_banner__email_addresses__filtered_to_active"], "alias": "int_banner__email_addresses__filtered_to_active", "checksum": {"name": "sha256", "checksum": "5cf1ad2694d73ccfcccc8b2a4c83e41f0c8037e12cbeead1311d264f9ce6cb51"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, email_type_code, email_address"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner active email address", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_type_code": {"name": "email_type_code", "description": "Email type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_address": {"name": "email_address", "description": "Email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "email_type_desc": {"name": "email_type_desc", "description": "Email type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id, email_type_code, email_address"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, email_type_code, email_address"}, "access": "private"}, "created_at": 1705823512.1491919, "relation_name": "\"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"", "raw_code": "with banner_email_addresses as (\n\n   select * from {{ ref('stg_banner__general__goremal') }}\n\n),\n\nbanner_email_address_types as (\n\n   select * from {{ ref('int_banner__email_address_types') }}\n\n),\n\nemails_and_type_desc as (\n\n  select \n\n  -- banner_email_addresses (driver)\n  {{ dbt_utils.star(from=ref('stg_banner__general__goremal'),\n                    relation_alias='banner_email_addresses',\n                    except=[\"is_active\"]) }},\n\n   -- banner_email_address_types\n  {{ dbt_utils.star(from=ref('stg_banner__general__gtvemal'),\n                    relation_alias='banner_email_address_types',\n                    except=[\"email_type_code\"]) }}\n\n  from banner_email_addresses\n  left join banner_email_address_types \n    on banner_email_address_types.email_type_code = \n           banner_email_addresses.email_type_code\n  where is_active = 'Y'\n\n),\n\n-- relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active\ntest_clean as (\n\n  select *\n  from emails_and_type_desc t1\n  -- failed test sql\n  where t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from {{ ref('int_banner__entities__filtered_to_active') }} t2\n                                 )\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id',\n             'email_type_code',\n             'email_address']) }}           as ods_surrogate_key \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__general__goremal", "package": null, "version": null}, {"name": "int_banner__email_address_types", "package": null, "version": null}, {"name": "stg_banner__general__goremal", "package": null, "version": null}, {"name": "stg_banner__general__gtvemal", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__general__goremal", "model.ods.int_banner__email_address_types", "model.ods.stg_banner__general__gtvemal", "model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/int_banner__email_addresses__filtered_to_active.sql", "compiled": true, "compiled_code": "with banner_email_addresses as (\n\n   select * from \"ods\".\"banner\".\"stg_banner__general__goremal\"\n\n),\n\nbanner_email_address_types as (\n\n   select * from \"ods\".\"banner\".\"int_banner__email_address_types\"\n\n),\n\nemails_and_type_desc as (\n\n  select \n\n  -- banner_email_addresses (driver)\n  banner_email_addresses.\"internal_banner_id\",\n  banner_email_addresses.\"email_type_code\",\n  banner_email_addresses.\"email_address\",\n  banner_email_addresses.\"updated_at\",\n\n   -- banner_email_address_types\n  banner_email_address_types.\"email_type_desc\"\n\n  from banner_email_addresses\n  left join banner_email_address_types \n    on banner_email_address_types.email_type_code = \n           banner_email_addresses.email_type_code\n  where is_active = 'Y'\n\n),\n\n-- relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active\ntest_clean as (\n\n  select *\n  from emails_and_type_desc t1\n  -- failed test sql\n  where t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\" t2\n                                 )\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email_type_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(email_address as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__addresses__filtered_to_active": {"database": "ods", "schema": "banner", "name": "int_banner__addresses__filtered_to_active", "resource_type": "model", "package_name": "ods", "path": "intermediate/addresses/int_banner__addresses__filtered_to_active.sql", "original_file_path": "domains/general/models/intermediate/addresses/int_banner__addresses__filtered_to_active.sql", "unique_id": "model.ods.int_banner__addresses__filtered_to_active", "fqn": ["ods", "intermediate", "addresses", "int_banner__addresses__filtered_to_active"], "alias": "int_banner__addresses__filtered_to_active", "checksum": {"name": "sha256", "checksum": "556f3dd7a24fef839323d8afe685b7db236e2f23929ed4ca86fefefb4759fadc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, address_type_code, address_seqno"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner active address", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_type_code": {"name": "address_type_code", "description": "Address type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_seqno": {"name": "address_seqno", "description": "Address sequence number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_1": {"name": "address_line_1", "description": "Address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_2": {"name": "address_line_2", "description": "Address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_line_3": {"name": "address_line_3", "description": "Address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "city": {"name": "city", "description": "City", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_code": {"name": "state_code", "description": "State/Province code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_code": {"name": "nation_code", "description": "Nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_type_desc": {"name": "address_type_desc", "description": "Address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_desc": {"name": "state_desc", "description": "State/Province description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_desc": {"name": "nation_desc", "description": "Nation description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id, address_type_code, address_seqno"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/addresses/_int_addresses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, address_type_code, address_seqno"}, "access": "private"}, "created_at": 1705823512.1655319, "relation_name": "\"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"", "raw_code": "with banner_addresses as (\n\n   select * from {{ ref('stg_banner__saturn__spraddr') }}\n\n),\n\nbanner_address_types as (\n\n   select * from {{ ref('int_banner__address_types') }}\n\n),\n\nbanner_address_states as (\n\n   select * from {{ ref('int_banner__address_state_types') }}\n\n),\n\nbanner_address_nations as (\n\n   select * from {{ ref('int_banner__address_nation_types') }}\n\n),\n\naddresses_and_type_descs as (\n\n  select \n\n  -- banner_addresses (driver)\n  {{ dbt_utils.star(from=ref('stg_banner__saturn__spraddr'),\n                    relation_alias='banner_addresses',\n                    except=[\"is_active\"]) }},\n\n   -- banner_address_types\n  {{ dbt_utils.star(from=ref('int_banner__address_types'),\n                    relation_alias='banner_address_types',\n                    except=[\"ods_surrogate_key\",\n                            \"address_type_code\"]) }},\n\n   -- banner_address_states\n  {{ dbt_utils.star(from=ref('int_banner__address_state_types'),\n                    relation_alias='banner_address_states',\n                    except=[\"ods_surrogate_key\",\n                            \"state_code\"]) }},\n\n   -- banner_address_nations\n  {{ dbt_utils.star(from=ref('int_banner__address_nation_types'),\n                    relation_alias='banner_address_nations',\n                    except=[\"ods_surrogate_key\",\n                            \"nation_code\"]) }}\n\n  from banner_addresses\n  left join banner_address_types \n    on banner_address_types.address_type_code = \n           banner_addresses.address_type_code\n  left join banner_address_states \n    on banner_address_states.state_code = \n           banner_addresses.state_code\n  left join banner_address_nations \n    on banner_address_nations.nation_code = \n           banner_addresses.nation_code\n  where is_active = 'Y'\n\n),\n-- not_null_int_banner__addresses__filtered_to_active_address_line_1\n-- relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active\ntest_clean as (\n\n  select *\n  from addresses_and_type_descs t1\n  -- failed test sql\n  where address_line_1 is not null\n    and t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from {{ ref('int_banner__entities__filtered_to_active') }} t2\n                                 )\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id',\n             'address_type_code',\n             'address_seqno']) }}           as ods_surrogate_key \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__spraddr", "package": null, "version": null}, {"name": "int_banner__address_types", "package": null, "version": null}, {"name": "int_banner__address_state_types", "package": null, "version": null}, {"name": "int_banner__address_nation_types", "package": null, "version": null}, {"name": "stg_banner__saturn__spraddr", "package": null, "version": null}, {"name": "int_banner__address_types", "package": null, "version": null}, {"name": "int_banner__address_state_types", "package": null, "version": null}, {"name": "int_banner__address_nation_types", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__spraddr", "model.ods.int_banner__address_types", "model.ods.int_banner__address_state_types", "model.ods.int_banner__address_nation_types", "model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/int_banner__addresses__filtered_to_active.sql", "compiled": true, "compiled_code": "with banner_addresses as (\n\n   select * from \"ods\".\"banner\".\"stg_banner__saturn__spraddr\"\n\n),\n\nbanner_address_types as (\n\n   select * from \"ods\".\"banner\".\"int_banner__address_types\"\n\n),\n\nbanner_address_states as (\n\n   select * from \"ods\".\"banner\".\"int_banner__address_state_types\"\n\n),\n\nbanner_address_nations as (\n\n   select * from \"ods\".\"banner\".\"int_banner__address_nation_types\"\n\n),\n\naddresses_and_type_descs as (\n\n  select \n\n  -- banner_addresses (driver)\n  banner_addresses.\"internal_banner_id\",\n  banner_addresses.\"address_type_code\",\n  banner_addresses.\"address_seqno\",\n  banner_addresses.\"address_line_1\",\n  banner_addresses.\"address_line_2\",\n  banner_addresses.\"address_line_3\",\n  banner_addresses.\"city\",\n  banner_addresses.\"state_code\",\n  banner_addresses.\"zip_code\",\n  banner_addresses.\"nation_code\",\n  banner_addresses.\"updated_at\",\n\n   -- banner_address_types\n  banner_address_types.\"address_type_desc\",\n\n   -- banner_address_states\n  banner_address_states.\"state_desc\",\n\n   -- banner_address_nations\n  banner_address_nations.\"nation_desc\"\n\n  from banner_addresses\n  left join banner_address_types \n    on banner_address_types.address_type_code = \n           banner_addresses.address_type_code\n  left join banner_address_states \n    on banner_address_states.state_code = \n           banner_addresses.state_code\n  left join banner_address_nations \n    on banner_address_nations.nation_code = \n           banner_addresses.nation_code\n  where is_active = 'Y'\n\n),\n-- not_null_int_banner__addresses__filtered_to_active_address_line_1\n-- relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active\ntest_clean as (\n\n  select *\n  from addresses_and_type_descs t1\n  -- failed test sql\n  where address_line_1 is not null\n    and t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\" t2\n                                 )\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(address_type_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(address_seqno as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__address_types": {"database": "ods", "schema": "banner", "name": "int_banner__address_types", "resource_type": "model", "package_name": "ods", "path": "intermediate/addresses/int_banner__address_types.sql", "original_file_path": "domains/general/models/intermediate/addresses/int_banner__address_types.sql", "unique_id": "model.ods.int_banner__address_types", "fqn": ["ods", "intermediate", "addresses", "int_banner__address_types"], "alias": "int_banner__address_types", "checksum": {"name": "sha256", "checksum": "dacf3ae57ee1660789014995c1849e7b676f8bc530a26ea30eeefb1ecd7797ca"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "address_type_code"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner address type", "columns": {"address_type_code": {"name": "address_type_code", "description": "Address type code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "address_type_desc": {"name": "address_type_desc", "description": "Address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "address_type_code"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/addresses/_int_addresses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "address_type_code"}, "access": "private"}, "created_at": 1705823512.164263, "relation_name": "\"ods\".\"banner\".\"int_banner__address_types\"", "raw_code": "with banner_address_types as (\n\n    select * from {{ ref('stg_banner__saturn__stvatyp') }}\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['address_type_code']) }}           as ods_surrogate_key\nfrom banner_address_types", "language": "sql", "refs": [{"name": "stg_banner__saturn__stvatyp", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__stvatyp"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/int_banner__address_types.sql", "compiled": true, "compiled_code": "with banner_address_types as (\n\n    select * from \"ods\".\"banner\".\"stg_banner__saturn__stvatyp\"\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(address_type_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom banner_address_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__address_state_types": {"database": "ods", "schema": "banner", "name": "int_banner__address_state_types", "resource_type": "model", "package_name": "ods", "path": "intermediate/addresses/int_banner__address_state_types.sql", "original_file_path": "domains/general/models/intermediate/addresses/int_banner__address_state_types.sql", "unique_id": "model.ods.int_banner__address_state_types", "fqn": ["ods", "intermediate", "addresses", "int_banner__address_state_types"], "alias": "int_banner__address_state_types", "checksum": {"name": "sha256", "checksum": "c8de5b0d3ba6c07d9c51ac72a3680816388aa04708479ffd91db5140d87e5064"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "state_code"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner address state/province type", "columns": {"state_code": {"name": "state_code", "description": "State/Province code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "state_desc": {"name": "state_desc", "description": "State/Province description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "state_code"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/addresses/_int_addresses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "state_code"}, "access": "private"}, "created_at": 1705823512.1630678, "relation_name": "\"ods\".\"banner\".\"int_banner__address_state_types\"", "raw_code": "with banner_address_state_types as (\n\n    select * from {{ ref('stg_banner__saturn__stvstat') }}\n\n),\n\n-- unique_int_banner__address_state_types_state_desc\ntest_clean as (\n  \n  select *\n  from banner_address_state_types t1\n  -- failed test sql\n  where t1.state_desc not in (\n                               select t2.state_desc\n                               from {{ ref('stg_banner__saturn__stvstat') }} t2\n                               group by t2.state_desc\n                               having count(*) > 1\n                             )\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['state_code']) }}           as ods_surrogate_key\nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__stvstat", "package": null, "version": null}, {"name": "stg_banner__saturn__stvstat", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__stvstat"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/int_banner__address_state_types.sql", "compiled": true, "compiled_code": "with banner_address_state_types as (\n\n    select * from \"ods\".\"banner\".\"stg_banner__saturn__stvstat\"\n\n),\n\n-- unique_int_banner__address_state_types_state_desc\ntest_clean as (\n  \n  select *\n  from banner_address_state_types t1\n  -- failed test sql\n  where t1.state_desc not in (\n                               select t2.state_desc\n                               from \"ods\".\"banner\".\"stg_banner__saturn__stvstat\" t2\n                               group by t2.state_desc\n                               having count(*) > 1\n                             )\n)\n\nselect *,\n       md5(cast(coalesce(cast(state_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__address_nation_types": {"database": "ods", "schema": "banner", "name": "int_banner__address_nation_types", "resource_type": "model", "package_name": "ods", "path": "intermediate/addresses/int_banner__address_nation_types.sql", "original_file_path": "domains/general/models/intermediate/addresses/int_banner__address_nation_types.sql", "unique_id": "model.ods.int_banner__address_nation_types", "fqn": ["ods", "intermediate", "addresses", "int_banner__address_nation_types"], "alias": "int_banner__address_nation_types", "checksum": {"name": "sha256", "checksum": "4ed394fa6a62ee4a84bcfb1c4d72161ee00b822bda165cfe51b0cb4f34f68498"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "nation_code"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner address nation type", "columns": {"nation_code": {"name": "nation_code", "description": "Nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "nation_desc": {"name": "nation_desc", "description": "Nation description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "nation_code"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/addresses/_int_addresses__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "nation_code"}, "access": "private"}, "created_at": 1705823512.162175, "relation_name": "\"ods\".\"banner\".\"int_banner__address_nation_types\"", "raw_code": "with banner_address_nation_types as (\n\n    select * from {{ ref('stg_banner__saturn__stvnatn') }}\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['nation_code']) }}           as ods_surrogate_key\nfrom banner_address_nation_types", "language": "sql", "refs": [{"name": "stg_banner__saturn__stvnatn", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__stvnatn"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/int_banner__address_nation_types.sql", "compiled": true, "compiled_code": "with banner_address_nation_types as (\n\n    select * from \"ods\".\"banner\".\"stg_banner__saturn__stvnatn\"\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(nation_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom banner_address_nation_types", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__entities__filtered_to__persons": {"database": "ods", "schema": "banner", "name": "int_banner__entities__filtered_to__persons", "resource_type": "model", "package_name": "ods", "path": "intermediate/persons/int_banner__entities__filtered_to__persons.sql", "original_file_path": "domains/general/models/intermediate/persons/int_banner__entities__filtered_to__persons.sql", "unique_id": "model.ods.int_banner__entities__filtered_to__persons", "fqn": ["ods", "intermediate", "persons", "int_banner__entities__filtered_to__persons"], "alias": "int_banner__entities__filtered_to__persons", "checksum": {"name": "sha256", "checksum": "a07dbab1b4de74ca5357f0a08fe43722cae12c63ef27cc470eb7dc0c1362fcbe"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner entities filtered to person", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Person last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "legal_first_name": {"name": "legal_first_name", "description": "Person legal first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_initial": {"name": "middle_initial", "description": "Person middle initial", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_address": {"name": "uo_email_address", "description": "University of Oregon email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_type_desc": {"name": "uo_email_type_desc", "description": "University of Oregon email address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_area": {"name": "ma_phone_area", "description": "Mailing phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_number": {"name": "ma_phone_number", "description": "Mailing phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_ext": {"name": "ma_phone_ext", "description": "Mailing phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_intl_access": {"name": "ma_intl_access", "description": "Mailing international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_type_desc": {"name": "ma_phone_type_desc", "description": "Mailing phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_area": {"name": "pr_phone_area", "description": "Permanent phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_number": {"name": "pr_phone_number", "description": "Permanent phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_ext": {"name": "pr_phone_ext", "description": "Permanent phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_intl_access": {"name": "pr_intl_access", "description": "Permanent international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_type_desc": {"name": "pr_phone_type_desc", "description": "Permanent phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_1": {"name": "ma_address_line_1", "description": "Mailing address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_2": {"name": "ma_address_line_2", "description": "Mailing address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_3": {"name": "ma_address_line_3", "description": "Mailing address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_city": {"name": "ma_city", "description": "Mailing city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_code": {"name": "ma_state_code", "description": "Mailing state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_desc": {"name": "ma_state_desc", "description": "Mailing state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_zip_code": {"name": "ma_zip_code", "description": "Mailing ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_code": {"name": "ma_nation_code", "description": "Mailing nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_desc": {"name": "ma_nation_desc", "description": "Mailing nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_1": {"name": "pr_address_line_1", "description": "Permanent address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_2": {"name": "pr_address_line_2", "description": "Permanent address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_3": {"name": "pr_address_line_3", "description": "Permanent address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_city": {"name": "pr_city", "description": "Permanent city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_code": {"name": "pr_state_code", "description": "Permanent state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_desc": {"name": "pr_state_desc", "description": "Permanent state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_zip_code": {"name": "pr_zip_code", "description": "Permanent ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_code": {"name": "pr_nation_code", "description": "Permanent nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_desc": {"name": "pr_nation_desc", "description": "Permanent nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/persons/_int_persons__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "internal_banner_id"}, "access": "private"}, "created_at": 1705823512.192721, "relation_name": "\"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"", "raw_code": "with banner__active_entities as (\n\n  select * from {{ ref('mart_entities') }}\n\n),\n\nfilter_to_person as (\n\n  select \n\n  -- banner__active_entities\n  {{ dbt_utils.star(from=ref('mart_entities'),\n                    relation_alias='banner__active_entities',\n                    except=[\"ods_surrogate_key\",\n                            \"is_person\",\n                            \"organization_or_last_name\"]) }},\n  banner__active_entities.organization_or_last_name as last_name\n    \n  from banner__active_entities    \n  where is_person = 'Y'\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom filter_to_person", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}, {"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/int_banner__entities__filtered_to__persons.sql", "compiled": true, "compiled_code": "with banner__active_entities as (\n\n  select * from \"ods\".\"banner\".\"mart_entities\"\n\n),\n\nfilter_to_person as (\n\n  select \n\n  -- banner__active_entities\n  banner__active_entities.\"internal_banner_id\",\n  banner__active_entities.\"banner_id\",\n  banner__active_entities.\"legal_first_name\",\n  banner__active_entities.\"middle_initial\",\n  banner__active_entities.\"uo_email_address\",\n  banner__active_entities.\"uo_email_type_desc\",\n  banner__active_entities.\"ma_phone_area\",\n  banner__active_entities.\"ma_phone_number\",\n  banner__active_entities.\"ma_phone_ext\",\n  banner__active_entities.\"ma_intl_access\",\n  banner__active_entities.\"ma_phone_type_desc\",\n  banner__active_entities.\"pr_phone_area\",\n  banner__active_entities.\"pr_phone_number\",\n  banner__active_entities.\"pr_phone_ext\",\n  banner__active_entities.\"pr_intl_access\",\n  banner__active_entities.\"pr_phone_type_desc\",\n  banner__active_entities.\"ma_address_line_1\",\n  banner__active_entities.\"ma_address_line_2\",\n  banner__active_entities.\"ma_address_line_3\",\n  banner__active_entities.\"ma_city\",\n  banner__active_entities.\"ma_state_code\",\n  banner__active_entities.\"ma_state_desc\",\n  banner__active_entities.\"ma_zip_code\",\n  banner__active_entities.\"ma_nation_code\",\n  banner__active_entities.\"ma_nation_desc\",\n  banner__active_entities.\"pr_address_line_1\",\n  banner__active_entities.\"pr_address_line_2\",\n  banner__active_entities.\"pr_address_line_3\",\n  banner__active_entities.\"pr_city\",\n  banner__active_entities.\"pr_state_code\",\n  banner__active_entities.\"pr_state_desc\",\n  banner__active_entities.\"pr_zip_code\",\n  banner__active_entities.\"pr_nation_code\",\n  banner__active_entities.\"pr_nation_desc\",\n  banner__active_entities.organization_or_last_name as last_name\n    \n  from banner__active_entities    \n  where is_person = 'Y'\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom filter_to_person", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__person_details": {"database": "ods", "schema": "banner", "name": "int_banner__person_details", "resource_type": "model", "package_name": "ods", "path": "intermediate/persons/int_banner__person_details.sql", "original_file_path": "domains/general/models/intermediate/persons/int_banner__person_details.sql", "unique_id": "model.ods.int_banner__person_details", "fqn": ["ods", "intermediate", "persons", "int_banner__person_details"], "alias": "int_banner__person_details", "checksum": {"name": "sha256", "checksum": "9c4a87f495cc3cf8a3e8497dc4a074ef09328491fb98120260008e837eebb5d3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner person detail", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_first_name": {"name": "preferred_first_name", "description": "Person preferred first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_confidential": {"name": "is_confidential", "description": "Confidential indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/persons/_int_persons__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id"}, "access": "private"}, "created_at": 1705823512.193569, "relation_name": "\"ods\".\"banner\".\"int_banner__person_details\"", "raw_code": "with banner_person_details as (\n\n  select * from {{ ref('stg_banner__saturn__spbpers') }}\n\n),\n\n-- relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__person\ntest_clean as (\n     \n  select *\n  from banner_person_details t1\n  -- failed test sql\n  where t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from {{ ref('int_banner__entities__filtered_to__persons') }} t2\n                                 )\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key  \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__spbpers", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__spbpers", "model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/int_banner__person_details.sql", "compiled": true, "compiled_code": "with banner_person_details as (\n\n  select * from \"ods\".\"banner\".\"stg_banner__saturn__spbpers\"\n\n),\n\n-- relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__person\ntest_clean as (\n     \n  select *\n  from banner_person_details t1\n  -- failed test sql\n  where t1.internal_banner_id in (\n                                  select t2.internal_banner_id\n                                  from \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\" t2\n                                 )\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key  \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__entity__name__hist": {"database": "ods", "schema": "banner", "name": "int_banner__entity__name__hist", "resource_type": "model", "package_name": "ods", "path": "intermediate/entity__name__hist/int_banner__entity__name__hist.sql", "original_file_path": "domains/general/models/intermediate/entity__name__hist/int_banner__entity__name__hist.sql", "unique_id": "model.ods.int_banner__entity__name__hist", "fqn": ["ods", "intermediate", "entity__name__hist", "int_banner__entity__name__hist"], "alias": "int_banner__entity__name__hist", "checksum": {"name": "sha256", "checksum": "8122b62c60d128bc31893df2eb6998b40cf1db5fc2f846093d0f75261b9b473f"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, updated_at"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner Active and Inactive Names", "columns": {"is_active": {"name": "is_active", "description": "Indicator of active Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_or_last_name": {"name": "organization_or_last_name", "description": "Organization or Person last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "legal_first_name": {"name": "legal_first_name", "description": "Person legal first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_initial": {"name": "middle_initial", "description": "Person middle initial", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "'P' for person, 'C' for organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id, updated_at"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, updated_at"}, "access": "private"}, "created_at": 1705823512.204899, "relation_name": "\"ods\".\"banner\".\"int_banner__entity__name__hist\"", "raw_code": "with banner_entities as (\n\n  select * from {{ ref('stg_banner__saturn__spriden') }}\n\n),\n\nbanner_active_entities as (\n\n  select * from {{ ref('int_banner__entities__filtered_to_active') }}\n\n),\n\nbanner_inactive_entity_names as (\n\n  select * \n  from banner_entities\n  where change_ind = 'N'\n\n),\n\ncurr_and_hist_banner_entity_names as (\n\n  select \n    \n    'Y'                       as is_active,\n    organization_or_last_name as organization_or_last_name,\n    legal_first_name          as legal_first_name,\n    middle_initial            as middle_initial,\n    updated_at                as updated_at,\n    internal_banner_id        as internal_banner_id,\n    is_person                 as is_person\n\n  from banner_active_entities\n\n  union\n\n  select \n\n    'N'                          as is_active,\n    -- Inactive Banner entity names\n    t1.organization_or_last_name as organization_or_last_name,\n    t1.legal_first_name          as legal_first_name,\n    t1.middle_initial            as middle_initial,\n    t1.updated_at                as updated_at,\n    -- Active Banner entity details\n    t2.internal_banner_id        as internal_banner_id,\n    t2.is_person                 as is_person\n\n  from banner_inactive_entity_names t1\n  join banner_active_entities   t2\n    on t2.internal_banner_id = t1.internal_banner_id\n\n),\n\n-- unique_int_banner__entity_name__hist_ods_surrogate_key\ntest_clean as (\n \n  select *\n  from curr_and_hist_banner_entity_names\n  -- failed test sql\n  where not exists (\n                    select \n\n                           organization_or_last_name,\n                           legal_first_name,\n                           middle_initial,\n                           updated_at,\n                           count(*) as n_records\n\n                    from curr_and_hist_banner_entity_names\n                    group by organization_or_last_name,\n                             legal_first_name,\n                             middle_initial,\n                             updated_at\n                    having count(*) > 1\n                   )\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['organization_or_last_name',\n             'legal_first_name',\n             'middle_initial',\n             'updated_at'\n             ]) }}           as ods_surrogate_key \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__spriden", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__spriden", "model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__name__hist/int_banner__entity__name__hist.sql", "compiled": true, "compiled_code": "with banner_entities as (\n\n  select * from \"ods\".\"banner\".\"stg_banner__saturn__spriden\"\n\n),\n\nbanner_active_entities as (\n\n  select * from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n\n),\n\nbanner_inactive_entity_names as (\n\n  select * \n  from banner_entities\n  where change_ind = 'N'\n\n),\n\ncurr_and_hist_banner_entity_names as (\n\n  select \n    \n    'Y'                       as is_active,\n    organization_or_last_name as organization_or_last_name,\n    legal_first_name          as legal_first_name,\n    middle_initial            as middle_initial,\n    updated_at                as updated_at,\n    internal_banner_id        as internal_banner_id,\n    is_person                 as is_person\n\n  from banner_active_entities\n\n  union\n\n  select \n\n    'N'                          as is_active,\n    -- Inactive Banner entity names\n    t1.organization_or_last_name as organization_or_last_name,\n    t1.legal_first_name          as legal_first_name,\n    t1.middle_initial            as middle_initial,\n    t1.updated_at                as updated_at,\n    -- Active Banner entity details\n    t2.internal_banner_id        as internal_banner_id,\n    t2.is_person                 as is_person\n\n  from banner_inactive_entity_names t1\n  join banner_active_entities   t2\n    on t2.internal_banner_id = t1.internal_banner_id\n\n),\n\n-- unique_int_banner__entity_name__hist_ods_surrogate_key\ntest_clean as (\n \n  select *\n  from curr_and_hist_banner_entity_names\n  -- failed test sql\n  where not exists (\n                    select \n\n                           organization_or_last_name,\n                           legal_first_name,\n                           middle_initial,\n                           updated_at,\n                           count(*) as n_records\n\n                    from curr_and_hist_banner_entity_names\n                    group by organization_or_last_name,\n                             legal_first_name,\n                             middle_initial,\n                             updated_at\n                    having count(*) > 1\n                   )\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(organization_or_last_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(legal_first_name as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(middle_initial as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__entity__id__hist": {"database": "ods", "schema": "banner", "name": "int_banner__entity__id__hist", "resource_type": "model", "package_name": "ods", "path": "intermediate/entity__id__hist/int_banner__entity__id__hist.sql", "original_file_path": "domains/general/models/intermediate/entity__id__hist/int_banner__entity__id__hist.sql", "unique_id": "model.ods.int_banner__entity__id__hist", "fqn": ["ods", "intermediate", "entity__id__hist", "int_banner__entity__id__hist"], "alias": "int_banner__entity__id__hist", "checksum": {"name": "sha256", "checksum": "16d5380cc931cac00bdeb59acd611f426f6d5326949ff66729e264f9badcb482"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, updated_at"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner Active and Inactive IDs", "columns": {"is_active": {"name": "is_active", "description": "Indicator of active Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id, updated_at"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id, updated_at"}, "access": "private"}, "created_at": 1705823512.2105112, "relation_name": "\"ods\".\"banner\".\"int_banner__entity__id__hist\"", "raw_code": "with banner_entities as (\n\n  select * from {{ ref('stg_banner__saturn__spriden') }}\n\n),\n\nbanner_active_entities as (\n\n  select * from {{ ref('int_banner__entities__filtered_to_active') }}\n\n),\n\nbanner_inactive_entity_ids as (\n\n  select * \n  from banner_entities\n  where change_ind = 'I'\n\n),\n\ncurr_and_hist_banner_entity_ids as (\n\n  select \n\n    'Y'                       as is_active,\n    banner_id                 as banner_id,\n    updated_at                as updated_at,\n    internal_banner_id        as internal_banner_id\n\n  from banner_active_entities\n\n  union\n\n  select \n   \n    'N'                          as is_active,\n    -- Inactive Banner entity ID\n    t1.banner_id                 as banner_id,\n    t1.updated_at                as updated_at,\n    -- Active Banner entity details\n    t2.internal_banner_id        as internal_banner_id\n\n  from banner_inactive_entity_ids t1\n  join banner_active_entities   t2\n    on t2.internal_banner_id = t1.internal_banner_id\n\n),\n\n-- unique_int_banner__entity__id__hist_ods_surrogate_key\ntest_clean as (\n\n  select *\n  from curr_and_hist_banner_entity_ids\n  -- failed test sql\n  where not exists (\n                    select \n                          \n                           banner_id,\n                           updated_at,\n                           count(*) as n_records\n                           \n                    from curr_and_hist_banner_entity_ids\n                    group by banner_id,\n                             updated_at\n                    having count(*) > 1\n                   )\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['banner_id',\n             'updated_at']) }}           as ods_surrogate_key \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__spriden", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__spriden", "model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__id__hist/int_banner__entity__id__hist.sql", "compiled": true, "compiled_code": "with banner_entities as (\n\n  select * from \"ods\".\"banner\".\"stg_banner__saturn__spriden\"\n\n),\n\nbanner_active_entities as (\n\n  select * from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n\n),\n\nbanner_inactive_entity_ids as (\n\n  select * \n  from banner_entities\n  where change_ind = 'I'\n\n),\n\ncurr_and_hist_banner_entity_ids as (\n\n  select \n\n    'Y'                       as is_active,\n    banner_id                 as banner_id,\n    updated_at                as updated_at,\n    internal_banner_id        as internal_banner_id\n\n  from banner_active_entities\n\n  union\n\n  select \n   \n    'N'                          as is_active,\n    -- Inactive Banner entity ID\n    t1.banner_id                 as banner_id,\n    t1.updated_at                as updated_at,\n    -- Active Banner entity details\n    t2.internal_banner_id        as internal_banner_id\n\n  from banner_inactive_entity_ids t1\n  join banner_active_entities   t2\n    on t2.internal_banner_id = t1.internal_banner_id\n\n),\n\n-- unique_int_banner__entity__id__hist_ods_surrogate_key\ntest_clean as (\n\n  select *\n  from curr_and_hist_banner_entity_ids\n  -- failed test sql\n  where not exists (\n                    select \n                          \n                           banner_id,\n                           updated_at,\n                           count(*) as n_records\n                           \n                    from curr_and_hist_banner_entity_ids\n                    group by banner_id,\n                             updated_at\n                    having count(*) > 1\n                   )\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(banner_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(updated_at as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__email_addresses__pivoted_to__entities": {"database": "ods", "schema": "banner", "name": "int_banner__email_addresses__pivoted_to__entities", "resource_type": "model", "package_name": "ods", "path": "intermediate/entities/int_banner__email_addresses__pivoted_to__entities.sql", "original_file_path": "domains/general/models/intermediate/entities/int_banner__email_addresses__pivoted_to__entities.sql", "unique_id": "model.ods.int_banner__email_addresses__pivoted_to__entities", "fqn": ["ods", "intermediate", "entities", "int_banner__email_addresses__pivoted_to__entities"], "alias": "int_banner__email_addresses__pivoted_to__entities", "checksum": {"name": "sha256", "checksum": "58d3a9a7f11a154b8ac9aecae4f87693509b82d05936063f5876b5f30bbc989c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner email addresses pivoted to entity", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_address": {"name": "uo_email_address", "description": "University of Oregon email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_type_desc": {"name": "uo_email_type_desc", "description": "University of Oregon email address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/entities/_int_entities__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id"}, "access": "private"}, "created_at": 1705823512.216461, "relation_name": "\"ods\".\"banner\".\"int_banner__email_addresses__pivoted_to__entities\"", "raw_code": "with banner__email_addresses as (\n\n  select * from {{ ref('int_banner__email_addresses__filtered_to_active') }}\n\n),\n\n\n{%- set email_type_codes = ['uo'] -%}\n-- ^ Add more as requested\nemail_addresses__pivoted_to_entity as (\n\n  select\n\n    internal_banner_id,\n    {% for email_type_code in email_type_codes -%}\n         \n      max(case when email_type_code = upper('{{ email_type_code }}') then email_address end) as {{ email_type_code }}_email_address,\n      max(case when email_type_code = upper('{{ email_type_code }}') then email_type_desc end) as {{ email_type_code }}_email_type_desc\n\n      {%- if not loop.last %},{% endif %}\n    {%- endfor %}\n\n  from banner__email_addresses t1\n  where updated_at = (\n                      select max(t2.updated_at)\n                      from banner__email_addresses t2\n                      where t2.internal_banner_id = t1.internal_banner_id\n                        and t2.email_type_code = t1.email_type_code\n                     )\n  group by internal_banner_id\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom email_addresses__pivoted_to_entity", "language": "sql", "refs": [{"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/int_banner__email_addresses__pivoted_to__entities.sql", "compiled": true, "compiled_code": "with banner__email_addresses as (\n\n  select * from \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\n\n),-- ^ Add more as requested\nemail_addresses__pivoted_to_entity as (\n\n  select\n\n    internal_banner_id,\n    max(case when email_type_code = upper('uo') then email_address end) as uo_email_address,\n      max(case when email_type_code = upper('uo') then email_type_desc end) as uo_email_type_desc\n\n  from banner__email_addresses t1\n  where updated_at = (\n                      select max(t2.updated_at)\n                      from banner__email_addresses t2\n                      where t2.internal_banner_id = t1.internal_banner_id\n                        and t2.email_type_code = t1.email_type_code\n                     )\n  group by internal_banner_id\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom email_addresses__pivoted_to_entity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__addresses__pivoted_to__entities": {"database": "ods", "schema": "banner", "name": "int_banner__addresses__pivoted_to__entities", "resource_type": "model", "package_name": "ods", "path": "intermediate/entities/int_banner__addresses__pivoted_to__entities.sql", "original_file_path": "domains/general/models/intermediate/entities/int_banner__addresses__pivoted_to__entities.sql", "unique_id": "model.ods.int_banner__addresses__pivoted_to__entities", "fqn": ["ods", "intermediate", "entities", "int_banner__addresses__pivoted_to__entities"], "alias": "int_banner__addresses__pivoted_to__entities", "checksum": {"name": "sha256", "checksum": "f4e3be016aff526f93ab62710c17efff5317e47c89989fb0457bb35deb5f99c9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner addresses pivoted to entities", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_1": {"name": "ma_address_line_1", "description": "Mailing address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_2": {"name": "ma_address_line_2", "description": "Mailing address line 2", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "ma_address_line_3": {"name": "ma_address_line_3", "description": "Mailing address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_city": {"name": "ma_city", "description": "Mailing city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_code": {"name": "ma_state_code", "description": "Mailing state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_desc": {"name": "ma_state_desc", "description": "Mailing state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_zip_code": {"name": "ma_zip_code", "description": "Mailing ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_code": {"name": "ma_nation_code", "description": "Mailing nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_desc": {"name": "ma_nation_desc", "description": "Mailing nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_1": {"name": "pr_address_line_1", "description": "Permanent address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_2": {"name": "pr_address_line_2", "description": "Permanent address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_3": {"name": "pr_address_line_3", "description": "Permanent address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_city": {"name": "pr_city", "description": "Permanent city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_code": {"name": "pr_state_code", "description": "Permanent state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_desc": {"name": "pr_state_desc", "description": "Permanent state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_zip_code": {"name": "pr_zip_code", "description": "Permanent ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_code": {"name": "pr_nation_code", "description": "Permanent nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_desc": {"name": "pr_nation_desc", "description": "Permanent nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/entities/_int_entities__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "internal_banner_id"}, "access": "private"}, "created_at": 1705823512.215557, "relation_name": "\"ods\".\"banner\".\"int_banner__addresses__pivoted_to__entities\"", "raw_code": "with banner__addresses as (\n\n  select * from {{ ref('int_banner__addresses__filtered_to_active') }}\n\n),\n\n\n{%- set address_type_codes = ['ma', 'pr'] -%}\n-- ^ Add more as requested\naddresses__pivoted_to_entity as (\n\n  select\n\n    internal_banner_id,\n    {% for address_type_code in address_type_codes -%}\n         \n      max(case when address_type_code = upper('{{ address_type_code }}') then address_line_1 end) as {{ address_type_code }}_address_line_1,\n      max(case when address_type_code = upper('{{ address_type_code }}') then address_line_2 end) as {{ address_type_code }}_address_line_2,\n      max(case when address_type_code = upper('{{ address_type_code }}') then address_line_3 end) as {{ address_type_code }}_address_line_3,\n      max(case when address_type_code = upper('{{ address_type_code }}') then city end) as {{ address_type_code }}_city,\n      max(case when address_type_code = upper('{{ address_type_code }}') then state_code end) as {{ address_type_code }}_state_code,\n      max(case when address_type_code = upper('{{ address_type_code }}') then state_desc end) as {{ address_type_code }}_state_desc,\n      max(case when address_type_code = upper('{{ address_type_code }}') then zip_code end) as {{ address_type_code }}_zip_code,\n      max(case when address_type_code = upper('{{ address_type_code }}') then nation_code end) as {{ address_type_code }}_nation_code,\n      max(case when address_type_code = upper('{{ address_type_code }}') then nation_desc end) as {{ address_type_code }}_nation_desc\n\n      {%- if not loop.last %},{% endif %}\n    {%- endfor %}\n\n  from banner__addresses t1\n  where address_seqno = (\n                          select max(t2.address_seqno)\n                          from banner__addresses t2\n                          where t2.internal_banner_id = t1.internal_banner_id\n                            and t2.address_type_code = t1.address_type_code\n                        )\n  group by internal_banner_id\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom addresses__pivoted_to_entity", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/int_banner__addresses__pivoted_to__entities.sql", "compiled": true, "compiled_code": "with banner__addresses as (\n\n  select * from \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\n\n),-- ^ Add more as requested\naddresses__pivoted_to_entity as (\n\n  select\n\n    internal_banner_id,\n    max(case when address_type_code = upper('ma') then address_line_1 end) as ma_address_line_1,\n      max(case when address_type_code = upper('ma') then address_line_2 end) as ma_address_line_2,\n      max(case when address_type_code = upper('ma') then address_line_3 end) as ma_address_line_3,\n      max(case when address_type_code = upper('ma') then city end) as ma_city,\n      max(case when address_type_code = upper('ma') then state_code end) as ma_state_code,\n      max(case when address_type_code = upper('ma') then state_desc end) as ma_state_desc,\n      max(case when address_type_code = upper('ma') then zip_code end) as ma_zip_code,\n      max(case when address_type_code = upper('ma') then nation_code end) as ma_nation_code,\n      max(case when address_type_code = upper('ma') then nation_desc end) as ma_nation_desc,max(case when address_type_code = upper('pr') then address_line_1 end) as pr_address_line_1,\n      max(case when address_type_code = upper('pr') then address_line_2 end) as pr_address_line_2,\n      max(case when address_type_code = upper('pr') then address_line_3 end) as pr_address_line_3,\n      max(case when address_type_code = upper('pr') then city end) as pr_city,\n      max(case when address_type_code = upper('pr') then state_code end) as pr_state_code,\n      max(case when address_type_code = upper('pr') then state_desc end) as pr_state_desc,\n      max(case when address_type_code = upper('pr') then zip_code end) as pr_zip_code,\n      max(case when address_type_code = upper('pr') then nation_code end) as pr_nation_code,\n      max(case when address_type_code = upper('pr') then nation_desc end) as pr_nation_desc\n\n  from banner__addresses t1\n  where address_seqno = (\n                          select max(t2.address_seqno)\n                          from banner__addresses t2\n                          where t2.internal_banner_id = t1.internal_banner_id\n                            and t2.address_type_code = t1.address_type_code\n                        )\n  group by internal_banner_id\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom addresses__pivoted_to_entity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__phones__pivoted_to__entities": {"database": "ods", "schema": "banner", "name": "int_banner__phones__pivoted_to__entities", "resource_type": "model", "package_name": "ods", "path": "intermediate/entities/int_banner__phones__pivoted_to__entities.sql", "original_file_path": "domains/general/models/intermediate/entities/int_banner__phones__pivoted_to__entities.sql", "unique_id": "model.ods.int_banner__phones__pivoted_to__entities", "fqn": ["ods", "intermediate", "entities", "int_banner__phones__pivoted_to__entities"], "alias": "int_banner__phones__pivoted_to__entities", "checksum": {"name": "sha256", "checksum": "d4b81df3f9bab44567858052e24fcb8425ddc06b7315c3196c0d95e1210cb681"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner phones pivoted to entity", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_area": {"name": "ma_phone_area", "description": "Mailing phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_number": {"name": "ma_phone_number", "description": "Mailing phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_ext": {"name": "ma_phone_ext", "description": "Mailing phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_intl_access": {"name": "ma_intl_access", "description": "Mailing international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_type_desc": {"name": "ma_phone_type_desc", "description": "Mailing phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_area": {"name": "pr_phone_area", "description": "Permanent phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_number": {"name": "pr_phone_number", "description": "Permanent phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_ext": {"name": "pr_phone_ext", "description": "Permanent phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_intl_access": {"name": "pr_intl_access", "description": "Permanent international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_type_desc": {"name": "pr_phone_type_desc", "description": "Permanent phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/entities/_int_entities__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "meta": {"grain": "internal_banner_id"}, "access": "private"}, "created_at": 1705823512.2185228, "relation_name": "\"ods\".\"banner\".\"int_banner__phones__pivoted_to__entities\"", "raw_code": "with banner__phones as (\n\n  select * from {{ ref('int_banner__phones__filtered_to_active') }}\n\n),\n\n\n{%- set phone_type_codes = ['ma', 'pr'] -%}\n-- ^ Add more as requested\nphones__pivoted_to_entity as (\n\n  select\n\n    internal_banner_id,\n    {% for phone_type_code in phone_type_codes -%}\n         \n      max(case when phone_type_code = upper('{{ phone_type_code }}') then phone_area end) as {{ phone_type_code }}_phone_area,\n      max(case when phone_type_code = upper('{{ phone_type_code }}') then phone_number end) as {{ phone_type_code }}_phone_number,\n      max(case when phone_type_code = upper('{{ phone_type_code }}') then phone_ext end) as {{ phone_type_code }}_phone_ext,\n      max(case when phone_type_code = upper('{{ phone_type_code }}') then intl_access end) as {{ phone_type_code }}_intl_access,\n      max(case when phone_type_code = upper('{{ phone_type_code }}') then phone_type_desc end) as {{ phone_type_code }}_phone_type_desc\n\n\n      {%- if not loop.last %},{% endif %}\n    {%- endfor %}\n\n  from banner__phones t1\n  where updated_at = (\n                      select max(t2.updated_at)\n                      from banner__phones t2\n                      where t2.internal_banner_id = t1.internal_banner_id\n                        and t2.phone_type_code = t1.phone_type_code\n                     )\n  group by internal_banner_id\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom phones__pivoted_to_entity", "language": "sql", "refs": [{"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/int_banner__phones__pivoted_to__entities.sql", "compiled": true, "compiled_code": "with banner__phones as (\n\n  select * from \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\n\n),-- ^ Add more as requested\nphones__pivoted_to_entity as (\n\n  select\n\n    internal_banner_id,\n    max(case when phone_type_code = upper('ma') then phone_area end) as ma_phone_area,\n      max(case when phone_type_code = upper('ma') then phone_number end) as ma_phone_number,\n      max(case when phone_type_code = upper('ma') then phone_ext end) as ma_phone_ext,\n      max(case when phone_type_code = upper('ma') then intl_access end) as ma_intl_access,\n      max(case when phone_type_code = upper('ma') then phone_type_desc end) as ma_phone_type_desc,max(case when phone_type_code = upper('pr') then phone_area end) as pr_phone_area,\n      max(case when phone_type_code = upper('pr') then phone_number end) as pr_phone_number,\n      max(case when phone_type_code = upper('pr') then phone_ext end) as pr_phone_ext,\n      max(case when phone_type_code = upper('pr') then intl_access end) as pr_intl_access,\n      max(case when phone_type_code = upper('pr') then phone_type_desc end) as pr_phone_type_desc\n\n  from banner__phones t1\n  where updated_at = (\n                      select max(t2.updated_at)\n                      from banner__phones t2\n                      where t2.internal_banner_id = t1.internal_banner_id\n                        and t2.phone_type_code = t1.phone_type_code\n                     )\n  group by internal_banner_id\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom phones__pivoted_to_entity", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__entities__filtered_to_active": {"database": "ods", "schema": "banner", "name": "int_banner__entities__filtered_to_active", "resource_type": "model", "package_name": "ods", "path": "intermediate/entities/int_banner__entities__filtered_to_active.sql", "original_file_path": "domains/general/models/intermediate/entities/int_banner__entities__filtered_to_active.sql", "unique_id": "model.ods.int_banner__entities__filtered_to_active", "fqn": ["ods", "intermediate", "entities", "int_banner__entities__filtered_to_active"], "alias": "int_banner__entities__filtered_to_active", "checksum": {"name": "sha256", "checksum": "ff9cb7b755d3bbb62fe6966e8e5b8d71c2c328a116a786e8ff5f5636cdd5b356"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner active entity", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_or_last_name": {"name": "organization_or_last_name", "description": "Organization or Person last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "legal_first_name": {"name": "legal_first_name", "description": "Person legal first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_initial": {"name": "middle_initial", "description": "Person middle initial", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "'P' for person, 'C' for organization", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "updated_at": {"name": "updated_at", "description": "Creation/change date", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/intermediate/entities/_int_entities__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "general", "tags": ["banner_bug"], "meta": {"grain": "internal_banner_id"}, "access": "private"}, "created_at": 1705823512.217449, "relation_name": "\"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"", "raw_code": "with banner_entities as (\n\n  select * from {{ ref('stg_banner__saturn__spriden') }}\n\n),\n\nfilter_to_active as (\n\n  select \n    \n  -- banner_entities\n  {{ dbt_utils.star(from=ref('stg_banner__saturn__spriden'),\n                    relation_alias='banner_entities',\n                    except=[\"change_ind\"]) }}\n\n  from banner_entities\n  where change_ind = 'A'\n\n),\n\n-- unique_int_banner__entities__filter_to_active_banner_id\ntest_clean as (\n\n  select *\n  from filter_to_active\n  -- failed test sql\n  where not exists (\n                    select \n                    \n                           banner_id as unique_field,\n                           count(*) as n_records\n                           \n                    from filter_to_active\n                    where banner_id is not null\n                    group by banner_id\n                    having count(*) > 1\n                   )\n                     \n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__spriden", "package": null, "version": null}, {"name": "stg_banner__saturn__spriden", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__spriden"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/int_banner__entities__filtered_to_active.sql", "compiled": true, "compiled_code": "with banner_entities as (\n\n  select * from \"ods\".\"banner\".\"stg_banner__saturn__spriden\"\n\n),\n\nfilter_to_active as (\n\n  select \n    \n  -- banner_entities\n  banner_entities.\"internal_banner_id\",\n  banner_entities.\"banner_id\",\n  banner_entities.\"organization_or_last_name\",\n  banner_entities.\"legal_first_name\",\n  banner_entities.\"middle_initial\",\n  banner_entities.\"is_person\",\n  banner_entities.\"updated_at\"\n\n  from banner_entities\n  where change_ind = 'A'\n\n),\n\n-- unique_int_banner__entities__filter_to_active_banner_id\ntest_clean as (\n\n  select *\n  from filter_to_active\n  -- failed test sql\n  where not exists (\n                    select \n                    \n                           banner_id as unique_field,\n                           count(*) as n_records\n                           \n                    from filter_to_active\n                    where banner_id is not null\n                    group by banner_id\n                    having count(*) > 1\n                   )\n                     \n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.mart_persons": {"database": "ods", "schema": "banner", "name": "mart_persons", "resource_type": "model", "package_name": "ods", "path": "mart/mart_persons.sql", "original_file_path": "domains/general/models/mart/mart_persons.sql", "unique_id": "model.ods.mart_persons", "fqn": ["ods", "mart", "mart_persons"], "alias": "mart_persons", "checksum": {"name": "sha256", "checksum": "4448059f86828d2eccc0ea9dccf90b59714adcf9cd3e0a27a23b168be82256b2"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Person", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "legal_first_name": {"name": "legal_first_name", "description": "Person legal first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "preferred_first_name": {"name": "preferred_first_name", "description": "Person preferred first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_initial": {"name": "middle_initial", "description": "Person middle initial", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Person last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_confidential": {"name": "is_confidential", "description": "Confidential Indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_address": {"name": "uo_email_address", "description": "University of Oregon email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_type_desc": {"name": "uo_email_type_desc", "description": "University of Oregon email address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_area": {"name": "ma_phone_area", "description": "Mailing phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_number": {"name": "ma_phone_number", "description": "Mailing phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_ext": {"name": "ma_phone_ext", "description": "Mailing phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_intl_access": {"name": "ma_intl_access", "description": "Mailing international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_type_desc": {"name": "ma_phone_type_desc", "description": "Mailing phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_area": {"name": "pr_phone_area", "description": "Permanent phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_number": {"name": "pr_phone_number", "description": "Permanent phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_ext": {"name": "pr_phone_ext", "description": "Permanent phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_intl_access": {"name": "pr_intl_access", "description": "Permanent international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_type_desc": {"name": "pr_phone_type_desc", "description": "Permanent phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_1": {"name": "ma_address_line_1", "description": "Mailing address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_2": {"name": "ma_address_line_2", "description": "Mailing address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_3": {"name": "ma_address_line_3", "description": "Mailing address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_city": {"name": "ma_city", "description": "Mailing city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_code": {"name": "ma_state_code", "description": "Mailing state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_desc": {"name": "ma_state_desc", "description": "Mailing state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_zip_code": {"name": "ma_zip_code", "description": "Mailing ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_code": {"name": "ma_nation_code", "description": "Mailing nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_desc": {"name": "ma_nation_desc", "description": "Mailing nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_1": {"name": "pr_address_line_1", "description": "Permanent address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_2": {"name": "pr_address_line_2", "description": "Permanent address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_3": {"name": "pr_address_line_3", "description": "Permanent address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_city": {"name": "pr_city", "description": "Permanent city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_code": {"name": "pr_state_code", "description": "Permanent state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_desc": {"name": "pr_state_desc", "description": "Permanent state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_zip_code": {"name": "pr_zip_code", "description": "Permanent ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_code": {"name": "pr_nation_code", "description": "Permanent nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_desc": {"name": "pr_nation_desc", "description": "Permanent nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/mart/_mart_general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "group": "general", "meta": {"grain": "internal_banner_id"}, "access": "protected"}, "created_at": 1705823512.2399108, "relation_name": "\"ods\".\"banner\".\"mart_persons\"", "raw_code": "with banner_persons as (\n\n  select * from {{ ref('int_banner__entities__filtered_to__persons') }}\n\n),\n\nbanner_person_details as (\n\n  select * from {{ ref('int_banner__person_details') }}\n\n),\n\nfinal as (\n    \n  select \n    \n  -- banner_persons (driver)\n  {{ dbt_utils.star(from=ref('int_banner__entities__filtered_to__persons'),\n                    relation_alias='banner_persons',\n                    except=[\"ods_surrogate_key\"]) }},\n  -- banner_person_details\n  {{ dbt_utils.star(from=ref('int_banner__person_details'),\n                    relation_alias='banner_person_details',\n                    except=[\"ods_surrogate_key\",\n                            \"internal_banner_id\"]) }}\n\n  from banner_persons\n  left join banner_person_details\n    on banner_person_details.internal_banner_id = \n              banner_persons.internal_banner_id\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom final", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}, {"name": "int_banner__person_details", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}, {"name": "int_banner__person_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons", "model.ods.int_banner__person_details"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/mart_persons.sql", "compiled": true, "compiled_code": "with banner_persons as (\n\n  select * from \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\n\n),\n\nbanner_person_details as (\n\n  select * from \"ods\".\"banner\".\"int_banner__person_details\"\n\n),\n\nfinal as (\n    \n  select \n    \n  -- banner_persons (driver)\n  banner_persons.\"internal_banner_id\",\n  banner_persons.\"banner_id\",\n  banner_persons.\"legal_first_name\",\n  banner_persons.\"middle_initial\",\n  banner_persons.\"uo_email_address\",\n  banner_persons.\"uo_email_type_desc\",\n  banner_persons.\"ma_phone_area\",\n  banner_persons.\"ma_phone_number\",\n  banner_persons.\"ma_phone_ext\",\n  banner_persons.\"ma_intl_access\",\n  banner_persons.\"ma_phone_type_desc\",\n  banner_persons.\"pr_phone_area\",\n  banner_persons.\"pr_phone_number\",\n  banner_persons.\"pr_phone_ext\",\n  banner_persons.\"pr_intl_access\",\n  banner_persons.\"pr_phone_type_desc\",\n  banner_persons.\"ma_address_line_1\",\n  banner_persons.\"ma_address_line_2\",\n  banner_persons.\"ma_address_line_3\",\n  banner_persons.\"ma_city\",\n  banner_persons.\"ma_state_code\",\n  banner_persons.\"ma_state_desc\",\n  banner_persons.\"ma_zip_code\",\n  banner_persons.\"ma_nation_code\",\n  banner_persons.\"ma_nation_desc\",\n  banner_persons.\"pr_address_line_1\",\n  banner_persons.\"pr_address_line_2\",\n  banner_persons.\"pr_address_line_3\",\n  banner_persons.\"pr_city\",\n  banner_persons.\"pr_state_code\",\n  banner_persons.\"pr_state_desc\",\n  banner_persons.\"pr_zip_code\",\n  banner_persons.\"pr_nation_code\",\n  banner_persons.\"pr_nation_desc\",\n  banner_persons.\"last_name\",\n  -- banner_person_details\n  banner_person_details.\"preferred_first_name\",\n  banner_person_details.\"is_confidential\"\n\n  from banner_persons\n  left join banner_person_details\n    on banner_person_details.internal_banner_id = \n              banner_persons.internal_banner_id\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.mart_entities": {"database": "ods", "schema": "banner", "name": "mart_entities", "resource_type": "model", "package_name": "ods", "path": "mart/mart_entities.sql", "original_file_path": "domains/general/models/mart/mart_entities.sql", "unique_id": "model.ods.mart_entities", "fqn": ["ods", "mart", "mart_entities"], "alias": "mart_entities", "checksum": {"name": "sha256", "checksum": "a28557b96fa2ef05b05482a32527510df30786d1b63b8b02188650f08a22813d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id"}, "group": "general", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Entity", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "organization_or_last_name": {"name": "organization_or_last_name", "description": "Organization or Person last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "legal_first_name": {"name": "legal_first_name", "description": "Person legal first name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "middle_initial": {"name": "middle_initial", "description": "Person middle initial", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_person": {"name": "is_person", "description": "'P' for person, 'C' for organization", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_address": {"name": "uo_email_address", "description": "University of Oregon email address", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "uo_email_type_desc": {"name": "uo_email_type_desc", "description": "University of Oregon email address type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_area": {"name": "ma_phone_area", "description": "Mailing phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_number": {"name": "ma_phone_number", "description": "Mailing phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_ext": {"name": "ma_phone_ext", "description": "Mailing phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_intl_access": {"name": "ma_intl_access", "description": "Mailing international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_phone_type_desc": {"name": "ma_phone_type_desc", "description": "Mailing phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_area": {"name": "pr_phone_area", "description": "Permanent phone area code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_number": {"name": "pr_phone_number", "description": "Permanent phone number", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_ext": {"name": "pr_phone_ext", "description": "Permanent phone extension", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_intl_access": {"name": "pr_intl_access", "description": "Permanent international access", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_phone_type_desc": {"name": "pr_phone_type_desc", "description": "Permanent phone type description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_1": {"name": "ma_address_line_1", "description": "Mailing address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_2": {"name": "ma_address_line_2", "description": "Mailing address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_address_line_3": {"name": "ma_address_line_3", "description": "Mailing address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_city": {"name": "ma_city", "description": "Mailing city", "meta": {}, "data_type": "varchar", "constraints": [], "quote": null, "tags": []}, "ma_state_code": {"name": "ma_state_code", "description": "Mailing state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_state_desc": {"name": "ma_state_desc", "description": "Mailing state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_zip_code": {"name": "ma_zip_code", "description": "Mailing ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_code": {"name": "ma_nation_code", "description": "Mailing nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ma_nation_desc": {"name": "ma_nation_desc", "description": "Mailing nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_1": {"name": "pr_address_line_1", "description": "Permanent address line 1", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_2": {"name": "pr_address_line_2", "description": "Permanent address line 2", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_address_line_3": {"name": "pr_address_line_3", "description": "Permanent address line 3", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_city": {"name": "pr_city", "description": "Permanent city", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_code": {"name": "pr_state_code", "description": "Permanent state", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_state_desc": {"name": "pr_state_desc", "description": "Permanent state description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_zip_code": {"name": "pr_zip_code", "description": "Permanent ZIP code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_code": {"name": "pr_nation_code", "description": "Permanent nation code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "pr_nation_desc": {"name": "pr_nation_desc", "description": "Permanent nation code description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id"}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/general/models/mart/_mart_general__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "group": "general", "meta": {"grain": "internal_banner_id"}, "access": "protected"}, "created_at": 1705823512.238442, "relation_name": "\"ods\".\"banner\".\"mart_entities\"", "raw_code": "with banner_entities as (\n\n  select * from {{ ref('int_banner__entities__filtered_to_active') }}\n\n),\n\nbanner_entity_emails as (\n\n  select * from {{ ref('int_banner__email_addresses__pivoted_to__entities') }}\n\n),\n\nbanner_entity_phones as (\n\n  select * from {{ ref('int_banner__phones__pivoted_to__entities') }}\n\n),\n\nbanner_entity_addresses as (\n\n  select * from {{ ref('int_banner__addresses__pivoted_to__entities') }}\n\n),\n\nfinal as (\n    \n  select \n    \n  -- banner_entities (driver)\n  {{ dbt_utils.star(from=ref('int_banner__entities__filtered_to_active'),\n                    relation_alias='banner_entities',\n                    except=[\"ods_surrogate_key\", \n                            \"updated_at\"]) }},\n  -- banner_entity_emails\n  {{ dbt_utils.star(from=ref('int_banner__email_addresses__pivoted_to__entities'), \n                    relation_alias='banner_entity_emails',\n                    except=[\"ods_surrogate_key\",\n                            \"internal_banner_id\"]) }},\n\n  -- banner_entity_phones\n  {{ dbt_utils.star(from=ref('int_banner__phones__pivoted_to__entities'), \n                    relation_alias='banner_entity_phones',\n                    except=[\"ods_surrogate_key\",\n                            \"internal_banner_id\"]) }},\n\n  -- banner_entity_addresses\n  {{ dbt_utils.star(from=ref('int_banner__addresses__pivoted_to__entities'), \n                    relation_alias='banner_entity_addresses',\n                    except=[\"ods_surrogate_key\",\n                            \"internal_banner_id\"]) }}\n\n\n  from banner_entities\n  left join banner_entity_emails\n    on banner_entities.internal_banner_id = \n       banner_entity_emails.internal_banner_id\n  left join banner_entity_phones\n    on banner_entities.internal_banner_id = \n       banner_entity_phones.internal_banner_id\n  left join banner_entity_addresses\n    on banner_entities.internal_banner_id = \n       banner_entity_addresses.internal_banner_id\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id']) }}           as ods_surrogate_key \nfrom final", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__email_addresses__pivoted_to__entities", "package": null, "version": null}, {"name": "int_banner__phones__pivoted_to__entities", "package": null, "version": null}, {"name": "int_banner__addresses__pivoted_to__entities", "package": null, "version": null}, {"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__email_addresses__pivoted_to__entities", "package": null, "version": null}, {"name": "int_banner__phones__pivoted_to__entities", "package": null, "version": null}, {"name": "int_banner__addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__email_addresses__pivoted_to__entities", "model.ods.int_banner__phones__pivoted_to__entities", "model.ods.int_banner__addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/mart_entities.sql", "compiled": true, "compiled_code": "with banner_entities as (\n\n  select * from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n\n),\n\nbanner_entity_emails as (\n\n  select * from \"ods\".\"banner\".\"int_banner__email_addresses__pivoted_to__entities\"\n\n),\n\nbanner_entity_phones as (\n\n  select * from \"ods\".\"banner\".\"int_banner__phones__pivoted_to__entities\"\n\n),\n\nbanner_entity_addresses as (\n\n  select * from \"ods\".\"banner\".\"int_banner__addresses__pivoted_to__entities\"\n\n),\n\nfinal as (\n    \n  select \n    \n  -- banner_entities (driver)\n  banner_entities.\"internal_banner_id\",\n  banner_entities.\"banner_id\",\n  banner_entities.\"organization_or_last_name\",\n  banner_entities.\"legal_first_name\",\n  banner_entities.\"middle_initial\",\n  banner_entities.\"is_person\",\n  -- banner_entity_emails\n  banner_entity_emails.\"uo_email_address\",\n  banner_entity_emails.\"uo_email_type_desc\",\n\n  -- banner_entity_phones\n  banner_entity_phones.\"ma_phone_area\",\n  banner_entity_phones.\"ma_phone_number\",\n  banner_entity_phones.\"ma_phone_ext\",\n  banner_entity_phones.\"ma_intl_access\",\n  banner_entity_phones.\"ma_phone_type_desc\",\n  banner_entity_phones.\"pr_phone_area\",\n  banner_entity_phones.\"pr_phone_number\",\n  banner_entity_phones.\"pr_phone_ext\",\n  banner_entity_phones.\"pr_intl_access\",\n  banner_entity_phones.\"pr_phone_type_desc\",\n\n  -- banner_entity_addresses\n  banner_entity_addresses.\"ma_address_line_1\",\n  banner_entity_addresses.\"ma_address_line_2\",\n  banner_entity_addresses.\"ma_address_line_3\",\n  banner_entity_addresses.\"ma_city\",\n  banner_entity_addresses.\"ma_state_code\",\n  banner_entity_addresses.\"ma_state_desc\",\n  banner_entity_addresses.\"ma_zip_code\",\n  banner_entity_addresses.\"ma_nation_code\",\n  banner_entity_addresses.\"ma_nation_desc\",\n  banner_entity_addresses.\"pr_address_line_1\",\n  banner_entity_addresses.\"pr_address_line_2\",\n  banner_entity_addresses.\"pr_address_line_3\",\n  banner_entity_addresses.\"pr_city\",\n  banner_entity_addresses.\"pr_state_code\",\n  banner_entity_addresses.\"pr_state_desc\",\n  banner_entity_addresses.\"pr_zip_code\",\n  banner_entity_addresses.\"pr_nation_code\",\n  banner_entity_addresses.\"pr_nation_desc\"\n\n\n  from banner_entities\n  left join banner_entity_emails\n    on banner_entities.internal_banner_id = \n       banner_entity_emails.internal_banner_id\n  left join banner_entity_phones\n    on banner_entities.internal_banner_id = \n       banner_entity_phones.internal_banner_id\n  left join banner_entity_addresses\n    on banner_entities.internal_banner_id = \n       banner_entity_addresses.internal_banner_id\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sorlfos": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sorlfos", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sorlfos.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sorlfos.sql", "unique_id": "model.ods.stg_banner__saturn__sorlfos", "fqn": ["ods", "staging", "stg_banner__saturn__sorlfos"], "alias": "stg_banner__saturn__sorlfos", "checksum": {"name": "sha256", "checksum": "ce88c1ef37de4fd50be36d7cb0b2a8001f54fc2cd63888f804c6582e2f1b6cd0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.87835, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sorlfos\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sorlfos') }}\n\n),\n\nrenamed as (\n\n    select\n        sorlfos_pidm,\n        sorlfos_lcur_seqno,\n        sorlfos_seqno,\n        sorlfos_lfst_code,\n        sorlfos_term_code,\n        sorlfos_priority_no,\n        sorlfos_csts_code,\n        sorlfos_cact_code,\n        sorlfos_data_origin,\n        sorlfos_user_id,\n        sorlfos_activity_date,\n        sorlfos_majr_code,\n        sorlfos_term_code_ctlg,\n        sorlfos_term_code_end,\n        sorlfos_dept_code,\n        sorlfos_majr_code_attach,\n        sorlfos_lfos_rule,\n        sorlfos_conc_attach_rule,\n        sorlfos_start_date,\n        sorlfos_end_date,\n        sorlfos_tmst_code,\n        sorlfos_rolled_seqno,\n        sorlfos_user_id_update,\n        sorlfos_activity_date_update,\n        sorlfos_current_cde,\n        sorlfos_surrogate_id,\n        sorlfos_version,\n        sorlfos_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sorlfos"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sorlfos"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sorlfos.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sorlfos\"\n\n),\n\nrenamed as (\n\n    select\n        sorlfos_pidm,\n        sorlfos_lcur_seqno,\n        sorlfos_seqno,\n        sorlfos_lfst_code,\n        sorlfos_term_code,\n        sorlfos_priority_no,\n        sorlfos_csts_code,\n        sorlfos_cact_code,\n        sorlfos_data_origin,\n        sorlfos_user_id,\n        sorlfos_activity_date,\n        sorlfos_majr_code,\n        sorlfos_term_code_ctlg,\n        sorlfos_term_code_end,\n        sorlfos_dept_code,\n        sorlfos_majr_code_attach,\n        sorlfos_lfos_rule,\n        sorlfos_conc_attach_rule,\n        sorlfos_start_date,\n        sorlfos_end_date,\n        sorlfos_tmst_code,\n        sorlfos_rolled_seqno,\n        sorlfos_user_id_update,\n        sorlfos_activity_date_update,\n        sorlfos_current_cde,\n        sorlfos_surrogate_id,\n        sorlfos_version,\n        sorlfos_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvcoll": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvcoll", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvcoll.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvcoll.sql", "unique_id": "model.ods.stg_banner__saturn__stvcoll", "fqn": ["ods", "staging", "stg_banner__saturn__stvcoll"], "alias": "stg_banner__saturn__stvcoll", "checksum": {"name": "sha256", "checksum": "586fff4ac64e8e392dec6b1e00e2202ef0e447b38ba83f58b8bfd0bee4dcc00b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.879298, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvcoll\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvcoll') }}\n\n),\n\nrenamed as (\n\n    select\n        stvcoll_code,\n        stvcoll_desc,\n        stvcoll_addr_street_line1,\n        stvcoll_addr_street_line2,\n        stvcoll_addr_street_line3,\n        stvcoll_addr_city,\n        stvcoll_addr_state,\n        stvcoll_addr_country,\n        stvcoll_addr_zip_code,\n        stvcoll_activity_date,\n        stvcoll_system_req_ind,\n        stvcoll_vr_msg_no,\n        stvcoll_statscan_cde3,\n        stvcoll_dicd_code,\n        stvcoll_house_number,\n        stvcoll_addr_street_line4,\n        stvcoll_surrogate_id,\n        stvcoll_version,\n        stvcoll_user_id,\n        stvcoll_data_origin,\n        stvcoll_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvcoll"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvcoll"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvcoll.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvcoll\"\n\n),\n\nrenamed as (\n\n    select\n        stvcoll_code,\n        stvcoll_desc,\n        stvcoll_addr_street_line1,\n        stvcoll_addr_street_line2,\n        stvcoll_addr_street_line3,\n        stvcoll_addr_city,\n        stvcoll_addr_state,\n        stvcoll_addr_country,\n        stvcoll_addr_zip_code,\n        stvcoll_activity_date,\n        stvcoll_system_req_ind,\n        stvcoll_vr_msg_no,\n        stvcoll_statscan_cde3,\n        stvcoll_dicd_code,\n        stvcoll_house_number,\n        stvcoll_addr_street_line4,\n        stvcoll_surrogate_id,\n        stvcoll_version,\n        stvcoll_user_id,\n        stvcoll_data_origin,\n        stvcoll_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvterm": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvterm", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvterm.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvterm.sql", "unique_id": "model.ods.stg_banner__saturn__stvterm", "fqn": ["ods", "staging", "stg_banner__saturn__stvterm"], "alias": "stg_banner__saturn__stvterm", "checksum": {"name": "sha256", "checksum": "328666e2282d52858ee37f833e6b2444fcb7a3ce5e8d199c93784265e0a8820e"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.8802402, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvterm\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvterm') }}\n\n),\n\nrenamed as (\n\n    select\n        stvterm_code,\n        stvterm_desc,\n        stvterm_start_date,\n        stvterm_end_date,\n        stvterm_fa_proc_yr,\n        stvterm_activity_date,\n        stvterm_fa_term,\n        stvterm_fa_period,\n        stvterm_fa_end_period,\n        stvterm_acyr_code,\n        stvterm_housing_start_date,\n        stvterm_housing_end_date,\n        stvterm_short_desc,\n        stvterm_system_req_ind,\n        stvterm_trmt_code,\n        stvterm_fa_summer_ind,\n        stvterm_surrogate_id,\n        stvterm_version,\n        stvterm_user_id,\n        stvterm_data_origin,\n        stvterm_vpdi_code,\n        stvterm_apport_cde,\n        stvterm_mis_term_ctg,\n        stvterm_mis_term_id,\n        stvterm_term_len_mult,\n        stvterm_term_len_mult_is\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvterm"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvterm"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvterm.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvterm\"\n\n),\n\nrenamed as (\n\n    select\n        stvterm_code,\n        stvterm_desc,\n        stvterm_start_date,\n        stvterm_end_date,\n        stvterm_fa_proc_yr,\n        stvterm_activity_date,\n        stvterm_fa_term,\n        stvterm_fa_period,\n        stvterm_fa_end_period,\n        stvterm_acyr_code,\n        stvterm_housing_start_date,\n        stvterm_housing_end_date,\n        stvterm_short_desc,\n        stvterm_system_req_ind,\n        stvterm_trmt_code,\n        stvterm_fa_summer_ind,\n        stvterm_surrogate_id,\n        stvterm_version,\n        stvterm_user_id,\n        stvterm_data_origin,\n        stvterm_vpdi_code,\n        stvterm_apport_cde,\n        stvterm_mis_term_ctg,\n        stvterm_mis_term_id,\n        stvterm_term_len_mult,\n        stvterm_term_len_mult_is\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__shrtgpa": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__shrtgpa", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__shrtgpa.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__shrtgpa.sql", "unique_id": "model.ods.stg_banner__saturn__shrtgpa", "fqn": ["ods", "staging", "stg_banner__saturn__shrtgpa"], "alias": "stg_banner__saturn__shrtgpa", "checksum": {"name": "sha256", "checksum": "bbba3b5379ec140a8aa325b8b836f1d2e640502c2c911839dfed895468a9b4e7"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.881361, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__shrtgpa\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'shrtgpa') }}\n\n),\n\nrenamed as (\n\n    select\n        shrtgpa_pidm,\n        shrtgpa_term_code,\n        shrtgpa_levl_code,\n        shrtgpa_gpa_type_ind,\n        shrtgpa_trit_seq_no,\n        shrtgpa_tram_seq_no,\n        shrtgpa_hours_attempted,\n        shrtgpa_hours_earned,\n        shrtgpa_gpa_hours,\n        shrtgpa_quality_points,\n        shrtgpa_gpa,\n        shrtgpa_activity_date,\n        shrtgpa_hours_passed,\n        shrtgpa_surrogate_id,\n        shrtgpa_version,\n        shrtgpa_user_id,\n        shrtgpa_data_origin,\n        shrtgpa_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "shrtgpa"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.shrtgpa"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__shrtgpa.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"shrtgpa\"\n\n),\n\nrenamed as (\n\n    select\n        shrtgpa_pidm,\n        shrtgpa_term_code,\n        shrtgpa_levl_code,\n        shrtgpa_gpa_type_ind,\n        shrtgpa_trit_seq_no,\n        shrtgpa_tram_seq_no,\n        shrtgpa_hours_attempted,\n        shrtgpa_hours_earned,\n        shrtgpa_gpa_hours,\n        shrtgpa_quality_points,\n        shrtgpa_gpa,\n        shrtgpa_activity_date,\n        shrtgpa_hours_passed,\n        shrtgpa_surrogate_id,\n        shrtgpa_version,\n        shrtgpa_user_id,\n        shrtgpa_data_origin,\n        shrtgpa_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvrsts": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvrsts", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvrsts.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvrsts.sql", "unique_id": "model.ods.stg_banner__saturn__stvrsts", "fqn": ["ods", "staging", "stg_banner__saturn__stvrsts"], "alias": "stg_banner__saturn__stvrsts", "checksum": {"name": "sha256", "checksum": "3528f7beb3deff65770f64f546a7ff97258bb3aa1a6c2b8facc911831b37a030"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.882289, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvrsts\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvrsts') }}\n\n),\n\nrenamed as (\n\n    select\n        stvrsts_code,\n        stvrsts_desc,\n        stvrsts_enterable_ind,\n        stvrsts_incl_sect_enrl,\n        stvrsts_incl_assess,\n        stvrsts_auto_grade,\n        stvrsts_gradable_ind,\n        stvrsts_activity_date,\n        stvrsts_wait_ind,\n        stvrsts_system_req_ind,\n        stvrsts_incl_vrfy,\n        stvrsts_voice_type,\n        stvrsts_sb_print_ind,\n        stvrsts_withdraw_ind,\n        stvrsts_web_ind,\n        stvrsts_extension_ind,\n        stvrsts_attempt_hr_ind,\n        stvrsts_incl_tmst_ind,\n        stvrsts_action_desc,\n        stvrsts_surrogate_id,\n        stvrsts_version,\n        stvrsts_user_id,\n        stvrsts_data_origin,\n        stvrsts_vpdi_code,\n        stvrsts_apport_ind,\n        stvrsts_audit_ind,\n        stvrsts_mis_bogw_ind\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvrsts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvrsts"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvrsts.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvrsts\"\n\n),\n\nrenamed as (\n\n    select\n        stvrsts_code,\n        stvrsts_desc,\n        stvrsts_enterable_ind,\n        stvrsts_incl_sect_enrl,\n        stvrsts_incl_assess,\n        stvrsts_auto_grade,\n        stvrsts_gradable_ind,\n        stvrsts_activity_date,\n        stvrsts_wait_ind,\n        stvrsts_system_req_ind,\n        stvrsts_incl_vrfy,\n        stvrsts_voice_type,\n        stvrsts_sb_print_ind,\n        stvrsts_withdraw_ind,\n        stvrsts_web_ind,\n        stvrsts_extension_ind,\n        stvrsts_attempt_hr_ind,\n        stvrsts_incl_tmst_ind,\n        stvrsts_action_desc,\n        stvrsts_surrogate_id,\n        stvrsts_version,\n        stvrsts_user_id,\n        stvrsts_data_origin,\n        stvrsts_vpdi_code,\n        stvrsts_apport_ind,\n        stvrsts_audit_ind,\n        stvrsts_mis_bogw_ind\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sgrchrt": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sgrchrt", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sgrchrt.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sgrchrt.sql", "unique_id": "model.ods.stg_banner__saturn__sgrchrt", "fqn": ["ods", "staging", "stg_banner__saturn__sgrchrt"], "alias": "stg_banner__saturn__sgrchrt", "checksum": {"name": "sha256", "checksum": "a269af00421e33db180bf89685b4f886571f5b60b7878add0db8b0b19a29f6f3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.883174, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sgrchrt\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sgrchrt') }}\n\n),\n\nrenamed as (\n\n    select\n        sgrchrt_pidm,\n        sgrchrt_term_code_eff,\n        sgrchrt_chrt_code,\n        sgrchrt_active_ind,\n        sgrchrt_crea_code,\n        sgrchrt_activity_date,\n        sgrchrt_stsp_key_sequence,\n        sgrchrt_surrogate_id,\n        sgrchrt_version,\n        sgrchrt_user_id,\n        sgrchrt_data_origin,\n        sgrchrt_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sgrchrt"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sgrchrt"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sgrchrt.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sgrchrt\"\n\n),\n\nrenamed as (\n\n    select\n        sgrchrt_pidm,\n        sgrchrt_term_code_eff,\n        sgrchrt_chrt_code,\n        sgrchrt_active_ind,\n        sgrchrt_crea_code,\n        sgrchrt_activity_date,\n        sgrchrt_stsp_key_sequence,\n        sgrchrt_surrogate_id,\n        sgrchrt_version,\n        sgrchrt_user_id,\n        sgrchrt_data_origin,\n        sgrchrt_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__shrlgpa": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__shrlgpa", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__shrlgpa.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__shrlgpa.sql", "unique_id": "model.ods.stg_banner__saturn__shrlgpa", "fqn": ["ods", "staging", "stg_banner__saturn__shrlgpa"], "alias": "stg_banner__saturn__shrlgpa", "checksum": {"name": "sha256", "checksum": "8498944a0878b661f7487ef93853e3494de4c78e9268912ae8481916f14376b0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.8840508, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__shrlgpa\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'shrlgpa') }}\n\n),\n\nrenamed as (\n\n    select\n        shrlgpa_pidm,\n        shrlgpa_levl_code,\n        shrlgpa_gpa_type_ind,\n        shrlgpa_hours_attempted,\n        shrlgpa_hours_earned,\n        shrlgpa_gpa_hours,\n        shrlgpa_quality_points,\n        shrlgpa_gpa,\n        shrlgpa_activity_date,\n        shrlgpa_hours_passed,\n        shrlgpa_gpa_calc,\n        shrlgpa_surrogate_id,\n        shrlgpa_version,\n        shrlgpa_user_id,\n        shrlgpa_data_origin,\n        shrlgpa_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "shrlgpa"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.shrlgpa"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__shrlgpa.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"shrlgpa\"\n\n),\n\nrenamed as (\n\n    select\n        shrlgpa_pidm,\n        shrlgpa_levl_code,\n        shrlgpa_gpa_type_ind,\n        shrlgpa_hours_attempted,\n        shrlgpa_hours_earned,\n        shrlgpa_gpa_hours,\n        shrlgpa_quality_points,\n        shrlgpa_gpa,\n        shrlgpa_activity_date,\n        shrlgpa_hours_passed,\n        shrlgpa_gpa_calc,\n        shrlgpa_surrogate_id,\n        shrlgpa_version,\n        shrlgpa_user_id,\n        shrlgpa_data_origin,\n        shrlgpa_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sgrclsr": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sgrclsr", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sgrclsr.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sgrclsr.sql", "unique_id": "model.ods.stg_banner__saturn__sgrclsr", "fqn": ["ods", "staging", "stg_banner__saturn__sgrclsr"], "alias": "stg_banner__saturn__sgrclsr", "checksum": {"name": "sha256", "checksum": "a1e3107cb5020a320a92ba28f3edb6135f2dfc38e87e3566ee2e204bd9d9d771"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.884983, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sgrclsr\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sgrclsr') }}\n\n),\n\nrenamed as (\n\n    select\n        sgrclsr_levl_code,\n        sgrclsr_clas_code,\n        sgrclsr_from_hours,\n        sgrclsr_to_hours,\n        sgrclsr_activity_date,\n        sgrclsr_seq_no,\n        sgrclsr_surrogate_id,\n        sgrclsr_version,\n        sgrclsr_user_id,\n        sgrclsr_data_origin,\n        sgrclsr_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sgrclsr"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sgrclsr"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sgrclsr.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sgrclsr\"\n\n),\n\nrenamed as (\n\n    select\n        sgrclsr_levl_code,\n        sgrclsr_clas_code,\n        sgrclsr_from_hours,\n        sgrclsr_to_hours,\n        sgrclsr_activity_date,\n        sgrclsr_seq_no,\n        sgrclsr_surrogate_id,\n        sgrclsr_version,\n        sgrclsr_user_id,\n        sgrclsr_data_origin,\n        sgrclsr_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvmajr": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvmajr", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvmajr.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvmajr.sql", "unique_id": "model.ods.stg_banner__saturn__stvmajr", "fqn": ["ods", "staging", "stg_banner__saturn__stvmajr"], "alias": "stg_banner__saturn__stvmajr", "checksum": {"name": "sha256", "checksum": "d5133e0155dd09a0f4334484d6aa72a896a35280af03dc2ccc48b321802abae0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "registrar", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner major type", "columns": {"major_code": {"name": "major_code", "description": "Major code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_desc": {"name": "major_desc", "description": "Major description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dept_code": {"name": "dept_code", "description": "Department code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_major": {"name": "is_major", "description": "Major indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "is_minor": {"name": "is_minor", "description": "Minor indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/registrar/models/staging/_banner__registrar__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "registrar", "access": "private"}, "created_at": 1705823511.963876, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvmajr\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvmajr') }}\n\n),\n\nrenamed as (\n\n    select\n        stvmajr_code                           as major_code,\n        stvmajr_desc                           as major_desc,\n        stvmajr_dept_code                      as dept_code,\n        coalesce(stvmajr_valid_major_ind, 'N') as is_major,\n        coalesce(stvmajr_valid_minor_ind, 'N') as is_minor\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvmajr_cipc_code,\n        stvmajr_valid_concentratn_ind,\n        stvmajr_activity_date,\n        stvmajr_occupation_ind,\n        stvmajr_disc_prg,\n        stvmajr_aid_eligibility_ind,\n        stvmajr_system_req_ind,\n        stvmajr_vr_msg_no,\n        stvmajr_disp_web_ind,\n        stvmajr_program,\n        stvmajr_sevis_equiv,\n        stvmajr_surrogate_id,\n        stvmajr_version,\n        stvmajr_user_id,\n        stvmajr_data_origin,\n        stvmajr_vpdi_code,\n        stvmajr_tops_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvmajr"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvmajr"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvmajr.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvmajr\"\n\n),\n\nrenamed as (\n\n    select\n        stvmajr_code                           as major_code,\n        stvmajr_desc                           as major_desc,\n        stvmajr_dept_code                      as dept_code,\n        coalesce(stvmajr_valid_major_ind, 'N') as is_major,\n        coalesce(stvmajr_valid_minor_ind, 'N') as is_minor\n\n    from source\n\n)\n\nselect * from renamed\n-- Unused Fields --\n        /*\n        stvmajr_cipc_code,\n        stvmajr_valid_concentratn_ind,\n        stvmajr_activity_date,\n        stvmajr_occupation_ind,\n        stvmajr_disc_prg,\n        stvmajr_aid_eligibility_ind,\n        stvmajr_system_req_ind,\n        stvmajr_vr_msg_no,\n        stvmajr_disp_web_ind,\n        stvmajr_program,\n        stvmajr_sevis_equiv,\n        stvmajr_surrogate_id,\n        stvmajr_version,\n        stvmajr_user_id,\n        stvmajr_data_origin,\n        stvmajr_vpdi_code,\n        stvmajr_tops_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvdept": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvdept", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvdept.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvdept.sql", "unique_id": "model.ods.stg_banner__saturn__stvdept", "fqn": ["ods", "staging", "stg_banner__saturn__stvdept"], "alias": "stg_banner__saturn__stvdept", "checksum": {"name": "sha256", "checksum": "cae67a4423636641d2d3f56a6c5105d53f345fefc362ae52789e54f9e3dd1cef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.887012, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvdept\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvdept') }}\n\n),\n\nrenamed as (\n\n    select\n        stvdept_code,\n        stvdept_desc,\n        stvdept_activity_date,\n        stvdept_coll_code,\n        stvdept_system_req_ind,\n        stvdept_classlist,\n        stvdept_roster_by_disc,\n        stvdept_vr_msg_no,\n        stvdept_stu_schd_print_flag,\n        stvdept_grade_mail_ind,\n        stvdept_surrogate_id,\n        stvdept_version,\n        stvdept_user_id,\n        stvdept_data_origin,\n        stvdept_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvdept"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvdept"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvdept.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvdept\"\n\n),\n\nrenamed as (\n\n    select\n        stvdept_code,\n        stvdept_desc,\n        stvdept_activity_date,\n        stvdept_coll_code,\n        stvdept_system_req_ind,\n        stvdept_classlist,\n        stvdept_roster_by_disc,\n        stvdept_vr_msg_no,\n        stvdept_stu_schd_print_flag,\n        stvdept_grade_mail_ind,\n        stvdept_surrogate_id,\n        stvdept_version,\n        stvdept_user_id,\n        stvdept_data_origin,\n        stvdept_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sfbetrm": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sfbetrm", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sfbetrm.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sfbetrm.sql", "unique_id": "model.ods.stg_banner__saturn__sfbetrm", "fqn": ["ods", "staging", "stg_banner__saturn__sfbetrm"], "alias": "stg_banner__saturn__sfbetrm", "checksum": {"name": "sha256", "checksum": "1de143c1a6c2d18c78060e35debd54748441459fc23befb8b9ddf5d3ed4542d3"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.887944, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sfbetrm\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sfbetrm') }}\n\n),\n\nrenamed as (\n\n    select\n        sfbetrm_term_code,\n        sfbetrm_pidm,\n        sfbetrm_ests_code,\n        sfbetrm_ests_date,\n        sfbetrm_mhrs_over,\n        sfbetrm_ar_ind,\n        sfbetrm_assessment_date,\n        sfbetrm_add_date,\n        sfbetrm_activity_date,\n        sfbetrm_rgre_code,\n        sfbetrm_mhrs_over_pre,\n        sfbetrm_tmst_code,\n        sfbetrm_tmst_date,\n        sfbetrm_tmst_maint_ind,\n        sfbetrm_user,\n        sfbetrm_refund_date,\n        sfbetrm_initial_reg_date,\n        sfbetrm_data_origin,\n        sfbetrm_min_hrs,\n        sfbetrm_minh_srce_cde,\n        sfbetrm_maxh_srce_cde,\n        sfbetrm_surrogate_id,\n        sfbetrm_version,\n        sfbetrm_user_id,\n        sfbetrm_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sfbetrm"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sfbetrm"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sfbetrm.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sfbetrm\"\n\n),\n\nrenamed as (\n\n    select\n        sfbetrm_term_code,\n        sfbetrm_pidm,\n        sfbetrm_ests_code,\n        sfbetrm_ests_date,\n        sfbetrm_mhrs_over,\n        sfbetrm_ar_ind,\n        sfbetrm_assessment_date,\n        sfbetrm_add_date,\n        sfbetrm_activity_date,\n        sfbetrm_rgre_code,\n        sfbetrm_mhrs_over_pre,\n        sfbetrm_tmst_code,\n        sfbetrm_tmst_date,\n        sfbetrm_tmst_maint_ind,\n        sfbetrm_user,\n        sfbetrm_refund_date,\n        sfbetrm_initial_reg_date,\n        sfbetrm_data_origin,\n        sfbetrm_min_hrs,\n        sfbetrm_minh_srce_cde,\n        sfbetrm_maxh_srce_cde,\n        sfbetrm_surrogate_id,\n        sfbetrm_version,\n        sfbetrm_user_id,\n        sfbetrm_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvastd": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvastd", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvastd.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvastd.sql", "unique_id": "model.ods.stg_banner__saturn__stvastd", "fqn": ["ods", "staging", "stg_banner__saturn__stvastd"], "alias": "stg_banner__saturn__stvastd", "checksum": {"name": "sha256", "checksum": "619a2eba35fc82fb322c6969d6fa74c65256764114f7ef355dee87b3489e7eef"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.88885, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvastd\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvastd') }}\n\n),\n\nrenamed as (\n\n    select\n        stvastd_code,\n        stvastd_desc,\n        stvastd_probation_ind,\n        stvastd_prevent_reg_ind,\n        stvastd_max_reg_hours,\n        stvastd_activity_date,\n        stvastd_deans_list_ind,\n        stvastd_system_req_ind,\n        stvastd_short_desc,\n        stvastd_edi_equiv,\n        stvastd_vr_msg_no,\n        stvastd_min_reg_hours,\n        stvastd_surrogate_id,\n        stvastd_version,\n        stvastd_user_id,\n        stvastd_data_origin,\n        stvastd_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvastd"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvastd"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvastd.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvastd\"\n\n),\n\nrenamed as (\n\n    select\n        stvastd_code,\n        stvastd_desc,\n        stvastd_probation_ind,\n        stvastd_prevent_reg_ind,\n        stvastd_max_reg_hours,\n        stvastd_activity_date,\n        stvastd_deans_list_ind,\n        stvastd_system_req_ind,\n        stvastd_short_desc,\n        stvastd_edi_equiv,\n        stvastd_vr_msg_no,\n        stvastd_min_reg_hours,\n        stvastd_surrogate_id,\n        stvastd_version,\n        stvastd_user_id,\n        stvastd_data_origin,\n        stvastd_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvclas": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvclas", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvclas.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvclas.sql", "unique_id": "model.ods.stg_banner__saturn__stvclas", "fqn": ["ods", "staging", "stg_banner__saturn__stvclas"], "alias": "stg_banner__saturn__stvclas", "checksum": {"name": "sha256", "checksum": "4bc7bd20e6ef9ea814659e6e79ac70678495b47c927f18df4339dc720da787a9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.889704, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvclas\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvclas') }}\n\n),\n\nrenamed as (\n\n    select\n        stvclas_code,\n        stvclas_desc,\n        stvclas_activity_date,\n        stvclas_edi_equiv,\n        stvclas_lms_equiv,\n        stvclas_nsc_class_cde,\n        stvclas_surrogate_id,\n        stvclas_version,\n        stvclas_user_id,\n        stvclas_data_origin,\n        stvclas_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvclas"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvclas"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvclas.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvclas\"\n\n),\n\nrenamed as (\n\n    select\n        stvclas_code,\n        stvclas_desc,\n        stvclas_activity_date,\n        stvclas_edi_equiv,\n        stvclas_lms_equiv,\n        stvclas_nsc_class_cde,\n        stvclas_surrogate_id,\n        stvclas_version,\n        stvclas_user_id,\n        stvclas_data_origin,\n        stvclas_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sorlcur": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sorlcur", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sorlcur.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sorlcur.sql", "unique_id": "model.ods.stg_banner__saturn__sorlcur", "fqn": ["ods", "staging", "stg_banner__saturn__sorlcur"], "alias": "stg_banner__saturn__sorlcur", "checksum": {"name": "sha256", "checksum": "32431ad27256c0fbf3232444ea477fe1e4aa8b1f4bcf86f0a7ab56b352901647"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.890777, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sorlcur\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sorlcur') }}\n\n),\n\nrenamed as (\n\n    select\n        sorlcur_pidm,\n        sorlcur_seqno,\n        sorlcur_lmod_code,\n        sorlcur_term_code,\n        sorlcur_key_seqno,\n        sorlcur_priority_no,\n        sorlcur_roll_ind,\n        sorlcur_cact_code,\n        sorlcur_user_id,\n        sorlcur_data_origin,\n        sorlcur_activity_date,\n        sorlcur_levl_code,\n        sorlcur_coll_code,\n        sorlcur_degc_code,\n        sorlcur_term_code_ctlg,\n        sorlcur_term_code_end,\n        sorlcur_term_code_matric,\n        sorlcur_term_code_admit,\n        sorlcur_admt_code,\n        sorlcur_camp_code,\n        sorlcur_program,\n        sorlcur_start_date,\n        sorlcur_end_date,\n        sorlcur_curr_rule,\n        sorlcur_rolled_seqno,\n        sorlcur_styp_code,\n        sorlcur_rate_code,\n        sorlcur_leav_code,\n        sorlcur_leav_from_date,\n        sorlcur_leav_to_date,\n        sorlcur_exp_grad_date,\n        sorlcur_term_code_grad,\n        sorlcur_acyr_code,\n        sorlcur_site_code,\n        sorlcur_appl_seqno,\n        sorlcur_appl_key_seqno,\n        sorlcur_user_id_update,\n        sorlcur_activity_date_update,\n        sorlcur_gapp_seqno,\n        sorlcur_current_cde,\n        sorlcur_surrogate_id,\n        sorlcur_version,\n        sorlcur_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sorlcur"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sorlcur"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sorlcur.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sorlcur\"\n\n),\n\nrenamed as (\n\n    select\n        sorlcur_pidm,\n        sorlcur_seqno,\n        sorlcur_lmod_code,\n        sorlcur_term_code,\n        sorlcur_key_seqno,\n        sorlcur_priority_no,\n        sorlcur_roll_ind,\n        sorlcur_cact_code,\n        sorlcur_user_id,\n        sorlcur_data_origin,\n        sorlcur_activity_date,\n        sorlcur_levl_code,\n        sorlcur_coll_code,\n        sorlcur_degc_code,\n        sorlcur_term_code_ctlg,\n        sorlcur_term_code_end,\n        sorlcur_term_code_matric,\n        sorlcur_term_code_admit,\n        sorlcur_admt_code,\n        sorlcur_camp_code,\n        sorlcur_program,\n        sorlcur_start_date,\n        sorlcur_end_date,\n        sorlcur_curr_rule,\n        sorlcur_rolled_seqno,\n        sorlcur_styp_code,\n        sorlcur_rate_code,\n        sorlcur_leav_code,\n        sorlcur_leav_from_date,\n        sorlcur_leav_to_date,\n        sorlcur_exp_grad_date,\n        sorlcur_term_code_grad,\n        sorlcur_acyr_code,\n        sorlcur_site_code,\n        sorlcur_appl_seqno,\n        sorlcur_appl_key_seqno,\n        sorlcur_user_id_update,\n        sorlcur_activity_date_update,\n        sorlcur_gapp_seqno,\n        sorlcur_current_cde,\n        sorlcur_surrogate_id,\n        sorlcur_version,\n        sorlcur_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvstyp": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvstyp", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvstyp.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvstyp.sql", "unique_id": "model.ods.stg_banner__saturn__stvstyp", "fqn": ["ods", "staging", "stg_banner__saturn__stvstyp"], "alias": "stg_banner__saturn__stvstyp", "checksum": {"name": "sha256", "checksum": "f6376b5e830f366769ee9eb211ceb246091ae601779069ee29b255bbbd4e849d"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.891702, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvstyp\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvstyp') }}\n\n),\n\nrenamed as (\n\n    select\n        stvstyp_code,\n        stvstyp_desc,\n        stvstyp_next_status,\n        stvstyp_activity_date,\n        stvstyp_short_desc,\n        stvstyp_reg_desc,\n        stvstyp_system_req_ind,\n        stvstyp_surrogate_id,\n        stvstyp_version,\n        stvstyp_user_id,\n        stvstyp_data_origin,\n        stvstyp_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvstyp"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvstyp"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvstyp.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvstyp\"\n\n),\n\nrenamed as (\n\n    select\n        stvstyp_code,\n        stvstyp_desc,\n        stvstyp_next_status,\n        stvstyp_activity_date,\n        stvstyp_short_desc,\n        stvstyp_reg_desc,\n        stvstyp_system_req_ind,\n        stvstyp_surrogate_id,\n        stvstyp_version,\n        stvstyp_user_id,\n        stvstyp_data_origin,\n        stvstyp_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sgbstdn": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sgbstdn", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sgbstdn.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sgbstdn.sql", "unique_id": "model.ods.stg_banner__saturn__sgbstdn", "fqn": ["ods", "staging", "stg_banner__saturn__sgbstdn"], "alias": "stg_banner__saturn__sgbstdn", "checksum": {"name": "sha256", "checksum": "5505adb96ca2223f242f77bb1df02c6c1ee17b7100dc9bfa5441e9c2ff7a522b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": "registrar", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner general student record", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_code": {"name": "term_code", "description": "Term code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "level_code": {"name": "level_code", "description": "Level code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_term": {"name": "admit_term", "description": "Admit term", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "honors_college_ind": {"name": "honors_college_ind", "description": "Honors College indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_1_code": {"name": "major_1_code", "description": "Major 1 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_2_code": {"name": "major_2_code", "description": "Major 2 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_3_code": {"name": "major_3_code", "description": "Major 3 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_4_code": {"name": "major_4_code", "description": "Major 4 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_1_code": {"name": "minor_1_code", "description": "Minor 1 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_2_code": {"name": "minor_2_code", "description": "Minor 2 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_3_code": {"name": "minor_3_code", "description": "Minor 3 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_4_code": {"name": "minor_4_code", "description": "Minor 4 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/registrar/models/staging/_banner__registrar__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "registrar", "access": "private"}, "created_at": 1705823511.966689, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sgbstdn\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sgbstdn') }}\n\n),\n\nrenamed as (\n\n    select\n        sgbstdn_pidm                                                                    as internal_banner_id,\n        sgbstdn_term_code_eff                                                           as term_code,\n        sgbstdn_levl_code                                                               as level_code,\n        sgbstdn_term_code_admit                                                         as admit_term,\n        case when 'HC' in (sgbstdn_majr_code_minr_2_2, \n                           sgbstdn_majr_code_minr_2,\n                           sgbstdn_majr_code_minr_1_2, \n                           sgbstdn_majr_code_minr_1) \n               then 'Y' \n            else 'N'\n        end                                                                             as honors_college_ind,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_1_code,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_2_code,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_3_code,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_4_code,\n        (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 1)  as minor_1_code,                      \n       (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 2)  as minor_2_code,\n       (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 3)  as minor_3_code,\n       (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 4)  as minor_4_code\n                    \n\n    from source\n\n)\n\nselect * from renamed\n\n-- Unused Fields --\n        /*\n        sgbstdn_stst_code,\n        sgbstdn_styp_code,\n        sgbstdn_term_code_matric,\n        sgbstdn_exp_grad_date,\n        sgbstdn_camp_code,\n        sgbstdn_full_part_ind,\n        sgbstdn_sess_code,\n        sgbstdn_resd_code,\n        sgbstdn_coll_code_1,\n        sgbstdn_degc_code_1,\n        sgbstdn_majr_code_conc_1,\n        sgbstdn_majr_code_conc_1_2,\n        sgbstdn_majr_code_conc_1_3,\n        sgbstdn_coll_code_2,\n        sgbstdn_degc_code_2,\n        sgbstdn_majr_code_conc_2,\n        sgbstdn_majr_code_conc_2_2,\n        sgbstdn_majr_code_conc_2_3,\n        sgbstdn_orsn_code,\n        sgbstdn_prac_code,\n        sgbstdn_advr_pidm,\n        sgbstdn_grad_credit_appr_ind,\n        sgbstdn_capl_code,\n        sgbstdn_leav_code,\n        sgbstdn_leav_from_date,\n        sgbstdn_leav_to_date,\n        sgbstdn_astd_code,\n        sgbstdn_term_code_astd,\n        sgbstdn_rate_code,\n        sgbstdn_activity_date,\n        sgbstdn_gorg_code,\n        sgbstdn_edlv_code,\n        sgbstdn_incm_code,\n        sgbstdn_admt_code,\n        sgbstdn_emex_code,\n        sgbstdn_aprn_code,\n        sgbstdn_trcn_code,\n        sgbstdn_gain_code,\n        sgbstdn_voed_code,\n        sgbstdn_regp_code,\n        sgbstdn_rfrom_date,\n        sgbstdn_rfrom_time,\n        sgbstdn_ruser,\n        sgbstdn_rcat_code,\n        sgbstdn_regp_act_date,\n        sgbstdn_blck_code,\n        sgbstdn_term_code_grad,\n        sgbstdn_acyr_code,\n        sgbstdn_rstr_code,\n        sgbstdn_dept_code,\n        sgbstdn_site_code,\n        sgbstdn_dept_code_2,\n        sgbstdn_egol_code,\n        sgbstdn_degc_code_dual,\n        sgbstdn_levl_code_dual,\n        sgbstdn_dept_code_dual,\n        sgbstdn_coll_code_dual,\n        sgbstdn_majr_code_dual,\n        sgbstdn_bskl_code,\n        sgbstdn_prim_roll_ind,\n        sgbstdn_program_1,\n        sgbstdn_term_code_ctlg_1,\n        sgbstdn_dept_code_1_2,\n        sgbstdn_majr_code_conc_121,\n        sgbstdn_majr_code_conc_122,\n        sgbstdn_majr_code_conc_123,\n        sgbstdn_secd_roll_ind,\n        sgbstdn_term_code_admit_2,\n        sgbstdn_admt_code_2,\n        sgbstdn_program_2,\n        sgbstdn_term_code_ctlg_2,\n        sgbstdn_levl_code_2,\n        sgbstdn_camp_code_2,\n        sgbstdn_dept_code_2_2,\n        sgbstdn_majr_code_conc_221,\n        sgbstdn_majr_code_conc_222,\n        sgbstdn_majr_code_conc_223,\n        sgbstdn_curr_rule_1,\n        sgbstdn_cmjr_rule_1_1,\n        sgbstdn_ccon_rule_11_1,\n        sgbstdn_ccon_rule_11_2,\n        sgbstdn_ccon_rule_11_3,\n        sgbstdn_cmjr_rule_1_2,\n        sgbstdn_ccon_rule_12_1,\n        sgbstdn_ccon_rule_12_2,\n        sgbstdn_ccon_rule_12_3,\n        sgbstdn_cmnr_rule_1_1,\n        sgbstdn_cmnr_rule_1_2,\n        sgbstdn_curr_rule_2,\n        sgbstdn_cmjr_rule_2_1,\n        sgbstdn_ccon_rule_21_1,\n        sgbstdn_ccon_rule_21_2,\n        sgbstdn_ccon_rule_21_3,\n        sgbstdn_cmjr_rule_2_2,\n        sgbstdn_ccon_rule_22_1,\n        sgbstdn_ccon_rule_22_2,\n        sgbstdn_ccon_rule_22_3,\n        sgbstdn_cmnr_rule_2_1,\n        sgbstdn_cmnr_rule_2_2,\n        sgbstdn_prev_code,\n        sgbstdn_term_code_prev,\n        sgbstdn_cast_code,\n        sgbstdn_term_code_cast,\n        sgbstdn_data_origin,\n        sgbstdn_user_id,\n        sgbstdn_scpc_code,\n        sgbstdn_surrogate_id,\n        sgbstdn_version,\n        sgbstdn_vpdi_code\n        */", "language": "sql", "refs": [], "sources": [["banner__saturn", "sgbstdn"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sgbstdn"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sgbstdn.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sgbstdn\"\n\n),\n\nrenamed as (\n\n    select\n        sgbstdn_pidm                                                                    as internal_banner_id,\n        sgbstdn_term_code_eff                                                           as term_code,\n        sgbstdn_levl_code                                                               as level_code,\n        sgbstdn_term_code_admit                                                         as admit_term,\n        case when 'HC' in (sgbstdn_majr_code_minr_2_2, \n                           sgbstdn_majr_code_minr_2,\n                           sgbstdn_majr_code_minr_1_2, \n                           sgbstdn_majr_code_minr_1) \n               then 'Y' \n            else 'N'\n        end                                                                             as honors_college_ind,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_1_code,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_2_code,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_3_code,\n        (select column_name \n         from (select column_name, row_number() over (order by column_name) rn\n               from (select sgbstdn_majr_code_1   as column_name union\n                     select sgbstdn_majr_code_1_2 as column_name union\n                     select sgbstdn_majr_code_2   as column_name union\n                     select sgbstdn_majr_code_2_2 as column_name) t) where rn = 1)      as major_4_code,\n        (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 1)  as minor_1_code,                      \n       (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 2)  as minor_2_code,\n       (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 3)  as minor_3_code,\n       (select column_name \n        from (select column_name, row_number() over (order by column_name) rn\n              from (select sgbstdn_majr_code_minr_1   as column_name union\n                    select sgbstdn_majr_code_minr_1_2 as column_name union\n                    select sgbstdn_majr_code_minr_2   as column_name union\n                    select sgbstdn_majr_code_minr_2_2 as column_name) t) where rn = 4)  as minor_4_code\n                    \n\n    from source\n\n)\n\nselect * from renamed\n\n-- Unused Fields --\n        /*\n        sgbstdn_stst_code,\n        sgbstdn_styp_code,\n        sgbstdn_term_code_matric,\n        sgbstdn_exp_grad_date,\n        sgbstdn_camp_code,\n        sgbstdn_full_part_ind,\n        sgbstdn_sess_code,\n        sgbstdn_resd_code,\n        sgbstdn_coll_code_1,\n        sgbstdn_degc_code_1,\n        sgbstdn_majr_code_conc_1,\n        sgbstdn_majr_code_conc_1_2,\n        sgbstdn_majr_code_conc_1_3,\n        sgbstdn_coll_code_2,\n        sgbstdn_degc_code_2,\n        sgbstdn_majr_code_conc_2,\n        sgbstdn_majr_code_conc_2_2,\n        sgbstdn_majr_code_conc_2_3,\n        sgbstdn_orsn_code,\n        sgbstdn_prac_code,\n        sgbstdn_advr_pidm,\n        sgbstdn_grad_credit_appr_ind,\n        sgbstdn_capl_code,\n        sgbstdn_leav_code,\n        sgbstdn_leav_from_date,\n        sgbstdn_leav_to_date,\n        sgbstdn_astd_code,\n        sgbstdn_term_code_astd,\n        sgbstdn_rate_code,\n        sgbstdn_activity_date,\n        sgbstdn_gorg_code,\n        sgbstdn_edlv_code,\n        sgbstdn_incm_code,\n        sgbstdn_admt_code,\n        sgbstdn_emex_code,\n        sgbstdn_aprn_code,\n        sgbstdn_trcn_code,\n        sgbstdn_gain_code,\n        sgbstdn_voed_code,\n        sgbstdn_regp_code,\n        sgbstdn_rfrom_date,\n        sgbstdn_rfrom_time,\n        sgbstdn_ruser,\n        sgbstdn_rcat_code,\n        sgbstdn_regp_act_date,\n        sgbstdn_blck_code,\n        sgbstdn_term_code_grad,\n        sgbstdn_acyr_code,\n        sgbstdn_rstr_code,\n        sgbstdn_dept_code,\n        sgbstdn_site_code,\n        sgbstdn_dept_code_2,\n        sgbstdn_egol_code,\n        sgbstdn_degc_code_dual,\n        sgbstdn_levl_code_dual,\n        sgbstdn_dept_code_dual,\n        sgbstdn_coll_code_dual,\n        sgbstdn_majr_code_dual,\n        sgbstdn_bskl_code,\n        sgbstdn_prim_roll_ind,\n        sgbstdn_program_1,\n        sgbstdn_term_code_ctlg_1,\n        sgbstdn_dept_code_1_2,\n        sgbstdn_majr_code_conc_121,\n        sgbstdn_majr_code_conc_122,\n        sgbstdn_majr_code_conc_123,\n        sgbstdn_secd_roll_ind,\n        sgbstdn_term_code_admit_2,\n        sgbstdn_admt_code_2,\n        sgbstdn_program_2,\n        sgbstdn_term_code_ctlg_2,\n        sgbstdn_levl_code_2,\n        sgbstdn_camp_code_2,\n        sgbstdn_dept_code_2_2,\n        sgbstdn_majr_code_conc_221,\n        sgbstdn_majr_code_conc_222,\n        sgbstdn_majr_code_conc_223,\n        sgbstdn_curr_rule_1,\n        sgbstdn_cmjr_rule_1_1,\n        sgbstdn_ccon_rule_11_1,\n        sgbstdn_ccon_rule_11_2,\n        sgbstdn_ccon_rule_11_3,\n        sgbstdn_cmjr_rule_1_2,\n        sgbstdn_ccon_rule_12_1,\n        sgbstdn_ccon_rule_12_2,\n        sgbstdn_ccon_rule_12_3,\n        sgbstdn_cmnr_rule_1_1,\n        sgbstdn_cmnr_rule_1_2,\n        sgbstdn_curr_rule_2,\n        sgbstdn_cmjr_rule_2_1,\n        sgbstdn_ccon_rule_21_1,\n        sgbstdn_ccon_rule_21_2,\n        sgbstdn_ccon_rule_21_3,\n        sgbstdn_cmjr_rule_2_2,\n        sgbstdn_ccon_rule_22_1,\n        sgbstdn_ccon_rule_22_2,\n        sgbstdn_ccon_rule_22_3,\n        sgbstdn_cmnr_rule_2_1,\n        sgbstdn_cmnr_rule_2_2,\n        sgbstdn_prev_code,\n        sgbstdn_term_code_prev,\n        sgbstdn_cast_code,\n        sgbstdn_term_code_cast,\n        sgbstdn_data_origin,\n        sgbstdn_user_id,\n        sgbstdn_scpc_code,\n        sgbstdn_surrogate_id,\n        sgbstdn_version,\n        sgbstdn_vpdi_code\n        */", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__shrttrm": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__shrttrm", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__shrttrm.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__shrttrm.sql", "unique_id": "model.ods.stg_banner__saturn__shrttrm", "fqn": ["ods", "staging", "stg_banner__saturn__shrttrm"], "alias": "stg_banner__saturn__shrttrm", "checksum": {"name": "sha256", "checksum": "20d6d0d36023975343ba956e618a5936afd70c770458c4841aba7a5ec3303549"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.893589, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__shrttrm\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'shrttrm') }}\n\n),\n\nrenamed as (\n\n    select\n        shrttrm_pidm,\n        shrttrm_term_code,\n        shrttrm_update_source_ind,\n        shrttrm_pre_catalog_ind,\n        shrttrm_record_status_ind,\n        shrttrm_record_status_date,\n        shrttrm_grade_mailing_date,\n        shrttrm_grade_mailer_chg_date,\n        shrttrm_grade_mailer_dup,\n        shrttrm_grade_mailer_dup_date,\n        shrttrm_exam_code,\n        shrttrm_code_transcript_dist,\n        shrttrm_astd_code_end_of_term,\n        shrttrm_astd_date_end_of_term,\n        shrttrm_activity_date,\n        shrttrm_astd_code_dl,\n        shrttrm_astd_date_dl,\n        shrttrm_wrsn_code,\n        shrttrm_sbgi_code_trans,\n        shrttrm_prev_code,\n        shrttrm_prev_date,\n        shrttrm_cast_code,\n        shrttrm_cast_date,\n        shrttrm_scps_code,\n        shrttrm_surrogate_id,\n        shrttrm_version,\n        shrttrm_user_id,\n        shrttrm_data_origin,\n        shrttrm_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "shrttrm"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.shrttrm"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__shrttrm.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"shrttrm\"\n\n),\n\nrenamed as (\n\n    select\n        shrttrm_pidm,\n        shrttrm_term_code,\n        shrttrm_update_source_ind,\n        shrttrm_pre_catalog_ind,\n        shrttrm_record_status_ind,\n        shrttrm_record_status_date,\n        shrttrm_grade_mailing_date,\n        shrttrm_grade_mailer_chg_date,\n        shrttrm_grade_mailer_dup,\n        shrttrm_grade_mailer_dup_date,\n        shrttrm_exam_code,\n        shrttrm_code_transcript_dist,\n        shrttrm_astd_code_end_of_term,\n        shrttrm_astd_date_end_of_term,\n        shrttrm_activity_date,\n        shrttrm_astd_code_dl,\n        shrttrm_astd_date_dl,\n        shrttrm_wrsn_code,\n        shrttrm_sbgi_code_trans,\n        shrttrm_prev_code,\n        shrttrm_prev_date,\n        shrttrm_cast_code,\n        shrttrm_cast_date,\n        shrttrm_scps_code,\n        shrttrm_surrogate_id,\n        shrttrm_version,\n        shrttrm_user_id,\n        shrttrm_data_origin,\n        shrttrm_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvlevl": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvlevl", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvlevl.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvlevl.sql", "unique_id": "model.ods.stg_banner__saturn__stvlevl", "fqn": ["ods", "staging", "stg_banner__saturn__stvlevl"], "alias": "stg_banner__saturn__stvlevl", "checksum": {"name": "sha256", "checksum": "dda81806443884edc6fc24fbb9e5237a1f800fdf7974a2f90d4d9958d991e96c"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.8945222, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvlevl\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvlevl') }}\n\n),\n\nrenamed as (\n\n    select\n        stvlevl_code,\n        stvlevl_desc,\n        stvlevl_activity_date,\n        stvlevl_acad_ind,\n        stvlevl_ceu_ind,\n        stvlevl_system_req_ind,\n        stvlevl_vr_msg_no,\n        stvlevl_edi_equiv,\n        stvlevl_surrogate_id,\n        stvlevl_version,\n        stvlevl_user_id,\n        stvlevl_data_origin,\n        stvlevl_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvlevl"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvlevl"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvlevl.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvlevl\"\n\n),\n\nrenamed as (\n\n    select\n        stvlevl_code,\n        stvlevl_desc,\n        stvlevl_activity_date,\n        stvlevl_acad_ind,\n        stvlevl_ceu_ind,\n        stvlevl_system_req_ind,\n        stvlevl_vr_msg_no,\n        stvlevl_edi_equiv,\n        stvlevl_surrogate_id,\n        stvlevl_version,\n        stvlevl_user_id,\n        stvlevl_data_origin,\n        stvlevl_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__shrtrce": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__shrtrce", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__shrtrce.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__shrtrce.sql", "unique_id": "model.ods.stg_banner__saturn__shrtrce", "fqn": ["ods", "staging", "stg_banner__saturn__shrtrce"], "alias": "stg_banner__saturn__shrtrce", "checksum": {"name": "sha256", "checksum": "9bd9eab5f49ecf04ec2896918247f7666199f717127f7d2b02a38adf7a920de0"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.895638, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__shrtrce\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'shrtrce') }}\n\n),\n\nrenamed as (\n\n    select\n        shrtrce_pidm,\n        shrtrce_trit_seq_no,\n        shrtrce_tram_seq_no,\n        shrtrce_seq_no,\n        shrtrce_trcr_seq_no,\n        shrtrce_term_code_eff,\n        shrtrce_levl_code,\n        shrtrce_subj_code,\n        shrtrce_crse_numb,\n        shrtrce_crse_title,\n        shrtrce_credit_hours,\n        shrtrce_grde_code,\n        shrtrce_gmod_code,\n        shrtrce_count_in_gpa_ind,\n        shrtrce_activity_date,\n        shrtrce_scid,\n        shrtrce_repeated,\n        shrtrce_repeat_course,\n        shrtrce_repeat_sys,\n        shrtrce_surrogate_id,\n        shrtrce_version,\n        shrtrce_user_id,\n        shrtrce_data_origin,\n        shrtrce_vpdi_code,\n        shrtrce_stsp_key_sequence,\n        shrtrce_appl_no\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "shrtrce"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.shrtrce"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__shrtrce.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"shrtrce\"\n\n),\n\nrenamed as (\n\n    select\n        shrtrce_pidm,\n        shrtrce_trit_seq_no,\n        shrtrce_tram_seq_no,\n        shrtrce_seq_no,\n        shrtrce_trcr_seq_no,\n        shrtrce_term_code_eff,\n        shrtrce_levl_code,\n        shrtrce_subj_code,\n        shrtrce_crse_numb,\n        shrtrce_crse_title,\n        shrtrce_credit_hours,\n        shrtrce_grde_code,\n        shrtrce_gmod_code,\n        shrtrce_count_in_gpa_ind,\n        shrtrce_activity_date,\n        shrtrce_scid,\n        shrtrce_repeated,\n        shrtrce_repeat_course,\n        shrtrce_repeat_sys,\n        shrtrce_surrogate_id,\n        shrtrce_version,\n        shrtrce_user_id,\n        shrtrce_data_origin,\n        shrtrce_vpdi_code,\n        shrtrce_stsp_key_sequence,\n        shrtrce_appl_no\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvchrt": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvchrt", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvchrt.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvchrt.sql", "unique_id": "model.ods.stg_banner__saturn__stvchrt", "fqn": ["ods", "staging", "stg_banner__saturn__stvchrt"], "alias": "stg_banner__saturn__stvchrt", "checksum": {"name": "sha256", "checksum": "da60c318208156e5e3690d9324a199d2189b99971797f2c6bd8f5bc770d8d817"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.896502, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvchrt\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvchrt') }}\n\n),\n\nrenamed as (\n\n    select\n        stvchrt_code,\n        stvchrt_desc,\n        stvchrt_term_code_start,\n        stvchrt_term_code_end,\n        stvchrt_dlev_code,\n        stvchrt_activity_date,\n        stvchrt_right_ind,\n        stvchrt_surrogate_id,\n        stvchrt_version,\n        stvchrt_user_id,\n        stvchrt_data_origin,\n        stvchrt_vpdi_code,\n        stvchrt_term_code_100prcnt\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvchrt"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvchrt"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvchrt.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvchrt\"\n\n),\n\nrenamed as (\n\n    select\n        stvchrt_code,\n        stvchrt_desc,\n        stvchrt_term_code_start,\n        stvchrt_term_code_end,\n        stvchrt_dlev_code,\n        stvchrt_activity_date,\n        stvchrt_right_ind,\n        stvchrt_surrogate_id,\n        stvchrt_version,\n        stvchrt_user_id,\n        stvchrt_data_origin,\n        stvchrt_vpdi_code,\n        stvchrt_term_code_100prcnt\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sgrsatt": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sgrsatt", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sgrsatt.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sgrsatt.sql", "unique_id": "model.ods.stg_banner__saturn__sgrsatt", "fqn": ["ods", "staging", "stg_banner__saturn__sgrsatt"], "alias": "stg_banner__saturn__sgrsatt", "checksum": {"name": "sha256", "checksum": "6501ef757ff09dc76bf87f45c1df9652cf84cf2ad7dc847724c2dec63a7da0ae"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.897411, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sgrsatt\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sgrsatt') }}\n\n),\n\nrenamed as (\n\n    select\n        sgrsatt_pidm,\n        sgrsatt_term_code_eff,\n        sgrsatt_atts_code,\n        sgrsatt_activity_date,\n        sgrsatt_stsp_key_sequence,\n        sgrsatt_surrogate_id,\n        sgrsatt_version,\n        sgrsatt_user_id,\n        sgrsatt_data_origin,\n        sgrsatt_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sgrsatt"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sgrsatt"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sgrsatt.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sgrsatt\"\n\n),\n\nrenamed as (\n\n    select\n        sgrsatt_pidm,\n        sgrsatt_term_code_eff,\n        sgrsatt_atts_code,\n        sgrsatt_activity_date,\n        sgrsatt_stsp_key_sequence,\n        sgrsatt_surrogate_id,\n        sgrsatt_version,\n        sgrsatt_user_id,\n        sgrsatt_data_origin,\n        sgrsatt_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sfrstcr": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sfrstcr", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sfrstcr.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sfrstcr.sql", "unique_id": "model.ods.stg_banner__saturn__sfrstcr", "fqn": ["ods", "staging", "stg_banner__saturn__sfrstcr"], "alias": "stg_banner__saturn__sfrstcr", "checksum": {"name": "sha256", "checksum": "33ee75265c309c4f43a3a2a15f870fa8cbb59578c9c640e4fbb855de595682dc"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.8983302, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sfrstcr\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sfrstcr') }}\n\n),\n\nrenamed as (\n\n    select\n        sfrstcr_term_code,\n        sfrstcr_pidm,\n        sfrstcr_crn,\n        sfrstcr_class_sort_key,\n        sfrstcr_reg_seq,\n        sfrstcr_ptrm_code,\n        sfrstcr_rsts_code,\n        sfrstcr_rsts_date,\n        sfrstcr_error_flag,\n        sfrstcr_message,\n        sfrstcr_bill_hr,\n        sfrstcr_waiv_hr,\n        sfrstcr_credit_hr,\n        sfrstcr_bill_hr_hold,\n        sfrstcr_credit_hr_hold,\n        sfrstcr_gmod_code,\n        sfrstcr_grde_code,\n        sfrstcr_grde_code_mid,\n        sfrstcr_grde_date,\n        sfrstcr_dupl_over,\n        sfrstcr_link_over,\n        sfrstcr_corq_over,\n        sfrstcr_preq_over,\n        sfrstcr_time_over,\n        sfrstcr_capc_over,\n        sfrstcr_levl_over,\n        sfrstcr_coll_over,\n        sfrstcr_majr_over,\n        sfrstcr_clas_over,\n        sfrstcr_appr_over,\n        sfrstcr_appr_received_ind,\n        sfrstcr_add_date,\n        sfrstcr_activity_date,\n        sfrstcr_levl_code,\n        sfrstcr_camp_code,\n        sfrstcr_reserved_key,\n        sfrstcr_attend_hr,\n        sfrstcr_wait_seqno,\n        sfrstcr_wait_date_perm,\n        sfrstcr_rept_over,\n        sfrstcr_rpth_over,\n        sfrstcr_test_over,\n        sfrstcr_camp_over,\n        sfrstcr_wait_bump_ind,\n        sfrstcr_gmod_over,\n        sfrstcr_cred_over,\n        sfrstcr_bill_over,\n        sfrstcr_minr_over,\n        sfrstcr_user,\n        sfrstcr_degc_over,\n        sfrstcr_prog_over,\n        sfrstcr_last_attend,\n        sfrstcr_gcmt_code,\n        sfrstcr_assess_activity_date,\n        sfrstcr_data_origin,\n        sfrstcr_dept_over,\n        sfrstcr_atts_over,\n        sfrstcr_chrt_over,\n        sfrstcr_rmsg_cde,\n        sfrstcr_wl_priority,\n        sfrstcr_wl_priority_orig,\n        sfrstcr_grde_code_incmp_final,\n        sfrstcr_incomplete_ext_date,\n        sfrstcr_mexc_over,\n        sfrstcr_stsp_key_sequence,\n        sfrstcr_brdh_seq_num,\n        sfrstcr_blck_code,\n        sfrstcr_surrogate_id,\n        sfrstcr_version,\n        sfrstcr_user_id,\n        sfrstcr_vpdi_code,\n        sfrstcr_strh_seqno,\n        sfrstcr_strd_seqno,\n        sfrstcr_sessionid,\n        sfrstcr_current_time\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sfrstcr"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sfrstcr"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sfrstcr.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sfrstcr\"\n\n),\n\nrenamed as (\n\n    select\n        sfrstcr_term_code,\n        sfrstcr_pidm,\n        sfrstcr_crn,\n        sfrstcr_class_sort_key,\n        sfrstcr_reg_seq,\n        sfrstcr_ptrm_code,\n        sfrstcr_rsts_code,\n        sfrstcr_rsts_date,\n        sfrstcr_error_flag,\n        sfrstcr_message,\n        sfrstcr_bill_hr,\n        sfrstcr_waiv_hr,\n        sfrstcr_credit_hr,\n        sfrstcr_bill_hr_hold,\n        sfrstcr_credit_hr_hold,\n        sfrstcr_gmod_code,\n        sfrstcr_grde_code,\n        sfrstcr_grde_code_mid,\n        sfrstcr_grde_date,\n        sfrstcr_dupl_over,\n        sfrstcr_link_over,\n        sfrstcr_corq_over,\n        sfrstcr_preq_over,\n        sfrstcr_time_over,\n        sfrstcr_capc_over,\n        sfrstcr_levl_over,\n        sfrstcr_coll_over,\n        sfrstcr_majr_over,\n        sfrstcr_clas_over,\n        sfrstcr_appr_over,\n        sfrstcr_appr_received_ind,\n        sfrstcr_add_date,\n        sfrstcr_activity_date,\n        sfrstcr_levl_code,\n        sfrstcr_camp_code,\n        sfrstcr_reserved_key,\n        sfrstcr_attend_hr,\n        sfrstcr_wait_seqno,\n        sfrstcr_wait_date_perm,\n        sfrstcr_rept_over,\n        sfrstcr_rpth_over,\n        sfrstcr_test_over,\n        sfrstcr_camp_over,\n        sfrstcr_wait_bump_ind,\n        sfrstcr_gmod_over,\n        sfrstcr_cred_over,\n        sfrstcr_bill_over,\n        sfrstcr_minr_over,\n        sfrstcr_user,\n        sfrstcr_degc_over,\n        sfrstcr_prog_over,\n        sfrstcr_last_attend,\n        sfrstcr_gcmt_code,\n        sfrstcr_assess_activity_date,\n        sfrstcr_data_origin,\n        sfrstcr_dept_over,\n        sfrstcr_atts_over,\n        sfrstcr_chrt_over,\n        sfrstcr_rmsg_cde,\n        sfrstcr_wl_priority,\n        sfrstcr_wl_priority_orig,\n        sfrstcr_grde_code_incmp_final,\n        sfrstcr_incomplete_ext_date,\n        sfrstcr_mexc_over,\n        sfrstcr_stsp_key_sequence,\n        sfrstcr_brdh_seq_num,\n        sfrstcr_blck_code,\n        sfrstcr_surrogate_id,\n        sfrstcr_version,\n        sfrstcr_user_id,\n        sfrstcr_vpdi_code,\n        sfrstcr_strh_seqno,\n        sfrstcr_strd_seqno,\n        sfrstcr_sessionid,\n        sfrstcr_current_time\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvests": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvests", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvests.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvests.sql", "unique_id": "model.ods.stg_banner__saturn__stvests", "fqn": ["ods", "staging", "stg_banner__saturn__stvests"], "alias": "stg_banner__saturn__stvests", "checksum": {"name": "sha256", "checksum": "ed350b65e1f741318c10db5db1a5ecfa3a462e6be4bc29068492bacb0d3c0357"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.899266, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvests\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvests') }}\n\n),\n\nrenamed as (\n\n    select\n        stvests_code,\n        stvests_desc,\n        stvests_eff_crse_stat,\n        stvests_prev_reg,\n        stvests_eff_headcount,\n        stvests_activity_date,\n        stvests_system_req_ind,\n        stvests_wdrl_code_def,\n        stvests_wd_ind,\n        stvests_third_party_wd_ind,\n        stvests_surrogate_id,\n        stvests_version,\n        stvests_user_id,\n        stvests_data_origin,\n        stvests_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvests"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvests"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvests.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvests\"\n\n),\n\nrenamed as (\n\n    select\n        stvests_code,\n        stvests_desc,\n        stvests_eff_crse_stat,\n        stvests_prev_reg,\n        stvests_eff_headcount,\n        stvests_activity_date,\n        stvests_system_req_ind,\n        stvests_wdrl_code_def,\n        stvests_wd_ind,\n        stvests_third_party_wd_ind,\n        stvests_surrogate_id,\n        stvests_version,\n        stvests_user_id,\n        stvests_data_origin,\n        stvests_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__swbtded": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__swbtded", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__swbtded.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__swbtded.sql", "unique_id": "model.ods.stg_banner__saturn__swbtded", "fqn": ["ods", "staging", "stg_banner__saturn__swbtded"], "alias": "stg_banner__saturn__swbtded", "checksum": {"name": "sha256", "checksum": "a734e24c3e5485a2d0c8b0ef1ddb5f5f0cbe3e674486859ba317391627f9619b"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.900339, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__swbtded\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'swbtded') }}\n\n),\n\nrenamed as (\n\n    select\n        swbtded_pidm,\n        swbtded_levl_code,\n        swbtded_user,\n        swbtded_activity_date,\n        swbtded_hours_deducted,\n        swbtded_surrogate_id,\n        swbtded_version,\n        swbtded_user_id,\n        swbtded_data_origin,\n        swbtded_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "swbtded"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.swbtded"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__swbtded.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"swbtded\"\n\n),\n\nrenamed as (\n\n    select\n        swbtded_pidm,\n        swbtded_levl_code,\n        swbtded_user,\n        swbtded_activity_date,\n        swbtded_hours_deducted,\n        swbtded_surrogate_id,\n        swbtded_version,\n        swbtded_user_id,\n        swbtded_data_origin,\n        swbtded_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__stvatts": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__stvatts", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__stvatts.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__stvatts.sql", "unique_id": "model.ods.stg_banner__saturn__stvatts", "fqn": ["ods", "staging", "stg_banner__saturn__stvatts"], "alias": "stg_banner__saturn__stvatts", "checksum": {"name": "sha256", "checksum": "6ac9cf83e5f4e139924f835667e8c9381f73081ab8ab068684c6ebebc7e72bf5"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.901213, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__stvatts\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'stvatts') }}\n\n),\n\nrenamed as (\n\n    select\n        stvatts_code,\n        stvatts_desc,\n        stvatts_activity_date,\n        stvatts_surrogate_id,\n        stvatts_version,\n        stvatts_user_id,\n        stvatts_data_origin,\n        stvatts_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "stvatts"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.stvatts"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__stvatts.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"stvatts\"\n\n),\n\nrenamed as (\n\n    select\n        stvatts_code,\n        stvatts_desc,\n        stvatts_activity_date,\n        stvatts_surrogate_id,\n        stvatts_version,\n        stvatts_user_id,\n        stvatts_data_origin,\n        stvatts_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.stg_banner__saturn__sgvadvr": {"database": "ods", "schema": "banner", "name": "stg_banner__saturn__sgvadvr", "resource_type": "model", "package_name": "ods", "path": "staging/stg_banner__saturn__sgvadvr.sql", "original_file_path": "domains/registrar/models/staging/stg_banner__saturn__sgvadvr.sql", "unique_id": "model.ods.stg_banner__saturn__sgvadvr", "fqn": ["ods", "staging", "stg_banner__saturn__sgvadvr"], "alias": "stg_banner__saturn__sgvadvr", "checksum": {"name": "sha256", "checksum": "80ae2c5abc9cd68a1ff77fd7fdcfb4c977cef2ab55962fd6728c52a8c9e18cae"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "group": null, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": null, "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1705823511.902099, "relation_name": "\"ods\".\"banner\".\"stg_banner__saturn__sgvadvr\"", "raw_code": "with source as (\n\n    select * from {{ source('banner__saturn', 'sgradvr') }}\n\n),\n\nrenamed as (\n\n    select\n        sgradvr_pidm,\n        sgradvr_term_code_eff,\n        sgradvr_advr_pidm,\n        sgradvr_advr_code,\n        sgradvr_prim_ind,\n        sgradvr_activity_date,\n        sgradvr_surrogate_id,\n        sgradvr_version,\n        sgradvr_user_id,\n        sgradvr_data_origin,\n        sgradvr_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "language": "sql", "refs": [], "sources": [["banner__saturn", "sgradvr"]], "metrics": [], "depends_on": {"macros": [], "nodes": ["source.ods.banner__saturn.sgradvr"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/staging/stg_banner__saturn__sgvadvr.sql", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"ods\".\"banner\".\"sgradvr\"\n\n),\n\nrenamed as (\n\n    select\n        sgradvr_pidm,\n        sgradvr_term_code_eff,\n        sgradvr_advr_pidm,\n        sgradvr_advr_code,\n        sgradvr_prim_ind,\n        sgradvr_activity_date,\n        sgradvr_surrogate_id,\n        sgradvr_version,\n        sgradvr_user_id,\n        sgradvr_data_origin,\n        sgradvr_vpdi_code\n\n    from source\n\n)\n\nselect * from renamed", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.con__registrar__student_data_report": {"database": "ods", "schema": "banner", "name": "con__registrar__student_data_report", "resource_type": "model", "package_name": "ods", "path": "contracts/student_detail/con__registrar__student_data_report.sql", "original_file_path": "domains/registrar/models/contracts/student_detail/con__registrar__student_data_report.sql", "unique_id": "model.ods.con__registrar__student_data_report", "fqn": ["ods", "contracts", "student_detail", "con__registrar__student_data_report"], "alias": "con__registrar__student_data_report", "checksum": {"name": "sha256", "checksum": "72c61458d4df3f96b08d683886e19db1f2205e072164fa30dac9206a2c82c738"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["contract"], "meta": {"grain": "banner_id, term_code, level_code"}, "group": "registrar", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": ["contract"], "description": "Student Data Report", "columns": {"banner_id": {"name": "banner_id", "description": "External Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_code": {"name": "term_code", "description": "Term code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "level_code": {"name": "level_code", "description": "Level code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "First name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Person last name", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "banner_id, term_code, level_code"}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/registrar/models/contracts/student_detail/_con__student_detail__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "group": "registrar", "tags": ["contract"], "meta": {"grain": "banner_id, term_code, level_code"}, "access": "protected"}, "created_at": 1705823511.995067, "relation_name": "\"ods\".\"banner\".\"con__registrar__student_data_report\"", "raw_code": "with student_term_level as (\n\n  select * from {{ ref('mart_student_term_level') }}\n\n),\n\npersons as (\n\n   select * from {{ ref('mart_persons') }}\n\n),\n\ncon as (\n\n  select persons.banner_id                      as banner_id,\n         student_term_level.term_code           as term_code,\n         student_term_level.level_code          as level_code,\n         coalesce(persons.preferred_first_name,\n                  persons.legal_first_name)     as first_name,\n         persons.last_name                      as last_name\n  from student_term_level \n  left join persons\n    on persons.internal_banner_id = student_term_level.internal_banner_id\n  where student_term_level.term_code = 201501\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['banner_id',\n             'term_code',\n             'level_code']) }}           as ods_surrogate_key\nfrom con", "language": "sql", "refs": [{"name": "mart_student_term_level", "package": null, "version": null}, {"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.mart_student_term_level", "model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/contracts/student_detail/con__registrar__student_data_report.sql", "compiled": true, "compiled_code": "with student_term_level as (\n\n  select * from \"ods\".\"banner\".\"mart_student_term_level\"\n\n),\n\npersons as (\n\n   select * from \"ods\".\"banner\".\"mart_persons\"\n\n),\n\ncon as (\n\n  select persons.banner_id                      as banner_id,\n         student_term_level.term_code           as term_code,\n         student_term_level.level_code          as level_code,\n         coalesce(persons.preferred_first_name,\n                  persons.legal_first_name)     as first_name,\n         persons.last_name                      as last_name\n  from student_term_level \n  left join persons\n    on persons.internal_banner_id = student_term_level.internal_banner_id\n  where student_term_level.term_code = 201501\n)\n\nselect *,\n       md5(cast(coalesce(cast(banner_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(term_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(level_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom con", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__majors": {"database": "ods", "schema": "banner", "name": "int_banner__majors", "resource_type": "model", "package_name": "ods", "path": "intermediate/majors/int_banner__majors.sql", "original_file_path": "domains/registrar/models/intermediate/majors/int_banner__majors.sql", "unique_id": "model.ods.int_banner__majors", "fqn": ["ods", "intermediate", "majors", "int_banner__majors"], "alias": "int_banner__majors", "checksum": {"name": "sha256", "checksum": "391245a934abe6d042e53fe37cd4782468826450990dc7e4c6d056627492db04"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["banner_bug"], "meta": {"grain": "major_code"}, "group": "registrar", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": ["banner_bug"], "description": "Banner major type", "columns": {"major_code": {"name": "major_code", "description": "Major code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_desc": {"name": "major_desc", "description": "Major description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dept_code": {"name": "dept_code", "description": "Department code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "major_code"}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/registrar/models/intermediate/majors/_int_banner__majors.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "registrar", "tags": ["banner_bug"], "meta": {"grain": "major_code"}, "access": "private"}, "created_at": 1705823512.0015302, "relation_name": "\"ods\".\"banner\".\"int_banner__majors\"", "raw_code": "with banner_major_types as (\n\n    select * from {{ ref('stg_banner__saturn__stvmajr') }}\n\n),\n\nfilter_to_majors as (\n  \n  select *\n  from banner_major_types\n  where is_major = 'Y'\n),\n\n-- not_null_int_banner__majors_dept_code\ntest_clean as (\n\n  select *\n  from banner_major_types\n  -- failed test sql\n  where dept_code is not null\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['major_code']) }}           as ods_surrogate_key\nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__stvmajr", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__stvmajr"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/majors/int_banner__majors.sql", "compiled": true, "compiled_code": "with banner_major_types as (\n\n    select * from \"ods\".\"banner\".\"stg_banner__saturn__stvmajr\"\n\n),\n\nfilter_to_majors as (\n  \n  select *\n  from banner_major_types\n  where is_major = 'Y'\n),\n\n-- not_null_int_banner__majors_dept_code\ntest_clean as (\n\n  select *\n  from banner_major_types\n  -- failed test sql\n  where dept_code is not null\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(major_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__minors": {"database": "ods", "schema": "banner", "name": "int_banner__minors", "resource_type": "model", "package_name": "ods", "path": "intermediate/minors/int_banner__minors.sql", "original_file_path": "domains/registrar/models/intermediate/minors/int_banner__minors.sql", "unique_id": "model.ods.int_banner__minors", "fqn": ["ods", "intermediate", "minors", "int_banner__minors"], "alias": "int_banner__minors", "checksum": {"name": "sha256", "checksum": "1481358dd7629401c0115b6e63202622c2668c66b8f2ad143a5c396f3a0b1a73"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "minor_code"}, "group": "registrar", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner minor type", "columns": {"minor_code": {"name": "minor_code", "description": "Minor code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_desc": {"name": "minor_desc", "description": "Minor description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "dept_code": {"name": "dept_code", "description": "Department code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "minor_code"}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/registrar/models/intermediate/minors/_int_banner__minors.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "registrar", "meta": {"grain": "minor_code"}, "access": "private"}, "created_at": 1705823512.056427, "relation_name": "\"ods\".\"banner\".\"int_banner__minors\"", "raw_code": "with banner_major_types as (\n\n    select * from {{ ref('stg_banner__saturn__stvmajr') }}\n\n),\n\nfilter_to_minors as (\n  \n  select \n  \n         {{ dbt_utils.star(from=ref('stg_banner__saturn__stvmajr'),\n                           relation_alias='banner_major_types',\n                           except=[\"major_code\",\n                                   \"major_desc\"]) }},\n         major_code                                                  as minor_code,\n         major_desc                                                  as minor_desc\n\n  from banner_major_types\n  where is_minor = 'Y'\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['minor_code']) }}           as ods_surrogate_key\nfrom filter_to_minors", "language": "sql", "refs": [{"name": "stg_banner__saturn__stvmajr", "package": null, "version": null}, {"name": "stg_banner__saturn__stvmajr", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__stvmajr"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/minors/int_banner__minors.sql", "compiled": true, "compiled_code": "with banner_major_types as (\n\n    select * from \"ods\".\"banner\".\"stg_banner__saturn__stvmajr\"\n\n),\n\nfilter_to_minors as (\n  \n  select \n  \n         banner_major_types.\"dept_code\",\n  banner_major_types.\"is_major\",\n  banner_major_types.\"is_minor\",\n         major_code                                                  as minor_code,\n         major_desc                                                  as minor_desc\n\n  from banner_major_types\n  where is_minor = 'Y'\n)\n\nselect *,\n       md5(cast(coalesce(cast(minor_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key\nfrom filter_to_minors", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.int_banner__student_term_level": {"database": "ods", "schema": "banner", "name": "int_banner__student_term_level", "resource_type": "model", "package_name": "ods", "path": "intermediate/student_term_level/int_banner__student_term_level.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/int_banner__student_term_level.sql", "unique_id": "model.ods.int_banner__student_term_level", "fqn": ["ods", "intermediate", "student_term_level", "int_banner__student_term_level"], "alias": "int_banner__student_term_level", "checksum": {"name": "sha256", "checksum": "24a2c3bad3c1e350b0908491c0d9e71c8b081a28eace45136f274c456fc1cdbb"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id, term_code, level_code"}, "group": "registrar", "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "private"}, "tags": [], "description": "Banner general student record for term and level", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_code": {"name": "term_code", "description": "Term code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "level_code": {"name": "level_code", "description": "Level code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_term": {"name": "admit_term", "description": "Admit term", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "honors_college_ind": {"name": "honors_college_ind", "description": "Honors College indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_1_code": {"name": "major_1_code", "description": "Major 1 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_2_code": {"name": "major_2_code", "description": "Major 2 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_3_code": {"name": "major_3_code", "description": "Major 3 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_4_code": {"name": "major_4_code", "description": "Major 4 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_1_code": {"name": "minor_1_code", "description": "Minor 1 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_2_code": {"name": "minor_2_code", "description": "Minor 2 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_3_code": {"name": "minor_3_code", "description": "Minor 3 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_4_code": {"name": "minor_4_code", "description": "Minor 4 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_1_desc": {"name": "major_1_desc", "description": "Major 1 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_2_desc": {"name": "major_2_desc", "description": "Major 2 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_3_desc": {"name": "major_3_desc", "description": "Major 3 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_4_desc": {"name": "major_4_desc", "description": "Major 4 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_1_desc": {"name": "minor_1_desc", "description": "Minor 1 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_2_desc": {"name": "minor_2_desc", "description": "Minor 2 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_3_desc": {"name": "minor_3_desc", "description": "Minor 3 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_4_desc": {"name": "minor_4_desc", "description": "Minor 4 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id, term_code, level_code"}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "group": "registrar", "meta": {"grain": "internal_banner_id, term_code, level_code"}, "access": "private"}, "created_at": 1705823512.062596, "relation_name": "\"ods\".\"banner\".\"int_banner__student_term_level\"", "raw_code": "with banner_student_term_level as (\n\n   select * from {{ ref('stg_banner__saturn__sgbstdn') }}\n\n),\n\nbanner_majors as (\n\n   select * from {{ ref('int_banner__majors') }}\n\n),\n\nbanner_minors as (\n\n   select * from {{ ref('int_banner__minors') }}\n\n),\n\nbanner_student_term_level_with_desc as (\n\n  select \n\n    -- banner_student_term_level (driver)\n    {{ dbt_utils.star(from=ref('stg_banner__saturn__sgbstdn'),\n                      relation_alias='banner_student_term_level') }},\n    maj1.major_desc                                                   as major_1_desc,\n    maj2.major_desc                                                   as major_2_desc,\n    maj3.major_desc                                                   as major_3_desc,\n    maj4.major_desc                                                   as major_4_desc,\n    min1.minor_desc                                                   as minor_1_desc,\n    min2.minor_desc                                                   as minor_2_desc,\n    min3.minor_desc                                                   as minor_3_desc,\n    min4.minor_desc                                                   as minor_4_desc,\n\n  from banner_student_term_level\n  left join banner_majors maj1 on maj1.major_code = banner_student_term_level.major_1_code\n  left join banner_majors maj2 on maj2.major_code = banner_student_term_level.major_2_code\n  left join banner_majors maj3 on maj3.major_code = banner_student_term_level.major_3_code\n  left join banner_majors maj4 on maj4.major_code = banner_student_term_level.major_4_code\n  left join banner_minors min1 on min1.minor_code = banner_student_term_level.minor_1_code\n  left join banner_minors min2 on min2.minor_code = banner_student_term_level.minor_2_code\n  left join banner_minors min3 on min3.minor_code = banner_student_term_level.minor_3_code\n  left join banner_minors min4 on min4.minor_code = banner_student_term_level.minor_4_code\n\n),\n\n-- relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons\ntest_clean as (\n\n  select *\n  from banner_student_term_level_with_desc t1\n  where t1.internal_banner_id in (\n                                   select t2.internal_banner_id\n                                   from {{ ref('mart_persons') }} t2\n                                 )\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id',\n             'term_code',\n             'level_code']) }}           as ods_surrogate_key \nfrom test_clean", "language": "sql", "refs": [{"name": "stg_banner__saturn__sgbstdn", "package": null, "version": null}, {"name": "int_banner__majors", "package": null, "version": null}, {"name": "int_banner__minors", "package": null, "version": null}, {"name": "stg_banner__saturn__sgbstdn", "package": null, "version": null}, {"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.stg_banner__saturn__sgbstdn", "model.ods.int_banner__majors", "model.ods.int_banner__minors", "model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/int_banner__student_term_level.sql", "compiled": true, "compiled_code": "with banner_student_term_level as (\n\n   select * from \"ods\".\"banner\".\"stg_banner__saturn__sgbstdn\"\n\n),\n\nbanner_majors as (\n\n   select * from \"ods\".\"banner\".\"int_banner__majors\"\n\n),\n\nbanner_minors as (\n\n   select * from \"ods\".\"banner\".\"int_banner__minors\"\n\n),\n\nbanner_student_term_level_with_desc as (\n\n  select \n\n    -- banner_student_term_level (driver)\n    banner_student_term_level.\"internal_banner_id\",\n  banner_student_term_level.\"term_code\",\n  banner_student_term_level.\"level_code\",\n  banner_student_term_level.\"admit_term\",\n  banner_student_term_level.\"honors_college_ind\",\n  banner_student_term_level.\"major_1_code\",\n  banner_student_term_level.\"major_2_code\",\n  banner_student_term_level.\"major_3_code\",\n  banner_student_term_level.\"major_4_code\",\n  banner_student_term_level.\"minor_1_code\",\n  banner_student_term_level.\"minor_2_code\",\n  banner_student_term_level.\"minor_3_code\",\n  banner_student_term_level.\"minor_4_code\",\n    maj1.major_desc                                                   as major_1_desc,\n    maj2.major_desc                                                   as major_2_desc,\n    maj3.major_desc                                                   as major_3_desc,\n    maj4.major_desc                                                   as major_4_desc,\n    min1.minor_desc                                                   as minor_1_desc,\n    min2.minor_desc                                                   as minor_2_desc,\n    min3.minor_desc                                                   as minor_3_desc,\n    min4.minor_desc                                                   as minor_4_desc,\n\n  from banner_student_term_level\n  left join banner_majors maj1 on maj1.major_code = banner_student_term_level.major_1_code\n  left join banner_majors maj2 on maj2.major_code = banner_student_term_level.major_2_code\n  left join banner_majors maj3 on maj3.major_code = banner_student_term_level.major_3_code\n  left join banner_majors maj4 on maj4.major_code = banner_student_term_level.major_4_code\n  left join banner_minors min1 on min1.minor_code = banner_student_term_level.minor_1_code\n  left join banner_minors min2 on min2.minor_code = banner_student_term_level.minor_2_code\n  left join banner_minors min3 on min3.minor_code = banner_student_term_level.minor_3_code\n  left join banner_minors min4 on min4.minor_code = banner_student_term_level.minor_4_code\n\n),\n\n-- relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons\ntest_clean as (\n\n  select *\n  from banner_student_term_level_with_desc t1\n  where t1.internal_banner_id in (\n                                   select t2.internal_banner_id\n                                   from \"ods\".\"banner\".\"mart_persons\" t2\n                                 )\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(term_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(level_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom test_clean", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "private", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "model.ods.mart_student_term_level": {"database": "ods", "schema": "banner", "name": "mart_student_term_level", "resource_type": "model", "package_name": "ods", "path": "mart/mart_student_term_level.sql", "original_file_path": "domains/registrar/models/mart/mart_student_term_level.sql", "unique_id": "model.ods.mart_student_term_level", "fqn": ["ods", "mart", "mart_student_term_level"], "alias": "mart_student_term_level", "checksum": {"name": "sha256", "checksum": "a39feb4a81db6dc0ce02db85087196494298eaf6cefc8387045b12d9e99b12d9"}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {"grain": "internal_banner_id, term_code, level_code"}, "group": "registrar", "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "post-hook": [], "pre-hook": [], "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "on_configuration_change": "apply", "grants": {}, "packages": [], "docs": {"show": true, "node_color": null}, "contract": {"enforced": false, "alias_types": true}, "access": "protected"}, "tags": [], "description": "Banner general student record for term and level", "columns": {"internal_banner_id": {"name": "internal_banner_id", "description": "Internal Banner ID", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "term_code": {"name": "term_code", "description": "Term code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "level_code": {"name": "level_code", "description": "Level code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "admit_term": {"name": "admit_term", "description": "Admit term", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "honors_college_ind": {"name": "honors_college_ind", "description": "Honors College indicator", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_1_code": {"name": "major_1_code", "description": "Major 1 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_2_code": {"name": "major_2_code", "description": "Major 2 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_3_code": {"name": "major_3_code", "description": "Major 3 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_4_code": {"name": "major_4_code", "description": "Major 4 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_1_code": {"name": "minor_1_code", "description": "Minor 1 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_2_code": {"name": "minor_2_code", "description": "Minor 2 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_3_code": {"name": "minor_3_code", "description": "Minor 3 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_4_code": {"name": "minor_4_code", "description": "Minor 4 code", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_1_desc": {"name": "major_1_desc", "description": "Major 1 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_2_desc": {"name": "major_2_desc", "description": "Major 2 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_3_desc": {"name": "major_3_desc", "description": "Major 3 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "major_4_desc": {"name": "major_4_desc", "description": "Major 4 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_1_desc": {"name": "minor_1_desc", "description": "Minor 1 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_2_desc": {"name": "minor_2_desc", "description": "Minor 2 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_3_desc": {"name": "minor_3_desc", "description": "Minor 3 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "minor_4_desc": {"name": "minor_4_desc", "description": "Minor 4 description", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}, "ods_surrogate_key": {"name": "ods_surrogate_key", "description": "", "meta": {}, "data_type": null, "constraints": [], "quote": null, "tags": []}}, "meta": {"grain": "internal_banner_id, term_code, level_code"}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": "ods://domains/registrar/models/mart/_mart_registrar__models.yml", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "group": "registrar", "meta": {"grain": "internal_banner_id, term_code, level_code"}, "access": "protected"}, "created_at": 1705823512.088081, "relation_name": "\"ods\".\"banner\".\"mart_student_term_level\"", "raw_code": "with banner_student_term_level as (\n\n  select * from {{ ref('int_banner__student_term_level') }}\n\n),\n\n\nfinal as (\n    \n  select \n    \n    -- banner_student_term_level (driver)\n    {{ dbt_utils.star(from=ref('int_banner__student_term_level'),\n                    relation_alias='banner_student_term_level',\n                    except=[\"ods_surrogate_key\"]) }}\n \n  from banner_student_term_level\n\n)\n\nselect *,\n       {{ dbt_utils.generate_surrogate_key(\n            ['internal_banner_id',\n             'term_code',\n             'level_code']) }}           as ods_surrogate_key \nfrom final", "language": "sql", "refs": [{"name": "int_banner__student_term_level", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt_utils.star", "macro.dbt_utils.generate_surrogate_key"], "nodes": ["model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/mart_student_term_level.sql", "compiled": true, "compiled_code": "with banner_student_term_level as (\n\n  select * from \"ods\".\"banner\".\"int_banner__student_term_level\"\n\n),\n\n\nfinal as (\n    \n  select \n    \n    -- banner_student_term_level (driver)\n    banner_student_term_level.\"internal_banner_id\",\n  banner_student_term_level.\"term_code\",\n  banner_student_term_level.\"level_code\",\n  banner_student_term_level.\"admit_term\",\n  banner_student_term_level.\"honors_college_ind\",\n  banner_student_term_level.\"major_1_code\",\n  banner_student_term_level.\"major_2_code\",\n  banner_student_term_level.\"major_3_code\",\n  banner_student_term_level.\"major_4_code\",\n  banner_student_term_level.\"minor_1_code\",\n  banner_student_term_level.\"minor_2_code\",\n  banner_student_term_level.\"minor_3_code\",\n  banner_student_term_level.\"minor_4_code\",\n  banner_student_term_level.\"major_1_desc\",\n  banner_student_term_level.\"major_2_desc\",\n  banner_student_term_level.\"major_3_desc\",\n  banner_student_term_level.\"major_4_desc\",\n  banner_student_term_level.\"minor_1_desc\",\n  banner_student_term_level.\"minor_2_desc\",\n  banner_student_term_level.\"minor_3_desc\",\n  banner_student_term_level.\"minor_4_desc\"\n \n  from banner_student_term_level\n\n)\n\nselect *,\n       md5(cast(coalesce(cast(internal_banner_id as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(term_code as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(level_code as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT))           as ods_surrogate_key \nfrom final", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "access": "protected", "constraints": [], "version": null, "latest_version": null, "deprecation_date": null}, "test.ods.not_null_int_banner__majors_major_code.a5144e8a86": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "major_code", "model": "{{ get_where_subquery(ref('int_banner__majors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__majors_major_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__majors_major_code.sql", "original_file_path": "domains/registrar/models/intermediate/majors/_int_banner__majors.yml", "unique_id": "test.ods.not_null_int_banner__majors_major_code.a5144e8a86", "fqn": ["ods", "registrar", "models", "intermediate", "majors", "not_null_int_banner__majors_major_code"], "alias": "not_null_int_banner__majors_major_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.0514328, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/majors/_int_banner__majors.yml/not_null_int_banner__majors_major_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect major_code\nfrom \"ods\".\"banner\".\"int_banner__majors\"\nwhere major_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_code", "file_key_name": "models.int_banner__majors", "attached_node": "model.ods.int_banner__majors"}, "test.ods.unique_int_banner__majors_major_code.bbc162c8b7": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "major_code", "model": "{{ get_where_subquery(ref('int_banner__majors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__majors_major_code", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__majors_major_code.sql", "original_file_path": "domains/registrar/models/intermediate/majors/_int_banner__majors.yml", "unique_id": "test.ods.unique_int_banner__majors_major_code.bbc162c8b7", "fqn": ["ods", "registrar", "models", "intermediate", "majors", "unique_int_banner__majors_major_code"], "alias": "unique_int_banner__majors_major_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.052286, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/majors/_int_banner__majors.yml/unique_int_banner__majors_major_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    major_code as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__majors\"\nwhere major_code is not null\ngroup by major_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_code", "file_key_name": "models.int_banner__majors", "attached_node": "model.ods.int_banner__majors"}, "test.ods.not_null_int_banner__majors_major_desc.49a575aa1a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "major_desc", "model": "{{ get_where_subquery(ref('int_banner__majors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__majors_major_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__majors_major_desc.sql", "original_file_path": "domains/registrar/models/intermediate/majors/_int_banner__majors.yml", "unique_id": "test.ods.not_null_int_banner__majors_major_desc.49a575aa1a", "fqn": ["ods", "registrar", "models", "intermediate", "majors", "not_null_int_banner__majors_major_desc"], "alias": "not_null_int_banner__majors_major_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.053041, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/majors/_int_banner__majors.yml/not_null_int_banner__majors_major_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect major_desc\nfrom \"ods\".\"banner\".\"int_banner__majors\"\nwhere major_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_desc", "file_key_name": "models.int_banner__majors", "attached_node": "model.ods.int_banner__majors"}, "test.ods.not_null_int_banner__majors_dept_code.7b5f450720": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dept_code", "model": "{{ get_where_subquery(ref('int_banner__majors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__majors_dept_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__majors_dept_code.sql", "original_file_path": "domains/registrar/models/intermediate/majors/_int_banner__majors.yml", "unique_id": "test.ods.not_null_int_banner__majors_dept_code.7b5f450720", "fqn": ["ods", "registrar", "models", "intermediate", "majors", "not_null_int_banner__majors_dept_code"], "alias": "not_null_int_banner__majors_dept_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.05378, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/majors/_int_banner__majors.yml/not_null_int_banner__majors_dept_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dept_code\nfrom \"ods\".\"banner\".\"int_banner__majors\"\nwhere dept_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dept_code", "file_key_name": "models.int_banner__majors", "attached_node": "model.ods.int_banner__majors"}, "test.ods.unique_int_banner__majors_ods_surrogate_key.2a7bfe4573": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__majors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__majors_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__majors_ods_surrogate_key.sql", "original_file_path": "domains/registrar/models/intermediate/majors/_int_banner__majors.yml", "unique_id": "test.ods.unique_int_banner__majors_ods_surrogate_key.2a7bfe4573", "fqn": ["ods", "registrar", "models", "intermediate", "majors", "unique_int_banner__majors_ods_surrogate_key"], "alias": "unique_int_banner__majors_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.054721, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/majors/_int_banner__majors.yml/unique_int_banner__majors_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__majors\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__majors", "attached_node": "model.ods.int_banner__majors"}, "test.ods.not_null_int_banner__minors_minor_code.6af6da03d1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "minor_code", "model": "{{ get_where_subquery(ref('int_banner__minors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__minors_minor_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__minors_minor_code.sql", "original_file_path": "domains/registrar/models/intermediate/minors/_int_banner__minors.yml", "unique_id": "test.ods.not_null_int_banner__minors_minor_code.6af6da03d1", "fqn": ["ods", "registrar", "models", "intermediate", "minors", "not_null_int_banner__minors_minor_code"], "alias": "not_null_int_banner__minors_minor_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.056732, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/minors/_int_banner__minors.yml/not_null_int_banner__minors_minor_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect minor_code\nfrom \"ods\".\"banner\".\"int_banner__minors\"\nwhere minor_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_code", "file_key_name": "models.int_banner__minors", "attached_node": "model.ods.int_banner__minors"}, "test.ods.unique_int_banner__minors_minor_code.5d9bfcc746": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "minor_code", "model": "{{ get_where_subquery(ref('int_banner__minors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__minors_minor_code", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__minors_minor_code.sql", "original_file_path": "domains/registrar/models/intermediate/minors/_int_banner__minors.yml", "unique_id": "test.ods.unique_int_banner__minors_minor_code.5d9bfcc746", "fqn": ["ods", "registrar", "models", "intermediate", "minors", "unique_int_banner__minors_minor_code"], "alias": "unique_int_banner__minors_minor_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.0574138, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/minors/_int_banner__minors.yml/unique_int_banner__minors_minor_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    minor_code as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__minors\"\nwhere minor_code is not null\ngroup by minor_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_code", "file_key_name": "models.int_banner__minors", "attached_node": "model.ods.int_banner__minors"}, "test.ods.not_null_int_banner__minors_minor_desc.df00522c1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "minor_desc", "model": "{{ get_where_subquery(ref('int_banner__minors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__minors_minor_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__minors_minor_desc.sql", "original_file_path": "domains/registrar/models/intermediate/minors/_int_banner__minors.yml", "unique_id": "test.ods.not_null_int_banner__minors_minor_desc.df00522c1c", "fqn": ["ods", "registrar", "models", "intermediate", "minors", "not_null_int_banner__minors_minor_desc"], "alias": "not_null_int_banner__minors_minor_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.0581498, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/minors/_int_banner__minors.yml/not_null_int_banner__minors_minor_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect minor_desc\nfrom \"ods\".\"banner\".\"int_banner__minors\"\nwhere minor_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_desc", "file_key_name": "models.int_banner__minors", "attached_node": "model.ods.int_banner__minors"}, "test.ods.not_null_int_banner__minors_dept_code.ccc886fea1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "dept_code", "model": "{{ get_where_subquery(ref('int_banner__minors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__minors_dept_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__minors_dept_code.sql", "original_file_path": "domains/registrar/models/intermediate/minors/_int_banner__minors.yml", "unique_id": "test.ods.not_null_int_banner__minors_dept_code.ccc886fea1", "fqn": ["ods", "registrar", "models", "intermediate", "minors", "not_null_int_banner__minors_dept_code"], "alias": "not_null_int_banner__minors_dept_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.05904, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/minors/_int_banner__minors.yml/not_null_int_banner__minors_dept_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect dept_code\nfrom \"ods\".\"banner\".\"int_banner__minors\"\nwhere dept_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "dept_code", "file_key_name": "models.int_banner__minors", "attached_node": "model.ods.int_banner__minors"}, "test.ods.unique_int_banner__minors_ods_surrogate_key.6e3635fd49": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__minors')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__minors_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__minors_ods_surrogate_key.sql", "original_file_path": "domains/registrar/models/intermediate/minors/_int_banner__minors.yml", "unique_id": "test.ods.unique_int_banner__minors_ods_surrogate_key.6e3635fd49", "fqn": ["ods", "registrar", "models", "intermediate", "minors", "unique_int_banner__minors_ods_surrogate_key"], "alias": "unique_int_banner__minors_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.05976, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/minors/_int_banner__minors.yml/unique_int_banner__minors_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__minors\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__minors", "attached_node": "model.ods.int_banner__minors"}, "test.ods.not_null_int_banner__student_term_level_internal_banner_id.0acdba69f4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__student_term_level_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__student_term_level_internal_banner_id.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.not_null_int_banner__student_term_level_internal_banner_id.0acdba69f4", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "not_null_int_banner__student_term_level_internal_banner_id"], "alias": "not_null_int_banner__student_term_level_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.062894, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/not_null_int_banner__student_term_level_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__student_term_level\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bafe4e89fc": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('mart_persons')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_5268d30bc056defde5614efb5f691c17.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bafe4e89fc", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_"], "alias": "relationships_int_banner__stud_5268d30bc056defde5614efb5f691c17", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_5268d30bc056defde5614efb5f691c17", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_5268d30bc056defde5614efb5f691c17"}, "created_at": 1705823512.0635788, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_5268d30bc056defde5614efb5f691c17\") }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_5268d30bc056defde5614efb5f691c17.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"mart_persons\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.not_null_int_banner__student_term_level_term_code.bab9e82024": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "term_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__student_term_level_term_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__student_term_level_term_code.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.not_null_int_banner__student_term_level_term_code.bab9e82024", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "not_null_int_banner__student_term_level_term_code"], "alias": "not_null_int_banner__student_term_level_term_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.068028, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/not_null_int_banner__student_term_level_term_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect term_code\nfrom \"ods\".\"banner\".\"int_banner__student_term_level\"\nwhere term_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "term_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.not_null_int_banner__student_term_level_level_code.7a142ae79d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "level_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__student_term_level_level_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__student_term_level_level_code.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.not_null_int_banner__student_term_level_level_code.7a142ae79d", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "not_null_int_banner__student_term_level_level_code"], "alias": "not_null_int_banner__student_term_level_level_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.0687082, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/not_null_int_banner__student_term_level_level_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect level_code\nfrom \"ods\".\"banner\".\"int_banner__student_term_level\"\nwhere level_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "level_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.not_null_int_banner__student_term_level_honors_college_ind.4656b92916": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "honors_college_ind", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__student_term_level_honors_college_ind", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__student_term_level_honors_college_ind.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.not_null_int_banner__student_term_level_honors_college_ind.4656b92916", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "not_null_int_banner__student_term_level_honors_college_ind"], "alias": "not_null_int_banner__student_term_level_honors_college_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.069427, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/not_null_int_banner__student_term_level_honors_college_ind.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect honors_college_ind\nfrom \"ods\".\"banner\".\"int_banner__student_term_level\"\nwhere honors_college_ind is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "honors_college_ind", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_.ad2f3906f1": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_1_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_d42b715372345667a1b814500c360289.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_.ad2f3906f1", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_"], "alias": "relationships_int_banner__stud_d42b715372345667a1b814500c360289", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_d42b715372345667a1b814500c360289", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_d42b715372345667a1b814500c360289"}, "created_at": 1705823512.070323, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_d42b715372345667a1b814500c360289\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_d42b715372345667a1b814500c360289.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_1_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where major_1_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_1_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_.a135508b1b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_2_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_5bd007c5c370c8c9db1396bbaceff4b4.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_.a135508b1b", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_"], "alias": "relationships_int_banner__stud_5bd007c5c370c8c9db1396bbaceff4b4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_5bd007c5c370c8c9db1396bbaceff4b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_5bd007c5c370c8c9db1396bbaceff4b4"}, "created_at": 1705823512.072293, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_5bd007c5c370c8c9db1396bbaceff4b4\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_5bd007c5c370c8c9db1396bbaceff4b4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_2_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where major_2_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_2_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_.842e6c3dd4": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_3_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_4bf92c08d79373bd78bd5de30c5101c6.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_.842e6c3dd4", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_"], "alias": "relationships_int_banner__stud_4bf92c08d79373bd78bd5de30c5101c6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_4bf92c08d79373bd78bd5de30c5101c6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_4bf92c08d79373bd78bd5de30c5101c6"}, "created_at": 1705823512.074226, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_4bf92c08d79373bd78bd5de30c5101c6\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_4bf92c08d79373bd78bd5de30c5101c6.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_3_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where major_3_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_3_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_.5b5861b375": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_4_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_81acc8afcf4b0fd99bba1d6aeab88884.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_.5b5861b375", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_"], "alias": "relationships_int_banner__stud_81acc8afcf4b0fd99bba1d6aeab88884", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_81acc8afcf4b0fd99bba1d6aeab88884", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_81acc8afcf4b0fd99bba1d6aeab88884"}, "created_at": 1705823512.07628, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_81acc8afcf4b0fd99bba1d6aeab88884\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_81acc8afcf4b0fd99bba1d6aeab88884.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_4_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where major_4_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_4_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.268a2a29f1": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_1_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_9b6da452bb0ccbcff294cd2423c0bf46.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.268a2a29f1", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_int_banner__stud_9b6da452bb0ccbcff294cd2423c0bf46", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_9b6da452bb0ccbcff294cd2423c0bf46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_9b6da452bb0ccbcff294cd2423c0bf46"}, "created_at": 1705823512.078202, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_9b6da452bb0ccbcff294cd2423c0bf46\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_9b6da452bb0ccbcff294cd2423c0bf46.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_1_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where minor_1_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_1_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.86cb204f67": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_2_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_27f031a4ce2a7b9238f0d2b5d95196c0.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.86cb204f67", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_int_banner__stud_27f031a4ce2a7b9238f0d2b5d95196c0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_27f031a4ce2a7b9238f0d2b5d95196c0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_27f031a4ce2a7b9238f0d2b5d95196c0"}, "created_at": 1705823512.0801668, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_27f031a4ce2a7b9238f0d2b5d95196c0\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_27f031a4ce2a7b9238f0d2b5d95196c0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_2_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where minor_2_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_2_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.68559f8ded": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_3_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_b5d4acb6baad2dab6550c30247d0711b.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.68559f8ded", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_int_banner__stud_b5d4acb6baad2dab6550c30247d0711b", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_b5d4acb6baad2dab6550c30247d0711b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_b5d4acb6baad2dab6550c30247d0711b"}, "created_at": 1705823512.0820968, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_b5d4acb6baad2dab6550c30247d0711b\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_b5d4acb6baad2dab6550c30247d0711b.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_3_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where minor_3_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_3_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.84f641866d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_4_code", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__stud_f7cd22d58b99f069b3862f58e77400e5.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.84f641866d", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_int_banner__stud_f7cd22d58b99f069b3862f58e77400e5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__stud_f7cd22d58b99f069b3862f58e77400e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__stud_f7cd22d58b99f069b3862f58e77400e5"}, "created_at": 1705823512.084327, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__stud_f7cd22d58b99f069b3862f58e77400e5\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/relationships_int_banner__stud_f7cd22d58b99f069b3862f58e77400e5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_4_code as from_field\n    from \"ods\".\"banner\".\"int_banner__student_term_level\"\n    where minor_4_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_4_code", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.unique_int_banner__student_term_level_ods_surrogate_key.869066ed65": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__student_term_level_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__student_term_level_ods_surrogate_key.sql", "original_file_path": "domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml", "unique_id": "test.ods.unique_int_banner__student_term_level_ods_surrogate_key.869066ed65", "fqn": ["ods", "registrar", "models", "intermediate", "student_term_level", "unique_int_banner__student_term_level_ods_surrogate_key"], "alias": "unique_int_banner__student_term_level_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.086314, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/intermediate/student_term_level/_int_student_term_level__models.yml/unique_int_banner__student_term_level_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__student_term_level\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__student_term_level", "attached_node": "model.ods.int_banner__student_term_level"}, "test.ods.not_null_mart_student_term_level_internal_banner_id.7090430a19": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_student_term_level_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_student_term_level_internal_banner_id.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.not_null_mart_student_term_level_internal_banner_id.7090430a19", "fqn": ["ods", "registrar", "models", "mart", "not_null_mart_student_term_level_internal_banner_id"], "alias": "not_null_mart_student_term_level_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.0883892, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/not_null_mart_student_term_level_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"mart_student_term_level\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bb82186b1b": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('mart_persons')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_f2883812c02c45134961c26d55751721.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bb82186b1b", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_"], "alias": "relationships_mart_student_ter_f2883812c02c45134961c26d55751721", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_f2883812c02c45134961c26d55751721", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_f2883812c02c45134961c26d55751721"}, "created_at": 1705823512.08931, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_f2883812c02c45134961c26d55751721\") }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_f2883812c02c45134961c26d55751721.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"mart_persons\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.not_null_mart_student_term_level_term_code.ee4207ea0a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "term_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_student_term_level_term_code", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_student_term_level_term_code.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.not_null_mart_student_term_level_term_code.ee4207ea0a", "fqn": ["ods", "registrar", "models", "mart", "not_null_mart_student_term_level_term_code"], "alias": "not_null_mart_student_term_level_term_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.091142, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/not_null_mart_student_term_level_term_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect term_code\nfrom \"ods\".\"banner\".\"mart_student_term_level\"\nwhere term_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "term_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.not_null_mart_student_term_level_level_code.64fe8d83fd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "level_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_student_term_level_level_code", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_student_term_level_level_code.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.not_null_mart_student_term_level_level_code.64fe8d83fd", "fqn": ["ods", "registrar", "models", "mart", "not_null_mart_student_term_level_level_code"], "alias": "not_null_mart_student_term_level_level_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.091826, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/not_null_mart_student_term_level_level_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect level_code\nfrom \"ods\".\"banner\".\"mart_student_term_level\"\nwhere level_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "level_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.not_null_mart_student_term_level_honors_college_ind.dc40de48d5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "honors_college_ind", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_student_term_level_honors_college_ind", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_student_term_level_honors_college_ind.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.not_null_mart_student_term_level_honors_college_ind.dc40de48d5", "fqn": ["ods", "registrar", "models", "mart", "not_null_mart_student_term_level_honors_college_ind"], "alias": "not_null_mart_student_term_level_honors_college_ind", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.0927172, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/not_null_mart_student_term_level_honors_college_ind.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect honors_college_ind\nfrom \"ods\".\"banner\".\"mart_student_term_level\"\nwhere honors_college_ind is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "honors_college_ind", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_.8778ca0619": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_1_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_8070dc9d3b8420e2594eece11c2ce476.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_.8778ca0619", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_"], "alias": "relationships_mart_student_ter_8070dc9d3b8420e2594eece11c2ce476", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_8070dc9d3b8420e2594eece11c2ce476", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_8070dc9d3b8420e2594eece11c2ce476"}, "created_at": 1705823512.093452, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_8070dc9d3b8420e2594eece11c2ce476\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_8070dc9d3b8420e2594eece11c2ce476.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_1_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where major_1_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_1_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_.4a5da9b116": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_2_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_a0c8377b9aec46d3f2462df2ea3b2966.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_.4a5da9b116", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_"], "alias": "relationships_mart_student_ter_a0c8377b9aec46d3f2462df2ea3b2966", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_a0c8377b9aec46d3f2462df2ea3b2966", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_a0c8377b9aec46d3f2462df2ea3b2966"}, "created_at": 1705823512.095335, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_a0c8377b9aec46d3f2462df2ea3b2966\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_a0c8377b9aec46d3f2462df2ea3b2966.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_2_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where major_2_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_2_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_.eef6e1bb86": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_3_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_87bc900b8bc993e48f9c62fda8fdaf6f.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_.eef6e1bb86", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_"], "alias": "relationships_mart_student_ter_87bc900b8bc993e48f9c62fda8fdaf6f", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_87bc900b8bc993e48f9c62fda8fdaf6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_87bc900b8bc993e48f9c62fda8fdaf6f"}, "created_at": 1705823512.097327, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_87bc900b8bc993e48f9c62fda8fdaf6f\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_87bc900b8bc993e48f9c62fda8fdaf6f.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_3_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where major_3_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_3_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_.03073f26c5": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__majors')", "field": "major_code", "column_name": "major_4_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_57928132989622640b86db1c9a7bbfcf.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_.03073f26c5", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_"], "alias": "relationships_mart_student_ter_57928132989622640b86db1c9a7bbfcf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_57928132989622640b86db1c9a7bbfcf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_57928132989622640b86db1c9a7bbfcf"}, "created_at": 1705823512.099339, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_57928132989622640b86db1c9a7bbfcf\") }}", "language": "sql", "refs": [{"name": "int_banner__majors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_57928132989622640b86db1c9a7bbfcf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select major_4_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where major_4_code is not null\n),\n\nparent as (\n    select major_code as to_field\n    from \"ods\".\"banner\".\"int_banner__majors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "major_4_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.2c6c0447dc": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_1_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_13ab5b74e2f9c6b906378f09ec52dd8d.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.2c6c0447dc", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_mart_student_ter_13ab5b74e2f9c6b906378f09ec52dd8d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_13ab5b74e2f9c6b906378f09ec52dd8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_13ab5b74e2f9c6b906378f09ec52dd8d"}, "created_at": 1705823512.1012712, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_13ab5b74e2f9c6b906378f09ec52dd8d\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_13ab5b74e2f9c6b906378f09ec52dd8d.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_1_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where minor_1_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_1_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.206a8ee0de": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_2_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_c6c2863af0e7b32f94062ea3d0c0ebf6.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.206a8ee0de", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_mart_student_ter_c6c2863af0e7b32f94062ea3d0c0ebf6", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_c6c2863af0e7b32f94062ea3d0c0ebf6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_c6c2863af0e7b32f94062ea3d0c0ebf6"}, "created_at": 1705823512.1031969, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_c6c2863af0e7b32f94062ea3d0c0ebf6\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_c6c2863af0e7b32f94062ea3d0c0ebf6.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_2_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where minor_2_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_2_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.afe7e81c3c": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_3_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_b6922e2ad21c8fe2e78f1fe7e8b2d849.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.afe7e81c3c", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_mart_student_ter_b6922e2ad21c8fe2e78f1fe7e8b2d849", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_b6922e2ad21c8fe2e78f1fe7e8b2d849", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_b6922e2ad21c8fe2e78f1fe7e8b2d849"}, "created_at": 1705823512.1052291, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_b6922e2ad21c8fe2e78f1fe7e8b2d849\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_b6922e2ad21c8fe2e78f1fe7e8b2d849.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_3_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where minor_3_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_3_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.1344a69605": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__minors')", "field": "minor_code", "column_name": "minor_4_code", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_", "resource_type": "test", "package_name": "ods", "path": "relationships_mart_student_ter_d9c35bb04e86910f18d85c066f4ee242.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.1344a69605", "fqn": ["ods", "registrar", "models", "mart", "relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_"], "alias": "relationships_mart_student_ter_d9c35bb04e86910f18d85c066f4ee242", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_mart_student_ter_d9c35bb04e86910f18d85c066f4ee242", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_mart_student_ter_d9c35bb04e86910f18d85c066f4ee242"}, "created_at": 1705823512.107064, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_mart_student_ter_d9c35bb04e86910f18d85c066f4ee242\") }}", "language": "sql", "refs": [{"name": "int_banner__minors", "package": null, "version": null}, {"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/relationships_mart_student_ter_d9c35bb04e86910f18d85c066f4ee242.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select minor_4_code as from_field\n    from \"ods\".\"banner\".\"mart_student_term_level\"\n    where minor_4_code is not null\n),\n\nparent as (\n    select minor_code as to_field\n    from \"ods\".\"banner\".\"int_banner__minors\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "minor_4_code", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.unique_mart_student_term_level_ods_surrogate_key.691ebc885b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('mart_student_term_level')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_mart_student_term_level_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_mart_student_term_level_ods_surrogate_key.sql", "original_file_path": "domains/registrar/models/mart/_mart_registrar__models.yml", "unique_id": "test.ods.unique_mart_student_term_level_ods_surrogate_key.691ebc885b", "fqn": ["ods", "registrar", "models", "mart", "unique_mart_student_term_level_ods_surrogate_key"], "alias": "unique_mart_student_term_level_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "registrar", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.109118, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_student_term_level", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_student_term_level"]}, "compiled_path": "target/compiled/ods/domains/registrar/models/mart/_mart_registrar__models.yml/unique_mart_student_term_level_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"mart_student_term_level\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.mart_student_term_level", "attached_node": "model.ods.mart_student_term_level"}, "test.ods.not_null_int_banner__entities__filtered_to__organizations_internal_banner_id.5d5d6a2281": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__organizations')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to__organizations_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__b68f51cca62f918e073adc1be427d8aa.sql", "original_file_path": "domains/general/models/intermediate/organizations/_int_organizations__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to__organizations_internal_banner_id.5d5d6a2281", "fqn": ["ods", "general", "models", "intermediate", "organizations", "not_null_int_banner__entities__filtered_to__organizations_internal_banner_id"], "alias": "not_null_int_banner__entities__b68f51cca62f918e073adc1be427d8aa", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entities__b68f51cca62f918e073adc1be427d8aa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entities__b68f51cca62f918e073adc1be427d8aa"}, "created_at": 1705823512.1283278, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entities__b68f51cca62f918e073adc1be427d8aa\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__organizations"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/organizations/_int_organizations__models.yml/not_null_int_banner__entities__b68f51cca62f918e073adc1be427d8aa.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__organizations\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entities__filtered_to__organizations", "attached_node": "model.ods.int_banner__entities__filtered_to__organizations"}, "test.ods.unique_int_banner__entities__filtered_to__organizations_internal_banner_id.7b7d642e44": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__organizations')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to__organizations_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__f_f30f143a063324461c5836a1a24a7e49.sql", "original_file_path": "domains/general/models/intermediate/organizations/_int_organizations__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to__organizations_internal_banner_id.7b7d642e44", "fqn": ["ods", "general", "models", "intermediate", "organizations", "unique_int_banner__entities__filtered_to__organizations_internal_banner_id"], "alias": "unique_int_banner__entities__f_f30f143a063324461c5836a1a24a7e49", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__entities__f_f30f143a063324461c5836a1a24a7e49", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__entities__f_f30f143a063324461c5836a1a24a7e49"}, "created_at": 1705823512.1290472, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__entities__f_f30f143a063324461c5836a1a24a7e49\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__organizations"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/organizations/_int_organizations__models.yml/unique_int_banner__entities__f_f30f143a063324461c5836a1a24a7e49.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__organizations\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entities__filtered_to__organizations", "attached_node": "model.ods.int_banner__entities__filtered_to__organizations"}, "test.ods.not_null_int_banner__entities__filtered_to__organizations_banner_id.d573cfb4d8": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__organizations')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to__organizations_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__65b99bbb209c8b59a69a88195051cee2.sql", "original_file_path": "domains/general/models/intermediate/organizations/_int_organizations__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to__organizations_banner_id.d573cfb4d8", "fqn": ["ods", "general", "models", "intermediate", "organizations", "not_null_int_banner__entities__filtered_to__organizations_banner_id"], "alias": "not_null_int_banner__entities__65b99bbb209c8b59a69a88195051cee2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entities__65b99bbb209c8b59a69a88195051cee2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entities__65b99bbb209c8b59a69a88195051cee2"}, "created_at": 1705823512.129834, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entities__65b99bbb209c8b59a69a88195051cee2\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__organizations"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/organizations/_int_organizations__models.yml/not_null_int_banner__entities__65b99bbb209c8b59a69a88195051cee2.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect banner_id\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__organizations\"\nwhere banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.int_banner__entities__filtered_to__organizations", "attached_node": "model.ods.int_banner__entities__filtered_to__organizations"}, "test.ods.unique_int_banner__entities__filtered_to__organizations_banner_id.c1984667f6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__organizations')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to__organizations_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__f_5eab4f7e450f451e2f0e9ff4ae4299ce.sql", "original_file_path": "domains/general/models/intermediate/organizations/_int_organizations__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to__organizations_banner_id.c1984667f6", "fqn": ["ods", "general", "models", "intermediate", "organizations", "unique_int_banner__entities__filtered_to__organizations_banner_id"], "alias": "unique_int_banner__entities__f_5eab4f7e450f451e2f0e9ff4ae4299ce", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__entities__f_5eab4f7e450f451e2f0e9ff4ae4299ce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__entities__f_5eab4f7e450f451e2f0e9ff4ae4299ce"}, "created_at": 1705823512.130551, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__entities__f_5eab4f7e450f451e2f0e9ff4ae4299ce\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__organizations"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/organizations/_int_organizations__models.yml/unique_int_banner__entities__f_5eab4f7e450f451e2f0e9ff4ae4299ce.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__organizations\"\nwhere banner_id is not null\ngroup by banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.int_banner__entities__filtered_to__organizations", "attached_node": "model.ods.int_banner__entities__filtered_to__organizations"}, "test.ods.not_null_int_banner__entities__filtered_to__organizations_organization_name.c23c65814c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_name", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__organizations')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to__organizations_organization_name", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__aa76ebda1e986c7330f65b6cec52eef4.sql", "original_file_path": "domains/general/models/intermediate/organizations/_int_organizations__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to__organizations_organization_name.c23c65814c", "fqn": ["ods", "general", "models", "intermediate", "organizations", "not_null_int_banner__entities__filtered_to__organizations_organization_name"], "alias": "not_null_int_banner__entities__aa76ebda1e986c7330f65b6cec52eef4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entities__aa76ebda1e986c7330f65b6cec52eef4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entities__aa76ebda1e986c7330f65b6cec52eef4"}, "created_at": 1705823512.1312692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entities__aa76ebda1e986c7330f65b6cec52eef4\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__organizations"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/organizations/_int_organizations__models.yml/not_null_int_banner__entities__aa76ebda1e986c7330f65b6cec52eef4.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_name\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__organizations\"\nwhere organization_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "organization_name", "file_key_name": "models.int_banner__entities__filtered_to__organizations", "attached_node": "model.ods.int_banner__entities__filtered_to__organizations"}, "test.ods.unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key.5319758e00": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__organizations')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__f_cf355572fdad411ad256fccd4cac8a38.sql", "original_file_path": "domains/general/models/intermediate/organizations/_int_organizations__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key.5319758e00", "fqn": ["ods", "general", "models", "intermediate", "organizations", "unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key"], "alias": "unique_int_banner__entities__f_cf355572fdad411ad256fccd4cac8a38", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__entities__f_cf355572fdad411ad256fccd4cac8a38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__entities__f_cf355572fdad411ad256fccd4cac8a38"}, "created_at": 1705823512.131976, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__entities__f_cf355572fdad411ad256fccd4cac8a38\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__organizations", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__organizations"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/organizations/_int_organizations__models.yml/unique_int_banner__entities__f_cf355572fdad411ad256fccd4cac8a38.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__organizations\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__entities__filtered_to__organizations", "attached_node": "model.ods.int_banner__entities__filtered_to__organizations"}, "test.ods.not_null_int_banner__phone_types_phone_type_code.56eb1f8811": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "phone_type_code", "model": "{{ get_where_subquery(ref('int_banner__phone_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phone_types_phone_type_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phone_types_phone_type_code.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.not_null_int_banner__phone_types_phone_type_code.56eb1f8811", "fqn": ["ods", "general", "models", "intermediate", "phones", "not_null_int_banner__phone_types_phone_type_code"], "alias": "not_null_int_banner__phone_types_phone_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.135152, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phone_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phone_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/not_null_int_banner__phone_types_phone_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect phone_type_code\nfrom \"ods\".\"banner\".\"int_banner__phone_types\"\nwhere phone_type_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_type_code", "file_key_name": "models.int_banner__phone_types", "attached_node": "model.ods.int_banner__phone_types"}, "test.ods.unique_int_banner__phone_types_phone_type_code.cf9847a78e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "phone_type_code", "model": "{{ get_where_subquery(ref('int_banner__phone_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__phone_types_phone_type_code", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__phone_types_phone_type_code.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.unique_int_banner__phone_types_phone_type_code.cf9847a78e", "fqn": ["ods", "general", "models", "intermediate", "phones", "unique_int_banner__phone_types_phone_type_code"], "alias": "unique_int_banner__phone_types_phone_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1358762, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phone_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phone_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/unique_int_banner__phone_types_phone_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    phone_type_code as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__phone_types\"\nwhere phone_type_code is not null\ngroup by phone_type_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_type_code", "file_key_name": "models.int_banner__phone_types", "attached_node": "model.ods.int_banner__phone_types"}, "test.ods.not_null_int_banner__phone_types_phone_type_desc.9901a4250a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "phone_type_desc", "model": "{{ get_where_subquery(ref('int_banner__phone_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phone_types_phone_type_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phone_types_phone_type_desc.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.not_null_int_banner__phone_types_phone_type_desc.9901a4250a", "fqn": ["ods", "general", "models", "intermediate", "phones", "not_null_int_banner__phone_types_phone_type_desc"], "alias": "not_null_int_banner__phone_types_phone_type_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.136587, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phone_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phone_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/not_null_int_banner__phone_types_phone_type_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect phone_type_desc\nfrom \"ods\".\"banner\".\"int_banner__phone_types\"\nwhere phone_type_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_type_desc", "file_key_name": "models.int_banner__phone_types", "attached_node": "model.ods.int_banner__phone_types"}, "test.ods.unique_int_banner__phone_types_phone_type_desc.ce0c0f6967": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "phone_type_desc", "model": "{{ get_where_subquery(ref('int_banner__phone_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__phone_types_phone_type_desc", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__phone_types_phone_type_desc.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.unique_int_banner__phone_types_phone_type_desc.ce0c0f6967", "fqn": ["ods", "general", "models", "intermediate", "phones", "unique_int_banner__phone_types_phone_type_desc"], "alias": "unique_int_banner__phone_types_phone_type_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.137305, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phone_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phone_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/unique_int_banner__phone_types_phone_type_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    phone_type_desc as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__phone_types\"\nwhere phone_type_desc is not null\ngroup by phone_type_desc\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_type_desc", "file_key_name": "models.int_banner__phone_types", "attached_node": "model.ods.int_banner__phone_types"}, "test.ods.unique_int_banner__phone_types_ods_surrogate_key.d574ebc5f0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__phone_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__phone_types_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__phone_types_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.unique_int_banner__phone_types_ods_surrogate_key.d574ebc5f0", "fqn": ["ods", "general", "models", "intermediate", "phones", "unique_int_banner__phone_types_ods_surrogate_key"], "alias": "unique_int_banner__phone_types_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.138006, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phone_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phone_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/unique_int_banner__phone_types_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__phone_types\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__phone_types", "attached_node": "model.ods.int_banner__phone_types"}, "test.ods.not_null_int_banner__phones__filtered_to_active_internal_banner_id.4b86d292f6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phones__filtered_to_active_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phones__f_f2f983a8f0bab8d08c797fc0993ca74d.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.not_null_int_banner__phones__filtered_to_active_internal_banner_id.4b86d292f6", "fqn": ["ods", "general", "models", "intermediate", "phones", "not_null_int_banner__phones__filtered_to_active_internal_banner_id"], "alias": "not_null_int_banner__phones__f_f2f983a8f0bab8d08c797fc0993ca74d", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__phones__f_f2f983a8f0bab8d08c797fc0993ca74d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__phones__f_f2f983a8f0bab8d08c797fc0993ca74d"}, "created_at": 1705823512.138842, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__phones__f_f2f983a8f0bab8d08c797fc0993ca74d\") }}", "language": "sql", "refs": [{"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/not_null_int_banner__phones__f_f2f983a8f0bab8d08c797fc0993ca74d.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.08cf2e356a": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__entities__filtered_to_active')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__phon_f50613e8710e2e804233cc9978e765c5.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.08cf2e356a", "fqn": ["ods", "general", "models", "intermediate", "phones", "relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_"], "alias": "relationships_int_banner__phon_f50613e8710e2e804233cc9978e765c5", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__phon_f50613e8710e2e804233cc9978e765c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__phon_f50613e8710e2e804233cc9978e765c5"}, "created_at": 1705823512.1395671, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__phon_f50613e8710e2e804233cc9978e765c5\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/relationships_int_banner__phon_f50613e8710e2e804233cc9978e765c5.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.not_null_int_banner__phones__filtered_to_active_phone_seqno.fb586c4a23": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "phone_seqno", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phones__filtered_to_active_phone_seqno", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phones__filtered_to_active_phone_seqno.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.not_null_int_banner__phones__filtered_to_active_phone_seqno.fb586c4a23", "fqn": ["ods", "general", "models", "intermediate", "phones", "not_null_int_banner__phones__filtered_to_active_phone_seqno"], "alias": "not_null_int_banner__phones__filtered_to_active_phone_seqno", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1416042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/not_null_int_banner__phones__filtered_to_active_phone_seqno.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect phone_seqno\nfrom \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\nwhere phone_seqno is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_seqno", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.not_null_int_banner__phones__filtered_to_active_phone_type_code.cce6dcf9a9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "phone_type_code", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phones__filtered_to_active_phone_type_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phones__filtered_to_active_phone_type_code.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.not_null_int_banner__phones__filtered_to_active_phone_type_code.cce6dcf9a9", "fqn": ["ods", "general", "models", "intermediate", "phones", "not_null_int_banner__phones__filtered_to_active_phone_type_code"], "alias": "not_null_int_banner__phones__filtered_to_active_phone_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1423302, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/not_null_int_banner__phones__filtered_to_active_phone_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect phone_type_code\nfrom \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\nwhere phone_type_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_type_code", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_.94516136b7": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__phone_types')", "field": "phone_type_code", "column_name": "phone_type_code", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__phon_2340a580dd55c7940c1ab8177584d905.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_.94516136b7", "fqn": ["ods", "general", "models", "intermediate", "phones", "relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_"], "alias": "relationships_int_banner__phon_2340a580dd55c7940c1ab8177584d905", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__phon_2340a580dd55c7940c1ab8177584d905", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__phon_2340a580dd55c7940c1ab8177584d905"}, "created_at": 1705823512.143064, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__phon_2340a580dd55c7940c1ab8177584d905\") }}", "language": "sql", "refs": [{"name": "int_banner__phone_types", "package": null, "version": null}, {"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phone_types", "model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/relationships_int_banner__phon_2340a580dd55c7940c1ab8177584d905.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select phone_type_code as from_field\n    from \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\n    where phone_type_code is not null\n),\n\nparent as (\n    select phone_type_code as to_field\n    from \"ods\".\"banner\".\"int_banner__phone_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "phone_type_code", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.not_null_int_banner__phones__filtered_to_active_updated_at.7dcae4fa88": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phones__filtered_to_active_updated_at", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phones__filtered_to_active_updated_at.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.not_null_int_banner__phones__filtered_to_active_updated_at.7dcae4fa88", "fqn": ["ods", "general", "models", "intermediate", "phones", "not_null_int_banner__phones__filtered_to_active_updated_at"], "alias": "not_null_int_banner__phones__filtered_to_active_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.145119, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/not_null_int_banner__phones__filtered_to_active_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.not_null_int_banner__phones__filtered_to_active_is_unlisted.35a4c30391": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_unlisted", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phones__filtered_to_active_is_unlisted", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phones__filtered_to_active_is_unlisted.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.not_null_int_banner__phones__filtered_to_active_is_unlisted.35a4c30391", "fqn": ["ods", "general", "models", "intermediate", "phones", "not_null_int_banner__phones__filtered_to_active_is_unlisted"], "alias": "not_null_int_banner__phones__filtered_to_active_is_unlisted", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1458712, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/not_null_int_banner__phones__filtered_to_active_is_unlisted.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_unlisted\nfrom \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\nwhere is_unlisted is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_unlisted", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.unique_int_banner__phones__filtered_to_active_ods_surrogate_key.7586f238e9": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__phones__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__phones__filtered_to_active_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__phones__filtered_to_active_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/phones/_int_phones__models.yml", "unique_id": "test.ods.unique_int_banner__phones__filtered_to_active_ods_surrogate_key.7586f238e9", "fqn": ["ods", "general", "models", "intermediate", "phones", "unique_int_banner__phones__filtered_to_active_ods_surrogate_key"], "alias": "unique_int_banner__phones__filtered_to_active_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.146539, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__phones__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/phones/_int_phones__models.yml/unique_int_banner__phones__filtered_to_active_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__phones__filtered_to_active\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__phones__filtered_to_active", "attached_node": "model.ods.int_banner__phones__filtered_to_active"}, "test.ods.not_null_int_banner__email_address_types_email_type_code.e91e2de4be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_type_code", "model": "{{ get_where_subquery(ref('int_banner__email_address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_address_types_email_type_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_address_types_email_type_code.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__email_address_types_email_type_code.e91e2de4be", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "not_null_int_banner__email_address_types_email_type_code"], "alias": "not_null_int_banner__email_address_types_email_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.149506, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__email_address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/not_null_int_banner__email_address_types_email_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email_type_code\nfrom \"ods\".\"banner\".\"int_banner__email_address_types\"\nwhere email_type_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_type_code", "file_key_name": "models.int_banner__email_address_types", "attached_node": "model.ods.int_banner__email_address_types"}, "test.ods.unique_int_banner__email_address_types_email_type_code.a09c83d64f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email_type_code", "model": "{{ get_where_subquery(ref('int_banner__email_address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__email_address_types_email_type_code", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__email_address_types_email_type_code.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__email_address_types_email_type_code.a09c83d64f", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "unique_int_banner__email_address_types_email_type_code"], "alias": "unique_int_banner__email_address_types_email_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1502342, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__email_address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/unique_int_banner__email_address_types_email_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    email_type_code as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__email_address_types\"\nwhere email_type_code is not null\ngroup by email_type_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_type_code", "file_key_name": "models.int_banner__email_address_types", "attached_node": "model.ods.int_banner__email_address_types"}, "test.ods.not_null_int_banner__email_address_types_email_type_desc.2ee100b6f2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_type_desc", "model": "{{ get_where_subquery(ref('int_banner__email_address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_address_types_email_type_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_address_types_email_type_desc.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__email_address_types_email_type_desc.2ee100b6f2", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "not_null_int_banner__email_address_types_email_type_desc"], "alias": "not_null_int_banner__email_address_types_email_type_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.150949, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__email_address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/not_null_int_banner__email_address_types_email_type_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email_type_desc\nfrom \"ods\".\"banner\".\"int_banner__email_address_types\"\nwhere email_type_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_type_desc", "file_key_name": "models.int_banner__email_address_types", "attached_node": "model.ods.int_banner__email_address_types"}, "test.ods.unique_int_banner__email_address_types_email_type_desc.d36ea81120": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "email_type_desc", "model": "{{ get_where_subquery(ref('int_banner__email_address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__email_address_types_email_type_desc", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__email_address_types_email_type_desc.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__email_address_types_email_type_desc.d36ea81120", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "unique_int_banner__email_address_types_email_type_desc"], "alias": "unique_int_banner__email_address_types_email_type_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.15166, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__email_address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/unique_int_banner__email_address_types_email_type_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    email_type_desc as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__email_address_types\"\nwhere email_type_desc is not null\ngroup by email_type_desc\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_type_desc", "file_key_name": "models.int_banner__email_address_types", "attached_node": "model.ods.int_banner__email_address_types"}, "test.ods.unique_int_banner__email_address_types_ods_surrogate_key.147fa8c723": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__email_address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__email_address_types_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__email_address_types_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__email_address_types_ods_surrogate_key.147fa8c723", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "unique_int_banner__email_address_types_ods_surrogate_key"], "alias": "unique_int_banner__email_address_types_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1523159, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__email_address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/unique_int_banner__email_address_types_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__email_address_types\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__email_address_types", "attached_node": "model.ods.int_banner__email_address_types"}, "test.ods.not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id.2e177ea754": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_add_006260931f865cc9f8a7ad4c5cbd3ab7.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id.2e177ea754", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id"], "alias": "not_null_int_banner__email_add_006260931f865cc9f8a7ad4c5cbd3ab7", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__email_add_006260931f865cc9f8a7ad4c5cbd3ab7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__email_add_006260931f865cc9f8a7ad4c5cbd3ab7"}, "created_at": 1705823512.153026, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__email_add_006260931f865cc9f8a7ad4c5cbd3ab7\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/not_null_int_banner__email_add_006260931f865cc9f8a7ad4c5cbd3ab7.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.623f602022": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__entities__filtered_to_active')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__emai_97a2132be5037a3c136332eaf4647249.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.623f602022", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_"], "alias": "relationships_int_banner__emai_97a2132be5037a3c136332eaf4647249", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__emai_97a2132be5037a3c136332eaf4647249", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__emai_97a2132be5037a3c136332eaf4647249"}, "created_at": 1705823512.1538649, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__emai_97a2132be5037a3c136332eaf4647249\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/relationships_int_banner__emai_97a2132be5037a3c136332eaf4647249.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_code.d8204c5d91": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_type_code", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_addresses__filtered_to_active_email_type_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_add_d21d1c27cf054d94ed474ed3d8c1b776.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_code.d8204c5d91", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "not_null_int_banner__email_addresses__filtered_to_active_email_type_code"], "alias": "not_null_int_banner__email_add_d21d1c27cf054d94ed474ed3d8c1b776", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__email_add_d21d1c27cf054d94ed474ed3d8c1b776", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__email_add_d21d1c27cf054d94ed474ed3d8c1b776"}, "created_at": 1705823512.155811, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__email_add_d21d1c27cf054d94ed474ed3d8c1b776\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/not_null_int_banner__email_add_d21d1c27cf054d94ed474ed3d8c1b776.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email_type_code\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\nwhere email_type_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_type_code", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_.ebd1b15642": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__email_address_types')", "field": "email_type_code", "column_name": "email_type_code", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__emai_c4205bf9ab5afae678c91006a9fe79ed.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_.ebd1b15642", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_"], "alias": "relationships_int_banner__emai_c4205bf9ab5afae678c91006a9fe79ed", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__emai_c4205bf9ab5afae678c91006a9fe79ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__emai_c4205bf9ab5afae678c91006a9fe79ed"}, "created_at": 1705823512.1567051, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__emai_c4205bf9ab5afae678c91006a9fe79ed\") }}", "language": "sql", "refs": [{"name": "int_banner__email_address_types", "package": null, "version": null}, {"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_address_types", "model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/relationships_int_banner__emai_c4205bf9ab5afae678c91006a9fe79ed.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select email_type_code as from_field\n    from \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\n    where email_type_code is not null\n),\n\nparent as (\n    select email_type_code as to_field\n    from \"ods\".\"banner\".\"int_banner__email_address_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_type_code", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_address.d2181d0eb9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_address", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_addresses__filtered_to_active_email_address", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_add_a4a213646b430ac170c81e70279a4dc9.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_address.d2181d0eb9", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "not_null_int_banner__email_addresses__filtered_to_active_email_address"], "alias": "not_null_int_banner__email_add_a4a213646b430ac170c81e70279a4dc9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__email_add_a4a213646b430ac170c81e70279a4dc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__email_add_a4a213646b430ac170c81e70279a4dc9"}, "created_at": 1705823512.158633, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__email_add_a4a213646b430ac170c81e70279a4dc9\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/not_null_int_banner__email_add_a4a213646b430ac170c81e70279a4dc9.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email_address\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\nwhere email_address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_address", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.not_null_int_banner__email_addresses__filtered_to_active_updated_at.fa09bc3b7a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_addresses__filtered_to_active_updated_at", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_add_11fa52b5bd75ace69f6b721e73f56ce3.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__email_addresses__filtered_to_active_updated_at.fa09bc3b7a", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "not_null_int_banner__email_addresses__filtered_to_active_updated_at"], "alias": "not_null_int_banner__email_add_11fa52b5bd75ace69f6b721e73f56ce3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__email_add_11fa52b5bd75ace69f6b721e73f56ce3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__email_add_11fa52b5bd75ace69f6b721e73f56ce3"}, "created_at": 1705823512.1593149, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__email_add_11fa52b5bd75ace69f6b721e73f56ce3\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/not_null_int_banner__email_add_11fa52b5bd75ace69f6b721e73f56ce3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_desc.11ea9bb1b6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "email_type_desc", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_addresses__filtered_to_active_email_type_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_add_02106ce2c7fd31d37c006f1a9fa94312.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_desc.11ea9bb1b6", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "not_null_int_banner__email_addresses__filtered_to_active_email_type_desc"], "alias": "not_null_int_banner__email_add_02106ce2c7fd31d37c006f1a9fa94312", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__email_add_02106ce2c7fd31d37c006f1a9fa94312", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__email_add_02106ce2c7fd31d37c006f1a9fa94312"}, "created_at": 1705823512.1601138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__email_add_02106ce2c7fd31d37c006f1a9fa94312\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/not_null_int_banner__email_add_02106ce2c7fd31d37c006f1a9fa94312.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect email_type_desc\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\nwhere email_type_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "email_type_desc", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key.1910024f04": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__email_addre_a7bf34918866cb4712ce950d080ec1a4.sql", "original_file_path": "domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key.1910024f04", "fqn": ["ods", "general", "models", "intermediate", "email_addresses", "unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key"], "alias": "unique_int_banner__email_addre_a7bf34918866cb4712ce950d080ec1a4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__email_addre_a7bf34918866cb4712ce950d080ec1a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__email_addre_a7bf34918866cb4712ce950d080ec1a4"}, "created_at": 1705823512.1607869, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__email_addre_a7bf34918866cb4712ce950d080ec1a4\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/email_addresses/_int_email_addresses__models.yml/unique_int_banner__email_addre_a7bf34918866cb4712ce950d080ec1a4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__filtered_to_active\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__email_addresses__filtered_to_active", "attached_node": "model.ods.int_banner__email_addresses__filtered_to_active"}, "test.ods.not_null_int_banner__address_nation_types_nation_code.4c027ae689": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nation_code", "model": "{{ get_where_subquery(ref('int_banner__address_nation_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__address_nation_types_nation_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__address_nation_types_nation_code.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__address_nation_types_nation_code.4c027ae689", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__address_nation_types_nation_code"], "alias": "not_null_int_banner__address_nation_types_nation_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1658418, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_nation_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_nation_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__address_nation_types_nation_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect nation_code\nfrom \"ods\".\"banner\".\"int_banner__address_nation_types\"\nwhere nation_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nation_code", "file_key_name": "models.int_banner__address_nation_types", "attached_node": "model.ods.int_banner__address_nation_types"}, "test.ods.unique_int_banner__address_nation_types_nation_code.eb52c779f8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "nation_code", "model": "{{ get_where_subquery(ref('int_banner__address_nation_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_nation_types_nation_code", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_nation_types_nation_code.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_nation_types_nation_code.eb52c779f8", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_nation_types_nation_code"], "alias": "unique_int_banner__address_nation_types_nation_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1665652, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_nation_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_nation_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_nation_types_nation_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    nation_code as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_nation_types\"\nwhere nation_code is not null\ngroup by nation_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nation_code", "file_key_name": "models.int_banner__address_nation_types", "attached_node": "model.ods.int_banner__address_nation_types"}, "test.ods.not_null_int_banner__address_nation_types_nation_desc.18896349ec": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "nation_desc", "model": "{{ get_where_subquery(ref('int_banner__address_nation_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__address_nation_types_nation_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__address_nation_types_nation_desc.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__address_nation_types_nation_desc.18896349ec", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__address_nation_types_nation_desc"], "alias": "not_null_int_banner__address_nation_types_nation_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.167236, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_nation_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_nation_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__address_nation_types_nation_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect nation_desc\nfrom \"ods\".\"banner\".\"int_banner__address_nation_types\"\nwhere nation_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nation_desc", "file_key_name": "models.int_banner__address_nation_types", "attached_node": "model.ods.int_banner__address_nation_types"}, "test.ods.unique_int_banner__address_nation_types_nation_desc.c06f3c9161": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "nation_desc", "model": "{{ get_where_subquery(ref('int_banner__address_nation_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_nation_types_nation_desc", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_nation_types_nation_desc.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_nation_types_nation_desc.c06f3c9161", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_nation_types_nation_desc"], "alias": "unique_int_banner__address_nation_types_nation_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1680498, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_nation_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_nation_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_nation_types_nation_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    nation_desc as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_nation_types\"\nwhere nation_desc is not null\ngroup by nation_desc\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nation_desc", "file_key_name": "models.int_banner__address_nation_types", "attached_node": "model.ods.int_banner__address_nation_types"}, "test.ods.unique_int_banner__address_nation_types_ods_surrogate_key.6933941d47": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__address_nation_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_nation_types_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_nation_types_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_nation_types_ods_surrogate_key.6933941d47", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_nation_types_ods_surrogate_key"], "alias": "unique_int_banner__address_nation_types_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.168709, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_nation_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_nation_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_nation_types_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_nation_types\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__address_nation_types", "attached_node": "model.ods.int_banner__address_nation_types"}, "test.ods.not_null_int_banner__address_state_types_state_code.e419ab50bd": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_code", "model": "{{ get_where_subquery(ref('int_banner__address_state_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__address_state_types_state_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__address_state_types_state_code.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__address_state_types_state_code.e419ab50bd", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__address_state_types_state_code"], "alias": "not_null_int_banner__address_state_types_state_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.169417, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_state_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_state_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__address_state_types_state_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_code\nfrom \"ods\".\"banner\".\"int_banner__address_state_types\"\nwhere state_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "state_code", "file_key_name": "models.int_banner__address_state_types", "attached_node": "model.ods.int_banner__address_state_types"}, "test.ods.unique_int_banner__address_state_types_state_code.7cf0ebb958": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "state_code", "model": "{{ get_where_subquery(ref('int_banner__address_state_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_state_types_state_code", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_state_types_state_code.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_state_types_state_code.7cf0ebb958", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_state_types_state_code"], "alias": "unique_int_banner__address_state_types_state_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.170126, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_state_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_state_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_state_types_state_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    state_code as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_state_types\"\nwhere state_code is not null\ngroup by state_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "state_code", "file_key_name": "models.int_banner__address_state_types", "attached_node": "model.ods.int_banner__address_state_types"}, "test.ods.not_null_int_banner__address_state_types_state_desc.81abb60d2c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "state_desc", "model": "{{ get_where_subquery(ref('int_banner__address_state_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__address_state_types_state_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__address_state_types_state_desc.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__address_state_types_state_desc.81abb60d2c", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__address_state_types_state_desc"], "alias": "not_null_int_banner__address_state_types_state_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.17084, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_state_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_state_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__address_state_types_state_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect state_desc\nfrom \"ods\".\"banner\".\"int_banner__address_state_types\"\nwhere state_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "state_desc", "file_key_name": "models.int_banner__address_state_types", "attached_node": "model.ods.int_banner__address_state_types"}, "test.ods.unique_int_banner__address_state_types_state_desc.b3b6ed3ca2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "state_desc", "model": "{{ get_where_subquery(ref('int_banner__address_state_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_state_types_state_desc", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_state_types_state_desc.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_state_types_state_desc.b3b6ed3ca2", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_state_types_state_desc"], "alias": "unique_int_banner__address_state_types_state_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.171734, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_state_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_state_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_state_types_state_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    state_desc as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_state_types\"\nwhere state_desc is not null\ngroup by state_desc\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "state_desc", "file_key_name": "models.int_banner__address_state_types", "attached_node": "model.ods.int_banner__address_state_types"}, "test.ods.unique_int_banner__address_state_types_ods_surrogate_key.a16d65e7e0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__address_state_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_state_types_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_state_types_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_state_types_ods_surrogate_key.a16d65e7e0", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_state_types_ods_surrogate_key"], "alias": "unique_int_banner__address_state_types_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.172449, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_state_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_state_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_state_types_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_state_types\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__address_state_types", "attached_node": "model.ods.int_banner__address_state_types"}, "test.ods.not_null_int_banner__address_types_address_type_code.533adfd426": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_type_code", "model": "{{ get_where_subquery(ref('int_banner__address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__address_types_address_type_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__address_types_address_type_code.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__address_types_address_type_code.533adfd426", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__address_types_address_type_code"], "alias": "not_null_int_banner__address_types_address_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.173158, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__address_types_address_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_type_code\nfrom \"ods\".\"banner\".\"int_banner__address_types\"\nwhere address_type_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_type_code", "file_key_name": "models.int_banner__address_types", "attached_node": "model.ods.int_banner__address_types"}, "test.ods.unique_int_banner__address_types_address_type_code.c2a70df37b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "address_type_code", "model": "{{ get_where_subquery(ref('int_banner__address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_types_address_type_code", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_types_address_type_code.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_types_address_type_code.c2a70df37b", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_types_address_type_code"], "alias": "unique_int_banner__address_types_address_type_code", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.173874, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_types_address_type_code.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address_type_code as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_types\"\nwhere address_type_code is not null\ngroup by address_type_code\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_type_code", "file_key_name": "models.int_banner__address_types", "attached_node": "model.ods.int_banner__address_types"}, "test.ods.not_null_int_banner__address_types_address_type_desc.3702696713": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_type_desc", "model": "{{ get_where_subquery(ref('int_banner__address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__address_types_address_type_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__address_types_address_type_desc.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__address_types_address_type_desc.3702696713", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__address_types_address_type_desc"], "alias": "not_null_int_banner__address_types_address_type_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.174612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__address_types_address_type_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_type_desc\nfrom \"ods\".\"banner\".\"int_banner__address_types\"\nwhere address_type_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_type_desc", "file_key_name": "models.int_banner__address_types", "attached_node": "model.ods.int_banner__address_types"}, "test.ods.unique_int_banner__address_types_address_type_desc.585644d2ea": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "address_type_desc", "model": "{{ get_where_subquery(ref('int_banner__address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_types_address_type_desc", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_types_address_type_desc.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_types_address_type_desc.585644d2ea", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_types_address_type_desc"], "alias": "unique_int_banner__address_types_address_type_desc", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.175498, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_types_address_type_desc.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    address_type_desc as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_types\"\nwhere address_type_desc is not null\ngroup by address_type_desc\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_type_desc", "file_key_name": "models.int_banner__address_types", "attached_node": "model.ods.int_banner__address_types"}, "test.ods.unique_int_banner__address_types_ods_surrogate_key.ef3c4df487": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__address_types')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__address_types_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__address_types_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__address_types_ods_surrogate_key.ef3c4df487", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__address_types_ods_surrogate_key"], "alias": "unique_int_banner__address_types_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1762078, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__address_types", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_types"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__address_types_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__address_types\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__address_types", "attached_node": "model.ods.int_banner__address_types"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_internal_banner_id.336a453a28": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses_4cb7cabaa9320bf8fe68639c209ea6f1.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_internal_banner_id.336a453a28", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_internal_banner_id"], "alias": "not_null_int_banner__addresses_4cb7cabaa9320bf8fe68639c209ea6f1", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__addresses_4cb7cabaa9320bf8fe68639c209ea6f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__addresses_4cb7cabaa9320bf8fe68639c209ea6f1"}, "created_at": 1705823512.176915, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__addresses_4cb7cabaa9320bf8fe68639c209ea6f1\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses_4cb7cabaa9320bf8fe68639c209ea6f1.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.f38d8b6dcc": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__entities__filtered_to_active')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__addr_268f5406352066d69152bf0b8ac5b8ab.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.f38d8b6dcc", "fqn": ["ods", "general", "models", "intermediate", "addresses", "relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_"], "alias": "relationships_int_banner__addr_268f5406352066d69152bf0b8ac5b8ab", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__addr_268f5406352066d69152bf0b8ac5b8ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__addr_268f5406352066d69152bf0b8ac5b8ab"}, "created_at": 1705823512.1776278, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__addr_268f5406352066d69152bf0b8ac5b8ab\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/relationships_int_banner__addr_268f5406352066d69152bf0b8ac5b8ab.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_code.daf40f61c4": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_type_code", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_address_type_code", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses_365fdd605bec2b6a0bd236eb5602873e.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_code.daf40f61c4", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_address_type_code"], "alias": "not_null_int_banner__addresses_365fdd605bec2b6a0bd236eb5602873e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__addresses_365fdd605bec2b6a0bd236eb5602873e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__addresses_365fdd605bec2b6a0bd236eb5602873e"}, "created_at": 1705823512.179569, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__addresses_365fdd605bec2b6a0bd236eb5602873e\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses_365fdd605bec2b6a0bd236eb5602873e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_type_code\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere address_type_code is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_type_code", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_.e39bc37b06": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__address_types')", "field": "address_type_code", "column_name": "address_type_code", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__addr_406e67d8b52bcd8fd965aee0aecceea2.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_.e39bc37b06", "fqn": ["ods", "general", "models", "intermediate", "addresses", "relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_"], "alias": "relationships_int_banner__addr_406e67d8b52bcd8fd965aee0aecceea2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__addr_406e67d8b52bcd8fd965aee0aecceea2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__addr_406e67d8b52bcd8fd965aee0aecceea2"}, "created_at": 1705823512.180296, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__addr_406e67d8b52bcd8fd965aee0aecceea2\") }}", "language": "sql", "refs": [{"name": "int_banner__address_types", "package": null, "version": null}, {"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_types", "model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/relationships_int_banner__addr_406e67d8b52bcd8fd965aee0aecceea2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select address_type_code as from_field\n    from \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\n    where address_type_code is not null\n),\n\nparent as (\n    select address_type_code as to_field\n    from \"ods\".\"banner\".\"int_banner__address_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_type_code", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_address_seqno.ec68ab7c04": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_seqno", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_address_seqno", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses_f039eb238be82b352665a17079f1bfaf.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_address_seqno.ec68ab7c04", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_address_seqno"], "alias": "not_null_int_banner__addresses_f039eb238be82b352665a17079f1bfaf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__addresses_f039eb238be82b352665a17079f1bfaf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__addresses_f039eb238be82b352665a17079f1bfaf"}, "created_at": 1705823512.182362, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__addresses_f039eb238be82b352665a17079f1bfaf\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses_f039eb238be82b352665a17079f1bfaf.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_seqno\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere address_seqno is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_seqno", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_address_line_1.5dca10b49f": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_line_1", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_address_line_1", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses_8ad1dc286974ee2bb6f7f67ee90a17ac.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_address_line_1.5dca10b49f", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_address_line_1"], "alias": "not_null_int_banner__addresses_8ad1dc286974ee2bb6f7f67ee90a17ac", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__addresses_8ad1dc286974ee2bb6f7f67ee90a17ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__addresses_8ad1dc286974ee2bb6f7f67ee90a17ac"}, "created_at": 1705823512.1830971, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__addresses_8ad1dc286974ee2bb6f7f67ee90a17ac\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses_8ad1dc286974ee2bb6f7f67ee90a17ac.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_line_1\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere address_line_1 is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_line_1", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_city.5008ec4488": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "city", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_city", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses__filtered_to_active_city.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_city.5008ec4488", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_city"], "alias": "not_null_int_banner__addresses__filtered_to_active_city", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.183815, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses__filtered_to_active_city.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect city\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere city is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "city", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_.5d4fbe38ca": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__address_state_types')", "field": "state_code", "column_name": "state_code", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__addr_d21096d06cb86568ef35bd7b91a1c3d4.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_.5d4fbe38ca", "fqn": ["ods", "general", "models", "intermediate", "addresses", "relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_"], "alias": "relationships_int_banner__addr_d21096d06cb86568ef35bd7b91a1c3d4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__addr_d21096d06cb86568ef35bd7b91a1c3d4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__addr_d21096d06cb86568ef35bd7b91a1c3d4"}, "created_at": 1705823512.1845398, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__addr_d21096d06cb86568ef35bd7b91a1c3d4\") }}", "language": "sql", "refs": [{"name": "int_banner__address_state_types", "package": null, "version": null}, {"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_state_types", "model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/relationships_int_banner__addr_d21096d06cb86568ef35bd7b91a1c3d4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select state_code as from_field\n    from \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\n    where state_code is not null\n),\n\nparent as (\n    select state_code as to_field\n    from \"ods\".\"banner\".\"int_banner__address_state_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "state_code", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_.642dcb8d6d": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__address_nation_types')", "field": "nation_code", "column_name": "nation_code", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__addr_1def5323fece67dc9e04a434284eb31a.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_.642dcb8d6d", "fqn": ["ods", "general", "models", "intermediate", "addresses", "relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_"], "alias": "relationships_int_banner__addr_1def5323fece67dc9e04a434284eb31a", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__addr_1def5323fece67dc9e04a434284eb31a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__addr_1def5323fece67dc9e04a434284eb31a"}, "created_at": 1705823512.186562, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__addr_1def5323fece67dc9e04a434284eb31a\") }}", "language": "sql", "refs": [{"name": "int_banner__address_nation_types", "package": null, "version": null}, {"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__address_nation_types", "model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/relationships_int_banner__addr_1def5323fece67dc9e04a434284eb31a.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select nation_code as from_field\n    from \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\n    where nation_code is not null\n),\n\nparent as (\n    select nation_code as to_field\n    from \"ods\".\"banner\".\"int_banner__address_nation_types\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "nation_code", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_updated_at.19a323a11c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_updated_at", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses__filtered_to_active_updated_at.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_updated_at.19a323a11c", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_updated_at"], "alias": "not_null_int_banner__addresses__filtered_to_active_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.188378, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses__filtered_to_active_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_desc.cf426e1265": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "address_type_desc", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_address_type_desc", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses_6a295d4c3ee9098775dcef2f91463d95.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_desc.cf426e1265", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_address_type_desc"], "alias": "not_null_int_banner__addresses_6a295d4c3ee9098775dcef2f91463d95", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__addresses_6a295d4c3ee9098775dcef2f91463d95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__addresses_6a295d4c3ee9098775dcef2f91463d95"}, "created_at": 1705823512.189263, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__addresses_6a295d4c3ee9098775dcef2f91463d95\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses_6a295d4c3ee9098775dcef2f91463d95.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect address_type_desc\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere address_type_desc is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "address_type_desc", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key.f620fff5e1": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses_3f8b9a89ff492fc3b3960d218df2fa40.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key.f620fff5e1", "fqn": ["ods", "general", "models", "intermediate", "addresses", "not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key"], "alias": "not_null_int_banner__addresses_3f8b9a89ff492fc3b3960d218df2fa40", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__addresses_3f8b9a89ff492fc3b3960d218df2fa40", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__addresses_3f8b9a89ff492fc3b3960d218df2fa40"}, "created_at": 1705823512.189986, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__addresses_3f8b9a89ff492fc3b3960d218df2fa40\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/not_null_int_banner__addresses_3f8b9a89ff492fc3b3960d218df2fa40.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ods_surrogate_key\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere ods_surrogate_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.unique_int_banner__addresses__filtered_to_active_ods_surrogate_key.9d4a70110e": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__addresses__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__addresses__filtered_to_active_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__addresses___16f838a7c2da8b23b66d449dc1e66be2.sql", "original_file_path": "domains/general/models/intermediate/addresses/_int_addresses__models.yml", "unique_id": "test.ods.unique_int_banner__addresses__filtered_to_active_ods_surrogate_key.9d4a70110e", "fqn": ["ods", "general", "models", "intermediate", "addresses", "unique_int_banner__addresses__filtered_to_active_ods_surrogate_key"], "alias": "unique_int_banner__addresses___16f838a7c2da8b23b66d449dc1e66be2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__addresses___16f838a7c2da8b23b66d449dc1e66be2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__addresses___16f838a7c2da8b23b66d449dc1e66be2"}, "created_at": 1705823512.190701, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__addresses___16f838a7c2da8b23b66d449dc1e66be2\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/addresses/_int_addresses__models.yml/unique_int_banner__addresses___16f838a7c2da8b23b66d449dc1e66be2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__addresses__filtered_to_active\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__addresses__filtered_to_active", "attached_node": "model.ods.int_banner__addresses__filtered_to_active"}, "test.ods.unique_int_banner__entities__filtered_to__persons_internal_banner_id.5825a0d073": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to__persons_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__f_893516236a936f513d2cd31c449a852e.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to__persons_internal_banner_id.5825a0d073", "fqn": ["ods", "general", "models", "intermediate", "persons", "unique_int_banner__entities__filtered_to__persons_internal_banner_id"], "alias": "unique_int_banner__entities__f_893516236a936f513d2cd31c449a852e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__entities__f_893516236a936f513d2cd31c449a852e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__entities__f_893516236a936f513d2cd31c449a852e"}, "created_at": 1705823512.193869, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__entities__f_893516236a936f513d2cd31c449a852e\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/unique_int_banner__entities__f_893516236a936f513d2cd31c449a852e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entities__filtered_to__persons", "attached_node": "model.ods.int_banner__entities__filtered_to__persons"}, "test.ods.not_null_int_banner__entities__filtered_to__persons_internal_banner_id.8dc1c4c182": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to__persons_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__7a95b4a6c6bc3014cbccafea8728e677.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to__persons_internal_banner_id.8dc1c4c182", "fqn": ["ods", "general", "models", "intermediate", "persons", "not_null_int_banner__entities__filtered_to__persons_internal_banner_id"], "alias": "not_null_int_banner__entities__7a95b4a6c6bc3014cbccafea8728e677", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entities__7a95b4a6c6bc3014cbccafea8728e677", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entities__7a95b4a6c6bc3014cbccafea8728e677"}, "created_at": 1705823512.194612, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entities__7a95b4a6c6bc3014cbccafea8728e677\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/not_null_int_banner__entities__7a95b4a6c6bc3014cbccafea8728e677.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entities__filtered_to__persons", "attached_node": "model.ods.int_banner__entities__filtered_to__persons"}, "test.ods.unique_int_banner__entities__filtered_to__persons_banner_id.6dc726752b": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to__persons_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__filtered_to__persons_banner_id.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to__persons_banner_id.6dc726752b", "fqn": ["ods", "general", "models", "intermediate", "persons", "unique_int_banner__entities__filtered_to__persons_banner_id"], "alias": "unique_int_banner__entities__filtered_to__persons_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1953259, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/unique_int_banner__entities__filtered_to__persons_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\nwhere banner_id is not null\ngroup by banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.int_banner__entities__filtered_to__persons", "attached_node": "model.ods.int_banner__entities__filtered_to__persons"}, "test.ods.not_null_int_banner__entities__filtered_to__persons_banner_id.0ead3a9ac7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to__persons_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__filtered_to__persons_banner_id.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to__persons_banner_id.0ead3a9ac7", "fqn": ["ods", "general", "models", "intermediate", "persons", "not_null_int_banner__entities__filtered_to__persons_banner_id"], "alias": "not_null_int_banner__entities__filtered_to__persons_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.196052, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/not_null_int_banner__entities__filtered_to__persons_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect banner_id\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\nwhere banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.int_banner__entities__filtered_to__persons", "attached_node": "model.ods.int_banner__entities__filtered_to__persons"}, "test.ods.not_null_int_banner__entities__filtered_to__persons_last_name.f28116e66e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to__persons_last_name", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__filtered_to__persons_last_name.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to__persons_last_name.f28116e66e", "fqn": ["ods", "general", "models", "intermediate", "persons", "not_null_int_banner__entities__filtered_to__persons_last_name"], "alias": "not_null_int_banner__entities__filtered_to__persons_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.196939, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/not_null_int_banner__entities__filtered_to__persons_last_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_name\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\nwhere last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "models.int_banner__entities__filtered_to__persons", "attached_node": "model.ods.int_banner__entities__filtered_to__persons"}, "test.ods.unique_int_banner__entities__filtered_to__persons_ods_surrogate_key.60d3bfc1a4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to__persons_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__f_03a80a4a698a8c1b8fc235bf2ac5c847.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to__persons_ods_surrogate_key.60d3bfc1a4", "fqn": ["ods", "general", "models", "intermediate", "persons", "unique_int_banner__entities__filtered_to__persons_ods_surrogate_key"], "alias": "unique_int_banner__entities__f_03a80a4a698a8c1b8fc235bf2ac5c847", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__entities__f_03a80a4a698a8c1b8fc235bf2ac5c847", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__entities__f_03a80a4a698a8c1b8fc235bf2ac5c847"}, "created_at": 1705823512.197645, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__entities__f_03a80a4a698a8c1b8fc235bf2ac5c847\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/unique_int_banner__entities__f_03a80a4a698a8c1b8fc235bf2ac5c847.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__entities__filtered_to__persons", "attached_node": "model.ods.int_banner__entities__filtered_to__persons"}, "test.ods.not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key.088ad45fe2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to__persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__5769e02f2ac0dd6fd8f34acaeb1579a4.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key.088ad45fe2", "fqn": ["ods", "general", "models", "intermediate", "persons", "not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key"], "alias": "not_null_int_banner__entities__5769e02f2ac0dd6fd8f34acaeb1579a4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entities__5769e02f2ac0dd6fd8f34acaeb1579a4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entities__5769e02f2ac0dd6fd8f34acaeb1579a4"}, "created_at": 1705823512.1983511, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entities__5769e02f2ac0dd6fd8f34acaeb1579a4\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/not_null_int_banner__entities__5769e02f2ac0dd6fd8f34acaeb1579a4.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect ods_surrogate_key\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\nwhere ods_surrogate_key is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__entities__filtered_to__persons", "attached_node": "model.ods.int_banner__entities__filtered_to__persons"}, "test.ods.unique_int_banner__person_details_internal_banner_id.79d42dc889": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__person_details')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__person_details_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__person_details_internal_banner_id.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.unique_int_banner__person_details_internal_banner_id.79d42dc889", "fqn": ["ods", "general", "models", "intermediate", "persons", "unique_int_banner__person_details_internal_banner_id"], "alias": "unique_int_banner__person_details_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1990552, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__person_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__person_details"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/unique_int_banner__person_details_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__person_details\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__person_details", "attached_node": "model.ods.int_banner__person_details"}, "test.ods.not_null_int_banner__person_details_internal_banner_id.253609d46c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__person_details')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__person_details_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__person_details_internal_banner_id.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.not_null_int_banner__person_details_internal_banner_id.253609d46c", "fqn": ["ods", "general", "models", "intermediate", "persons", "not_null_int_banner__person_details_internal_banner_id"], "alias": "not_null_int_banner__person_details_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.1997561, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__person_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__person_details"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/not_null_int_banner__person_details_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__person_details\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__person_details", "attached_node": "model.ods.int_banner__person_details"}, "test.ods.relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_.e0243b6bab": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__entities__filtered_to__persons')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__person_details')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__pers_712893917e0ca99149d4cdf7e5a60bbf.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_.e0243b6bab", "fqn": ["ods", "general", "models", "intermediate", "persons", "relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_"], "alias": "relationships_int_banner__pers_712893917e0ca99149d4cdf7e5a60bbf", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__pers_712893917e0ca99149d4cdf7e5a60bbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__pers_712893917e0ca99149d4cdf7e5a60bbf"}, "created_at": 1705823512.200593, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__pers_712893917e0ca99149d4cdf7e5a60bbf\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to__persons", "package": null, "version": null}, {"name": "int_banner__person_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to__persons", "model.ods.int_banner__person_details"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/relationships_int_banner__pers_712893917e0ca99149d4cdf7e5a60bbf.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__person_details\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"int_banner__entities__filtered_to__persons\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__person_details", "attached_node": "model.ods.int_banner__person_details"}, "test.ods.not_null_int_banner__person_details_is_confidential.6d16fe9e77": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_confidential", "model": "{{ get_where_subquery(ref('int_banner__person_details')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__person_details_is_confidential", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__person_details_is_confidential.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.not_null_int_banner__person_details_is_confidential.6d16fe9e77", "fqn": ["ods", "general", "models", "intermediate", "persons", "not_null_int_banner__person_details_is_confidential"], "alias": "not_null_int_banner__person_details_is_confidential", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.202518, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__person_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__person_details"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/not_null_int_banner__person_details_is_confidential.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_confidential\nfrom \"ods\".\"banner\".\"int_banner__person_details\"\nwhere is_confidential is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_confidential", "file_key_name": "models.int_banner__person_details", "attached_node": "model.ods.int_banner__person_details"}, "test.ods.unique_int_banner__person_details_ods_surrogate_key.f866ffc978": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__person_details')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__person_details_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__person_details_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/persons/_int_persons__models.yml", "unique_id": "test.ods.unique_int_banner__person_details_ods_surrogate_key.f866ffc978", "fqn": ["ods", "general", "models", "intermediate", "persons", "unique_int_banner__person_details_ods_surrogate_key"], "alias": "unique_int_banner__person_details_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2032042, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__person_details", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__person_details"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/persons/_int_persons__models.yml/unique_int_banner__person_details_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__person_details\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__person_details", "attached_node": "model.ods.int_banner__person_details"}, "test.ods.not_null_int_banner__entity__name__hist_is_active.d773ea5b1c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_active", "model": "{{ get_where_subquery(ref('int_banner__entity__name__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__name__hist_is_active", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__name__hist_is_active.sql", "original_file_path": "domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__name__hist_is_active.d773ea5b1c", "fqn": ["ods", "general", "models", "intermediate", "entity__name__hist", "not_null_int_banner__entity__name__hist_is_active"], "alias": "not_null_int_banner__entity__name__hist_is_active", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2052019, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__name__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__name__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml/not_null_int_banner__entity__name__hist_is_active.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_active\nfrom \"ods\".\"banner\".\"int_banner__entity__name__hist\"\nwhere is_active is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_active", "file_key_name": "models.int_banner__entity__name__hist", "attached_node": "model.ods.int_banner__entity__name__hist"}, "test.ods.not_null_int_banner__entity__name__hist_organization_or_last_name.5b6968aa06": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_or_last_name", "model": "{{ get_where_subquery(ref('int_banner__entity__name__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__name__hist_organization_or_last_name", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__n_e68092ba59e35443d72c364817833337.sql", "original_file_path": "domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__name__hist_organization_or_last_name.5b6968aa06", "fqn": ["ods", "general", "models", "intermediate", "entity__name__hist", "not_null_int_banner__entity__name__hist_organization_or_last_name"], "alias": "not_null_int_banner__entity__n_e68092ba59e35443d72c364817833337", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entity__n_e68092ba59e35443d72c364817833337", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entity__n_e68092ba59e35443d72c364817833337"}, "created_at": 1705823512.205921, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entity__n_e68092ba59e35443d72c364817833337\") }}", "language": "sql", "refs": [{"name": "int_banner__entity__name__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__name__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml/not_null_int_banner__entity__n_e68092ba59e35443d72c364817833337.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_or_last_name\nfrom \"ods\".\"banner\".\"int_banner__entity__name__hist\"\nwhere organization_or_last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "organization_or_last_name", "file_key_name": "models.int_banner__entity__name__hist", "attached_node": "model.ods.int_banner__entity__name__hist"}, "test.ods.not_null_int_banner__entity__name__hist_updated_at.fce5ca08f0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_banner__entity__name__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__name__hist_updated_at", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__name__hist_updated_at.sql", "original_file_path": "domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__name__hist_updated_at.fce5ca08f0", "fqn": ["ods", "general", "models", "intermediate", "entity__name__hist", "not_null_int_banner__entity__name__hist_updated_at"], "alias": "not_null_int_banner__entity__name__hist_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.206638, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__name__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__name__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml/not_null_int_banner__entity__name__hist_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"ods\".\"banner\".\"int_banner__entity__name__hist\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_banner__entity__name__hist", "attached_node": "model.ods.int_banner__entity__name__hist"}, "test.ods.not_null_int_banner__entity__name__hist_internal_banner_id.f1dc658646": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entity__name__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__name__hist_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__name__hist_internal_banner_id.sql", "original_file_path": "domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__name__hist_internal_banner_id.f1dc658646", "fqn": ["ods", "general", "models", "intermediate", "entity__name__hist", "not_null_int_banner__entity__name__hist_internal_banner_id"], "alias": "not_null_int_banner__entity__name__hist_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.207734, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__name__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__name__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml/not_null_int_banner__entity__name__hist_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__entity__name__hist\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entity__name__hist", "attached_node": "model.ods.int_banner__entity__name__hist"}, "test.ods.not_null_int_banner__entity__name__hist_is_person.a21b9edd91": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_person", "model": "{{ get_where_subquery(ref('int_banner__entity__name__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__name__hist_is_person", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__name__hist_is_person.sql", "original_file_path": "domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__name__hist_is_person.a21b9edd91", "fqn": ["ods", "general", "models", "intermediate", "entity__name__hist", "not_null_int_banner__entity__name__hist_is_person"], "alias": "not_null_int_banner__entity__name__hist_is_person", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2084138, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__name__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__name__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml/not_null_int_banner__entity__name__hist_is_person.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_person\nfrom \"ods\".\"banner\".\"int_banner__entity__name__hist\"\nwhere is_person is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_person", "file_key_name": "models.int_banner__entity__name__hist", "attached_node": "model.ods.int_banner__entity__name__hist"}, "test.ods.unique_int_banner__entity__name__hist_ods_surrogate_key.c9567ec5ca": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__entity__name__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entity__name__hist_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entity__name__hist_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml", "unique_id": "test.ods.unique_int_banner__entity__name__hist_ods_surrogate_key.c9567ec5ca", "fqn": ["ods", "general", "models", "intermediate", "entity__name__hist", "unique_int_banner__entity__name__hist_ods_surrogate_key"], "alias": "unique_int_banner__entity__name__hist_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.209109, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__name__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__name__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__name__hist/_int_entity__name__hist__models.yml/unique_int_banner__entity__name__hist_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entity__name__hist\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__entity__name__hist", "attached_node": "model.ods.int_banner__entity__name__hist"}, "test.ods.not_null_int_banner__entity__id__hist_is_active.9b706911ad": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_active", "model": "{{ get_where_subquery(ref('int_banner__entity__id__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__id__hist_is_active", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__id__hist_is_active.sql", "original_file_path": "domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__id__hist_is_active.9b706911ad", "fqn": ["ods", "general", "models", "intermediate", "entity__id__hist", "not_null_int_banner__entity__id__hist_is_active"], "alias": "not_null_int_banner__entity__id__hist_is_active", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.210817, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__id__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__id__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml/not_null_int_banner__entity__id__hist_is_active.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_active\nfrom \"ods\".\"banner\".\"int_banner__entity__id__hist\"\nwhere is_active is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_active", "file_key_name": "models.int_banner__entity__id__hist", "attached_node": "model.ods.int_banner__entity__id__hist"}, "test.ods.not_null_int_banner__entity__id__hist_banner_id.084f2e1cc7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('int_banner__entity__id__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__id__hist_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__id__hist_banner_id.sql", "original_file_path": "domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__id__hist_banner_id.084f2e1cc7", "fqn": ["ods", "general", "models", "intermediate", "entity__id__hist", "not_null_int_banner__entity__id__hist_banner_id"], "alias": "not_null_int_banner__entity__id__hist_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2115421, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__id__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__id__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml/not_null_int_banner__entity__id__hist_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect banner_id\nfrom \"ods\".\"banner\".\"int_banner__entity__id__hist\"\nwhere banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.int_banner__entity__id__hist", "attached_node": "model.ods.int_banner__entity__id__hist"}, "test.ods.not_null_int_banner__entity__id__hist_updated_at.96b9c36955": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_banner__entity__id__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__id__hist_updated_at", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__id__hist_updated_at.sql", "original_file_path": "domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__id__hist_updated_at.96b9c36955", "fqn": ["ods", "general", "models", "intermediate", "entity__id__hist", "not_null_int_banner__entity__id__hist_updated_at"], "alias": "not_null_int_banner__entity__id__hist_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.21244, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__id__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__id__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml/not_null_int_banner__entity__id__hist_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"ods\".\"banner\".\"int_banner__entity__id__hist\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_banner__entity__id__hist", "attached_node": "model.ods.int_banner__entity__id__hist"}, "test.ods.not_null_int_banner__entity__id__hist_internal_banner_id.893e2c6e5d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entity__id__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entity__id__hist_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entity__id__hist_internal_banner_id.sql", "original_file_path": "domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml", "unique_id": "test.ods.not_null_int_banner__entity__id__hist_internal_banner_id.893e2c6e5d", "fqn": ["ods", "general", "models", "intermediate", "entity__id__hist", "not_null_int_banner__entity__id__hist_internal_banner_id"], "alias": "not_null_int_banner__entity__id__hist_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.213162, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__id__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__id__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml/not_null_int_banner__entity__id__hist_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__entity__id__hist\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entity__id__hist", "attached_node": "model.ods.int_banner__entity__id__hist"}, "test.ods.unique_int_banner__entity__id__hist_ods_surrogate_key.9f81f1c941": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__entity__id__hist')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entity__id__hist_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entity__id__hist_ods_surrogate_key.sql", "original_file_path": "domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml", "unique_id": "test.ods.unique_int_banner__entity__id__hist_ods_surrogate_key.9f81f1c941", "fqn": ["ods", "general", "models", "intermediate", "entity__id__hist", "unique_int_banner__entity__id__hist_ods_surrogate_key"], "alias": "unique_int_banner__entity__id__hist_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.213881, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entity__id__hist", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entity__id__hist"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entity__id__hist/_int_entity__id__hist__models.yml/unique_int_banner__entity__id__hist_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entity__id__hist\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__entity__id__hist", "attached_node": "model.ods.int_banner__entity__id__hist"}, "test.ods.not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id.8d6abfa3be": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__addresses_22d563df6fb74b239d412540982db8b3.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id.8d6abfa3be", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id"], "alias": "not_null_int_banner__addresses_22d563df6fb74b239d412540982db8b3", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__addresses_22d563df6fb74b239d412540982db8b3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__addresses_22d563df6fb74b239d412540982db8b3"}, "created_at": 1705823512.21883, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__addresses_22d563df6fb74b239d412540982db8b3\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__addresses_22d563df6fb74b239d412540982db8b3.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__addresses__pivoted_to__entities\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__addresses__pivoted_to__entities"}, "test.ods.unique_int_banner__addresses__pivoted_to__entities_internal_banner_id.121866f1a0": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__addresses__pivoted_to__entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__addresses___962c1b61233e0376a2d4cb48be221684.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__addresses__pivoted_to__entities_internal_banner_id.121866f1a0", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__addresses__pivoted_to__entities_internal_banner_id"], "alias": "unique_int_banner__addresses___962c1b61233e0376a2d4cb48be221684", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__addresses___962c1b61233e0376a2d4cb48be221684", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__addresses___962c1b61233e0376a2d4cb48be221684"}, "created_at": 1705823512.219552, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__addresses___962c1b61233e0376a2d4cb48be221684\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__addresses___962c1b61233e0376a2d4cb48be221684.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__addresses__pivoted_to__entities\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__addresses__pivoted_to__entities"}, "test.ods.relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.9e5a26e316": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__entities__filtered_to_active')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__addr_b87aecf421ac904cf1143ac71d7fcec4.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.9e5a26e316", "fqn": ["ods", "general", "models", "intermediate", "entities", "relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_"], "alias": "relationships_int_banner__addr_b87aecf421ac904cf1143ac71d7fcec4", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__addr_b87aecf421ac904cf1143ac71d7fcec4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__addr_b87aecf421ac904cf1143ac71d7fcec4"}, "created_at": 1705823512.220282, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__addr_b87aecf421ac904cf1143ac71d7fcec4\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/relationships_int_banner__addr_b87aecf421ac904cf1143ac71d7fcec4.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__addresses__pivoted_to__entities\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__addresses__pivoted_to__entities"}, "test.ods.unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key.df0f91e697": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__addresses___32ec62790d96711d6df5a39a5db7dde2.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key.df0f91e697", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key"], "alias": "unique_int_banner__addresses___32ec62790d96711d6df5a39a5db7dde2", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__addresses___32ec62790d96711d6df5a39a5db7dde2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__addresses___32ec62790d96711d6df5a39a5db7dde2"}, "created_at": 1705823512.222338, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__addresses___32ec62790d96711d6df5a39a5db7dde2\") }}", "language": "sql", "refs": [{"name": "int_banner__addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__addresses___32ec62790d96711d6df5a39a5db7dde2.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__addresses__pivoted_to__entities\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__addresses__pivoted_to__entities"}, "test.ods.not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.f9b7aa1ded": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__email_add_a2864d4f7f7595e790d92331ae8ae6de.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.f9b7aa1ded", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id"], "alias": "not_null_int_banner__email_add_a2864d4f7f7595e790d92331ae8ae6de", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__email_add_a2864d4f7f7595e790d92331ae8ae6de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__email_add_a2864d4f7f7595e790d92331ae8ae6de"}, "created_at": 1705823512.223042, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__email_add_a2864d4f7f7595e790d92331ae8ae6de\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__email_add_a2864d4f7f7595e790d92331ae8ae6de.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__pivoted_to__entities\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__email_addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__email_addresses__pivoted_to__entities"}, "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.3a19682774": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__email_addre_641dfd18e8ee3376019c5dfcf6ff0fd9.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.3a19682774", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id"], "alias": "unique_int_banner__email_addre_641dfd18e8ee3376019c5dfcf6ff0fd9", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__email_addre_641dfd18e8ee3376019c5dfcf6ff0fd9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__email_addre_641dfd18e8ee3376019c5dfcf6ff0fd9"}, "created_at": 1705823512.2237592, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__email_addre_641dfd18e8ee3376019c5dfcf6ff0fd9\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__email_addre_641dfd18e8ee3376019c5dfcf6ff0fd9.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__pivoted_to__entities\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__email_addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__email_addresses__pivoted_to__entities"}, "test.ods.relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.b2cdff8f58": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__entities__filtered_to_active')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__emai_a1dfa555bd7d4fbdcc38b996744f4261.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.b2cdff8f58", "fqn": ["ods", "general", "models", "intermediate", "entities", "relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_"], "alias": "relationships_int_banner__emai_a1dfa555bd7d4fbdcc38b996744f4261", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__emai_a1dfa555bd7d4fbdcc38b996744f4261", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__emai_a1dfa555bd7d4fbdcc38b996744f4261"}, "created_at": 1705823512.224488, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__emai_a1dfa555bd7d4fbdcc38b996744f4261\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__email_addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__email_addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/relationships_int_banner__emai_a1dfa555bd7d4fbdcc38b996744f4261.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__email_addresses__pivoted_to__entities\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__email_addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__email_addresses__pivoted_to__entities"}, "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key.6d1acd8265": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__email_addresses__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__email_addre_030ee5049e9466726b37d448aa43a0fe.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key.6d1acd8265", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key"], "alias": "unique_int_banner__email_addre_030ee5049e9466726b37d448aa43a0fe", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__email_addre_030ee5049e9466726b37d448aa43a0fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__email_addre_030ee5049e9466726b37d448aa43a0fe"}, "created_at": 1705823512.226506, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__email_addre_030ee5049e9466726b37d448aa43a0fe\") }}", "language": "sql", "refs": [{"name": "int_banner__email_addresses__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__email_addresses__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__email_addre_030ee5049e9466726b37d448aa43a0fe.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__email_addresses__pivoted_to__entities\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__email_addresses__pivoted_to__entities", "attached_node": "model.ods.int_banner__email_addresses__pivoted_to__entities"}, "test.ods.not_null_int_banner__entities__filtered_to_active_internal_banner_id.4b52732a3c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to_active_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__fd826fe449c350021a69b46d4f324468.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to_active_internal_banner_id.4b52732a3c", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__entities__filtered_to_active_internal_banner_id"], "alias": "not_null_int_banner__entities__fd826fe449c350021a69b46d4f324468", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entities__fd826fe449c350021a69b46d4f324468", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entities__fd826fe449c350021a69b46d4f324468"}, "created_at": 1705823512.2272131, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entities__fd826fe449c350021a69b46d4f324468\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__entities__fd826fe449c350021a69b46d4f324468.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.unique_int_banner__entities__filtered_to_active_internal_banner_id.ac70248cb2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to_active_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__f_116c0fa61e238c70baac40a0b03bdee8.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to_active_internal_banner_id.ac70248cb2", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__entities__filtered_to_active_internal_banner_id"], "alias": "unique_int_banner__entities__f_116c0fa61e238c70baac40a0b03bdee8", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__entities__f_116c0fa61e238c70baac40a0b03bdee8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__entities__f_116c0fa61e238c70baac40a0b03bdee8"}, "created_at": 1705823512.2279308, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__entities__f_116c0fa61e238c70baac40a0b03bdee8\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__entities__f_116c0fa61e238c70baac40a0b03bdee8.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.not_null_int_banner__entities__filtered_to_active_banner_id.df1a23f213": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to_active_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__filtered_to_active_banner_id.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to_active_banner_id.df1a23f213", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__entities__filtered_to_active_banner_id"], "alias": "not_null_int_banner__entities__filtered_to_active_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.228634, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__entities__filtered_to_active_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect banner_id\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.unique_int_banner__entities__filtered_to_active_banner_id.042f395de4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to_active_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__filtered_to_active_banner_id.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to_active_banner_id.042f395de4", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__entities__filtered_to_active_banner_id"], "alias": "unique_int_banner__entities__filtered_to_active_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.229511, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__entities__filtered_to_active_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere banner_id is not null\ngroup by banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.not_null_int_banner__entities__filtered_to_active_organization_or_last_name.dd5f03802c": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_or_last_name", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to_active_organization_or_last_name", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__b13f5195a4a901c2639c9615af69021e.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to_active_organization_or_last_name.dd5f03802c", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__entities__filtered_to_active_organization_or_last_name"], "alias": "not_null_int_banner__entities__b13f5195a4a901c2639c9615af69021e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__entities__b13f5195a4a901c2639c9615af69021e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__entities__b13f5195a4a901c2639c9615af69021e"}, "created_at": 1705823512.230227, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__entities__b13f5195a4a901c2639c9615af69021e\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__entities__b13f5195a4a901c2639c9615af69021e.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_or_last_name\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere organization_or_last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "organization_or_last_name", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.not_null_int_banner__entities__filtered_to_active_is_person.2a79a1fc86": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_person", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to_active_is_person", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__filtered_to_active_is_person.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to_active_is_person.2a79a1fc86", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__entities__filtered_to_active_is_person"], "alias": "not_null_int_banner__entities__filtered_to_active_is_person", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2309172, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__entities__filtered_to_active_is_person.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_person\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere is_person is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_person", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.not_null_int_banner__entities__filtered_to_active_updated_at.8684231c37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "updated_at", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__entities__filtered_to_active_updated_at", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__entities__filtered_to_active_updated_at.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__entities__filtered_to_active_updated_at.8684231c37", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__entities__filtered_to_active_updated_at"], "alias": "not_null_int_banner__entities__filtered_to_active_updated_at", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2315688, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__entities__filtered_to_active_updated_at.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect updated_at\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere updated_at is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "updated_at", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.unique_int_banner__entities__filtered_to_active_ods_surrogate_key.7b99a1b53f": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__entities__filtered_to_active')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__entities__filtered_to_active_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__entities__f_8afae55a99e57bdfd6380046bb02e698.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__entities__filtered_to_active_ods_surrogate_key.7b99a1b53f", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__entities__filtered_to_active_ods_surrogate_key"], "alias": "unique_int_banner__entities__f_8afae55a99e57bdfd6380046bb02e698", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__entities__f_8afae55a99e57bdfd6380046bb02e698", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__entities__f_8afae55a99e57bdfd6380046bb02e698"}, "created_at": 1705823512.232276, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__entities__f_8afae55a99e57bdfd6380046bb02e698\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__entities__f_8afae55a99e57bdfd6380046bb02e698.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__entities__filtered_to_active", "attached_node": "model.ods.int_banner__entities__filtered_to_active"}, "test.ods.not_null_int_banner__phones__pivoted_to__entities_internal_banner_id.6c9c0e7ccb": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__phones__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_int_banner__phones__pivoted_to__entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_int_banner__phones__p_355f0470f810d214822c86a404945bc0.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.not_null_int_banner__phones__pivoted_to__entities_internal_banner_id.6c9c0e7ccb", "fqn": ["ods", "general", "models", "intermediate", "entities", "not_null_int_banner__phones__pivoted_to__entities_internal_banner_id"], "alias": "not_null_int_banner__phones__p_355f0470f810d214822c86a404945bc0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "not_null_int_banner__phones__p_355f0470f810d214822c86a404945bc0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_int_banner__phones__p_355f0470f810d214822c86a404945bc0"}, "created_at": 1705823512.232983, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_int_banner__phones__p_355f0470f810d214822c86a404945bc0\") }}", "language": "sql", "refs": [{"name": "int_banner__phones__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/not_null_int_banner__phones__p_355f0470f810d214822c86a404945bc0.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"int_banner__phones__pivoted_to__entities\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__phones__pivoted_to__entities", "attached_node": "model.ods.int_banner__phones__pivoted_to__entities"}, "test.ods.unique_int_banner__phones__pivoted_to__entities_internal_banner_id.f179198e99": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__phones__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__phones__pivoted_to__entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__phones__piv_05ce1e28d00ad1d81d19af010a1ae872.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__phones__pivoted_to__entities_internal_banner_id.f179198e99", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__phones__pivoted_to__entities_internal_banner_id"], "alias": "unique_int_banner__phones__piv_05ce1e28d00ad1d81d19af010a1ae872", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__phones__piv_05ce1e28d00ad1d81d19af010a1ae872", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__phones__piv_05ce1e28d00ad1d81d19af010a1ae872"}, "created_at": 1705823512.233849, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__phones__piv_05ce1e28d00ad1d81d19af010a1ae872\") }}", "language": "sql", "refs": [{"name": "int_banner__phones__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__phones__piv_05ce1e28d00ad1d81d19af010a1ae872.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__phones__pivoted_to__entities\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__phones__pivoted_to__entities", "attached_node": "model.ods.int_banner__phones__pivoted_to__entities"}, "test.ods.relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.96d18f3c74": {"test_metadata": {"name": "relationships", "kwargs": {"to": "ref('int_banner__entities__filtered_to_active')", "field": "internal_banner_id", "column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('int_banner__phones__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_", "resource_type": "test", "package_name": "ods", "path": "relationships_int_banner__phon_5eab491c163d91f577d98e7ccf8b559e.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.96d18f3c74", "fqn": ["ods", "general", "models", "intermediate", "entities", "relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_"], "alias": "relationships_int_banner__phon_5eab491c163d91f577d98e7ccf8b559e", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "relationships_int_banner__phon_5eab491c163d91f577d98e7ccf8b559e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "relationships_int_banner__phon_5eab491c163d91f577d98e7ccf8b559e"}, "created_at": 1705823512.234571, "relation_name": null, "raw_code": "{{ test_relationships(**_dbt_generic_test_kwargs) }}{{ config(alias=\"relationships_int_banner__phon_5eab491c163d91f577d98e7ccf8b559e\") }}", "language": "sql", "refs": [{"name": "int_banner__entities__filtered_to_active", "package": null, "version": null}, {"name": "int_banner__phones__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_relationships", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__phones__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/relationships_int_banner__phon_5eab491c163d91f577d98e7ccf8b559e.sql", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select internal_banner_id as from_field\n    from \"ods\".\"banner\".\"int_banner__phones__pivoted_to__entities\"\n    where internal_banner_id is not null\n),\n\nparent as (\n    select internal_banner_id as to_field\n    from \"ods\".\"banner\".\"int_banner__entities__filtered_to_active\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.int_banner__phones__pivoted_to__entities", "attached_node": "model.ods.int_banner__phones__pivoted_to__entities"}, "test.ods.unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key.a7b51e3926": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('int_banner__phones__pivoted_to__entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_int_banner__phones__piv_82d2f374340dc2d45e8dd1107c65d8b0.sql", "original_file_path": "domains/general/models/intermediate/entities/_int_entities__models.yml", "unique_id": "test.ods.unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key.a7b51e3926", "fqn": ["ods", "general", "models", "intermediate", "entities", "unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key"], "alias": "unique_int_banner__phones__piv_82d2f374340dc2d45e8dd1107c65d8b0", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": "unique_int_banner__phones__piv_82d2f374340dc2d45e8dd1107c65d8b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_int_banner__phones__piv_82d2f374340dc2d45e8dd1107c65d8b0"}, "created_at": 1705823512.236578, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_int_banner__phones__piv_82d2f374340dc2d45e8dd1107c65d8b0\") }}", "language": "sql", "refs": [{"name": "int_banner__phones__pivoted_to__entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.int_banner__phones__pivoted_to__entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/intermediate/entities/_int_entities__models.yml/unique_int_banner__phones__piv_82d2f374340dc2d45e8dd1107c65d8b0.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"int_banner__phones__pivoted_to__entities\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.int_banner__phones__pivoted_to__entities", "attached_node": "model.ods.int_banner__phones__pivoted_to__entities"}, "test.ods.unique_mart_entities_internal_banner_id.06b42a7796": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('mart_entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_mart_entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_mart_entities_internal_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.unique_mart_entities_internal_banner_id.06b42a7796", "fqn": ["ods", "general", "models", "mart", "unique_mart_entities_internal_banner_id"], "alias": "unique_mart_entities_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.240216, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/unique_mart_entities_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"mart_entities\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.mart_entities", "attached_node": "model.ods.mart_entities"}, "test.ods.not_null_mart_entities_internal_banner_id.daa953ee5d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('mart_entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_entities_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_entities_internal_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_entities_internal_banner_id.daa953ee5d", "fqn": ["ods", "general", "models", "mart", "not_null_mart_entities_internal_banner_id"], "alias": "not_null_mart_entities_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.240932, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_entities_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"mart_entities\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.mart_entities", "attached_node": "model.ods.mart_entities"}, "test.ods.unique_mart_entities_banner_id.638670b7f3": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('mart_entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_mart_entities_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_mart_entities_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.unique_mart_entities_banner_id.638670b7f3", "fqn": ["ods", "general", "models", "mart", "unique_mart_entities_banner_id"], "alias": "unique_mart_entities_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.241639, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/unique_mart_entities_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"mart_entities\"\nwhere banner_id is not null\ngroup by banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.mart_entities", "attached_node": "model.ods.mart_entities"}, "test.ods.not_null_mart_entities_banner_id.33871b0305": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('mart_entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_entities_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_entities_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_entities_banner_id.33871b0305", "fqn": ["ods", "general", "models", "mart", "not_null_mart_entities_banner_id"], "alias": "not_null_mart_entities_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.242476, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_entities_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect banner_id\nfrom \"ods\".\"banner\".\"mart_entities\"\nwhere banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.mart_entities", "attached_node": "model.ods.mart_entities"}, "test.ods.not_null_mart_entities_organization_or_last_name.f0f5e77e5a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "organization_or_last_name", "model": "{{ get_where_subquery(ref('mart_entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_entities_organization_or_last_name", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_entities_organization_or_last_name.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_entities_organization_or_last_name.f0f5e77e5a", "fqn": ["ods", "general", "models", "mart", "not_null_mart_entities_organization_or_last_name"], "alias": "not_null_mart_entities_organization_or_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2431428, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_entities_organization_or_last_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect organization_or_last_name\nfrom \"ods\".\"banner\".\"mart_entities\"\nwhere organization_or_last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "organization_or_last_name", "file_key_name": "models.mart_entities", "attached_node": "model.ods.mart_entities"}, "test.ods.not_null_mart_entities_is_person.3560fbb438": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_person", "model": "{{ get_where_subquery(ref('mart_entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_entities_is_person", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_entities_is_person.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_entities_is_person.3560fbb438", "fqn": ["ods", "general", "models", "mart", "not_null_mart_entities_is_person"], "alias": "not_null_mart_entities_is_person", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.243795, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_entities_is_person.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_person\nfrom \"ods\".\"banner\".\"mart_entities\"\nwhere is_person is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_person", "file_key_name": "models.mart_entities", "attached_node": "model.ods.mart_entities"}, "test.ods.unique_mart_entities_ods_surrogate_key.8769b6d118": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('mart_entities')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_mart_entities_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_mart_entities_ods_surrogate_key.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.unique_mart_entities_ods_surrogate_key.8769b6d118", "fqn": ["ods", "general", "models", "mart", "unique_mart_entities_ods_surrogate_key"], "alias": "unique_mart_entities_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2444959, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_entities", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_entities"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/unique_mart_entities_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"mart_entities\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.mart_entities", "attached_node": "model.ods.mart_entities"}, "test.ods.unique_mart_persons_internal_banner_id.e7c6797622": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('mart_persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_mart_persons_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_mart_persons_internal_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.unique_mart_persons_internal_banner_id.e7c6797622", "fqn": ["ods", "general", "models", "mart", "unique_mart_persons_internal_banner_id"], "alias": "unique_mart_persons_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.245195, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/unique_mart_persons_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    internal_banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"mart_persons\"\nwhere internal_banner_id is not null\ngroup by internal_banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.mart_persons", "attached_node": "model.ods.mart_persons"}, "test.ods.not_null_mart_persons_internal_banner_id.48d2e68d8a": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "internal_banner_id", "model": "{{ get_where_subquery(ref('mart_persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_persons_internal_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_persons_internal_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_persons_internal_banner_id.48d2e68d8a", "fqn": ["ods", "general", "models", "mart", "not_null_mart_persons_internal_banner_id"], "alias": "not_null_mart_persons_internal_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.246059, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_persons_internal_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect internal_banner_id\nfrom \"ods\".\"banner\".\"mart_persons\"\nwhere internal_banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "internal_banner_id", "file_key_name": "models.mart_persons", "attached_node": "model.ods.mart_persons"}, "test.ods.unique_mart_persons_banner_id.48ca2d71d4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('mart_persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_mart_persons_banner_id", "resource_type": "test", "package_name": "ods", "path": "unique_mart_persons_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.unique_mart_persons_banner_id.48ca2d71d4", "fqn": ["ods", "general", "models", "mart", "unique_mart_persons_banner_id"], "alias": "unique_mart_persons_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.246763, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/unique_mart_persons_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    banner_id as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"mart_persons\"\nwhere banner_id is not null\ngroup by banner_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.mart_persons", "attached_node": "model.ods.mart_persons"}, "test.ods.not_null_mart_persons_banner_id.345cf9eeb0": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "banner_id", "model": "{{ get_where_subquery(ref('mart_persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_persons_banner_id", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_persons_banner_id.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_persons_banner_id.345cf9eeb0", "fqn": ["ods", "general", "models", "mart", "not_null_mart_persons_banner_id"], "alias": "not_null_mart_persons_banner_id", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.247474, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_persons_banner_id.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect banner_id\nfrom \"ods\".\"banner\".\"mart_persons\"\nwhere banner_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "banner_id", "file_key_name": "models.mart_persons", "attached_node": "model.ods.mart_persons"}, "test.ods.not_null_mart_persons_last_name.39c7b007e9": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "last_name", "model": "{{ get_where_subquery(ref('mart_persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_persons_last_name", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_persons_last_name.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_persons_last_name.39c7b007e9", "fqn": ["ods", "general", "models", "mart", "not_null_mart_persons_last_name"], "alias": "not_null_mart_persons_last_name", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2481751, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_persons_last_name.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect last_name\nfrom \"ods\".\"banner\".\"mart_persons\"\nwhere last_name is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "last_name", "file_key_name": "models.mart_persons", "attached_node": "model.ods.mart_persons"}, "test.ods.not_null_mart_persons_is_confidential.e883837d37": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "is_confidential", "model": "{{ get_where_subquery(ref('mart_persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "not_null_mart_persons_is_confidential", "resource_type": "test", "package_name": "ods", "path": "not_null_mart_persons_is_confidential.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.not_null_mart_persons_is_confidential.e883837d37", "fqn": ["ods", "general", "models", "mart", "not_null_mart_persons_is_confidential"], "alias": "not_null_mart_persons_is_confidential", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.2488692, "relation_name": null, "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/not_null_mart_persons_is_confidential.sql", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_confidential\nfrom \"ods\".\"banner\".\"mart_persons\"\nwhere is_confidential is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "is_confidential", "file_key_name": "models.mart_persons", "attached_node": "model.ods.mart_persons"}, "test.ods.unique_mart_persons_ods_surrogate_key.c9dd6f0682": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "ods_surrogate_key", "model": "{{ get_where_subquery(ref('mart_persons')) }}"}, "namespace": null}, "database": "ods", "schema": "banner_dbt_test__audit", "name": "unique_mart_persons_ods_surrogate_key", "resource_type": "test", "package_name": "ods", "path": "unique_mart_persons_ods_surrogate_key.sql", "original_file_path": "domains/general/models/mart/_mart_general__models.yml", "unique_id": "test.ods.unique_mart_persons_ods_surrogate_key.c9dd6f0682", "fqn": ["ods", "general", "models", "mart", "unique_mart_persons_ods_surrogate_key"], "alias": "unique_mart_persons_ods_surrogate_key", "checksum": {"name": "none", "checksum": ""}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "group": null, "materialized": "test", "severity": "ERROR", "store_failures": null, "store_failures_as": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "tags": [], "description": "", "columns": {}, "meta": {}, "group": "general", "docs": {"show": true, "node_color": null}, "patch_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1705823512.249517, "relation_name": null, "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "refs": [{"name": "mart_persons", "package": null, "version": null}], "sources": [], "metrics": [], "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.ods.mart_persons"]}, "compiled_path": "target/compiled/ods/domains/general/models/mart/_mart_general__models.yml/unique_mart_persons_ods_surrogate_key.sql", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    ods_surrogate_key as unique_field,\n    count(*) as n_records\n\nfrom \"ods\".\"banner\".\"mart_persons\"\nwhere ods_surrogate_key is not null\ngroup by ods_surrogate_key\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "contract": {"enforced": false, "alias_types": true, "checksum": null}, "column_name": "ods_surrogate_key", "file_key_name": "models.mart_persons", "attached_node": "model.ods.mart_persons"}}, "sources": {"source.ods.banner__saturn.sfbetrm": {"database": "ods", "schema": "banner", "name": "sfbetrm", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sfbetrm", "fqn": ["ods", "staging", "banner__saturn", "sfbetrm"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sfbetrm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sfbetrm\"", "created_at": 1705823512.251062}, "source.ods.banner__saturn.sfrstcr": {"database": "ods", "schema": "banner", "name": "sfrstcr", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sfrstcr", "fqn": ["ods", "staging", "banner__saturn", "sfrstcr"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sfrstcr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sfrstcr\"", "created_at": 1705823512.251159}, "source.ods.banner__saturn.sgbstdn": {"database": "ods", "schema": "banner", "name": "sgbstdn", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sgbstdn", "fqn": ["ods", "staging", "banner__saturn", "sgbstdn"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sgbstdn", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner general student record", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sgbstdn\"", "created_at": 1705823512.251221}, "source.ods.banner__saturn.sgradvr": {"database": "ods", "schema": "banner", "name": "sgradvr", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sgradvr", "fqn": ["ods", "staging", "banner__saturn", "sgradvr"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sgradvr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sgradvr\"", "created_at": 1705823512.2512808}, "source.ods.banner__saturn.sgrchrt": {"database": "ods", "schema": "banner", "name": "sgrchrt", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sgrchrt", "fqn": ["ods", "staging", "banner__saturn", "sgrchrt"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sgrchrt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sgrchrt\"", "created_at": 1705823512.251334}, "source.ods.banner__saturn.sgrclsr": {"database": "ods", "schema": "banner", "name": "sgrclsr", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sgrclsr", "fqn": ["ods", "staging", "banner__saturn", "sgrclsr"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sgrclsr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sgrclsr\"", "created_at": 1705823512.251384}, "source.ods.banner__saturn.sgrsatt": {"database": "ods", "schema": "banner", "name": "sgrsatt", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sgrsatt", "fqn": ["ods", "staging", "banner__saturn", "sgrsatt"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sgrsatt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sgrsatt\"", "created_at": 1705823512.251435}, "source.ods.banner__saturn.shrlgpa": {"database": "ods", "schema": "banner", "name": "shrlgpa", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.shrlgpa", "fqn": ["ods", "staging", "banner__saturn", "shrlgpa"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "shrlgpa", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"shrlgpa\"", "created_at": 1705823512.2514958}, "source.ods.banner__saturn.shrtgpa": {"database": "ods", "schema": "banner", "name": "shrtgpa", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.shrtgpa", "fqn": ["ods", "staging", "banner__saturn", "shrtgpa"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "shrtgpa", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"shrtgpa\"", "created_at": 1705823512.25155}, "source.ods.banner__saturn.shrtrce": {"database": "ods", "schema": "banner", "name": "shrtrce", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.shrtrce", "fqn": ["ods", "staging", "banner__saturn", "shrtrce"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "shrtrce", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"shrtrce\"", "created_at": 1705823512.251596}, "source.ods.banner__saturn.shrttrm": {"database": "ods", "schema": "banner", "name": "shrttrm", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.shrttrm", "fqn": ["ods", "staging", "banner__saturn", "shrttrm"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "shrttrm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"shrttrm\"", "created_at": 1705823512.251643}, "source.ods.banner__saturn.sorlcur": {"database": "ods", "schema": "banner", "name": "sorlcur", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sorlcur", "fqn": ["ods", "staging", "banner__saturn", "sorlcur"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sorlcur", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sorlcur\"", "created_at": 1705823512.251689}, "source.ods.banner__saturn.sorlfos": {"database": "ods", "schema": "banner", "name": "sorlfos", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.sorlfos", "fqn": ["ods", "staging", "banner__saturn", "sorlfos"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sorlfos", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sorlfos\"", "created_at": 1705823512.251734}, "source.ods.banner__saturn.stvastd": {"database": "ods", "schema": "banner", "name": "stvastd", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvastd", "fqn": ["ods", "staging", "banner__saturn", "stvastd"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvastd", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvastd\"", "created_at": 1705823512.251775}, "source.ods.banner__saturn.stvatts": {"database": "ods", "schema": "banner", "name": "stvatts", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvatts", "fqn": ["ods", "staging", "banner__saturn", "stvatts"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvatts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvatts\"", "created_at": 1705823512.251816}, "source.ods.banner__saturn.stvchrt": {"database": "ods", "schema": "banner", "name": "stvchrt", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvchrt", "fqn": ["ods", "staging", "banner__saturn", "stvchrt"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvchrt", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvchrt\"", "created_at": 1705823512.251859}, "source.ods.banner__saturn.stvclas": {"database": "ods", "schema": "banner", "name": "stvclas", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvclas", "fqn": ["ods", "staging", "banner__saturn", "stvclas"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvclas", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvclas\"", "created_at": 1705823512.2519}, "source.ods.banner__saturn.stvcoll": {"database": "ods", "schema": "banner", "name": "stvcoll", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvcoll", "fqn": ["ods", "staging", "banner__saturn", "stvcoll"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvcoll", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvcoll\"", "created_at": 1705823512.2519429}, "source.ods.banner__saturn.stvdept": {"database": "ods", "schema": "banner", "name": "stvdept", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvdept", "fqn": ["ods", "staging", "banner__saturn", "stvdept"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvdept", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvdept\"", "created_at": 1705823512.251982}, "source.ods.banner__saturn.stvests": {"database": "ods", "schema": "banner", "name": "stvests", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvests", "fqn": ["ods", "staging", "banner__saturn", "stvests"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvests", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvests\"", "created_at": 1705823512.2520242}, "source.ods.banner__saturn.stvlevl": {"database": "ods", "schema": "banner", "name": "stvlevl", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvlevl", "fqn": ["ods", "staging", "banner__saturn", "stvlevl"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvlevl", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvlevl\"", "created_at": 1705823512.252064}, "source.ods.banner__saturn.stvmajr": {"database": "ods", "schema": "banner", "name": "stvmajr", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvmajr", "fqn": ["ods", "staging", "banner__saturn", "stvmajr"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvmajr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner major types", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvmajr\"", "created_at": 1705823512.252105}, "source.ods.banner__saturn.stvrsts": {"database": "ods", "schema": "banner", "name": "stvrsts", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvrsts", "fqn": ["ods", "staging", "banner__saturn", "stvrsts"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvrsts", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvrsts\"", "created_at": 1705823512.252147}, "source.ods.banner__saturn.stvstyp": {"database": "ods", "schema": "banner", "name": "stvstyp", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvstyp", "fqn": ["ods", "staging", "banner__saturn", "stvstyp"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvstyp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvstyp\"", "created_at": 1705823512.252188}, "source.ods.banner__saturn.stvterm": {"database": "ods", "schema": "banner", "name": "stvterm", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.stvterm", "fqn": ["ods", "staging", "banner__saturn", "stvterm"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvterm", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvterm\"", "created_at": 1705823512.2522292}, "source.ods.banner__saturn.swbtded": {"database": "ods", "schema": "banner", "name": "swbtded", "resource_type": "source", "package_name": "ods", "path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "original_file_path": "domains/registrar/models/staging/_banner__registrar__sources.yml", "unique_id": "source.ods.banner__saturn.swbtded", "fqn": ["ods", "staging", "banner__saturn", "swbtded"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "swbtded", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"swbtded\"", "created_at": 1705823512.2522712}, "source.ods.banner__general.goremal": {"database": "ods", "schema": "banner", "name": "goremal", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__general.goremal", "fqn": ["ods", "staging", "banner", "banner__general", "goremal"], "source_name": "banner__general", "source_description": "", "loader": "", "identifier": "goremal", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner email address", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"goremal\"", "created_at": 1705823512.2523131}, "source.ods.banner__general.gtvemal": {"database": "ods", "schema": "banner", "name": "gtvemal", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__general.gtvemal", "fqn": ["ods", "staging", "banner", "banner__general", "gtvemal"], "source_name": "banner__general", "source_description": "", "loader": "", "identifier": "gtvemal", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner email type", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"gtvemal\"", "created_at": 1705823512.252357}, "source.ods.banner__saturn.spbpers": {"database": "ods", "schema": "banner", "name": "spbpers", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.spbpers", "fqn": ["ods", "staging", "banner", "banner__saturn", "spbpers"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "spbpers", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner personal detail", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"spbpers\"", "created_at": 1705823512.252397}, "source.ods.banner__saturn.spraddr": {"database": "ods", "schema": "banner", "name": "spraddr", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.spraddr", "fqn": ["ods", "staging", "banner", "banner__saturn", "spraddr"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "spraddr", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner physical address", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"spraddr\"", "created_at": 1705823512.252439}, "source.ods.banner__saturn.spriden": {"database": "ods", "schema": "banner", "name": "spriden", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.spriden", "fqn": ["ods", "staging", "banner", "banner__saturn", "spriden"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "spriden", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner ID and legal name", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"spriden\"", "created_at": 1705823512.252479}, "source.ods.banner__saturn.sprtele": {"database": "ods", "schema": "banner", "name": "sprtele", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.sprtele", "fqn": ["ods", "staging", "banner", "banner__saturn", "sprtele"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "sprtele", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner Telephone", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"sprtele\"", "created_at": 1705823512.252519}, "source.ods.banner__saturn.stvatyp": {"database": "ods", "schema": "banner", "name": "stvatyp", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.stvatyp", "fqn": ["ods", "staging", "banner", "banner__saturn", "stvatyp"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvatyp", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner address type code validation", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvatyp\"", "created_at": 1705823512.2525592}, "source.ods.banner__saturn.stvnatn": {"database": "ods", "schema": "banner", "name": "stvnatn", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.stvnatn", "fqn": ["ods", "staging", "banner", "banner__saturn", "stvnatn"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvnatn", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner nation code validation", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvnatn\"", "created_at": 1705823512.2526}, "source.ods.banner__saturn.stvstat": {"database": "ods", "schema": "banner", "name": "stvstat", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.stvstat", "fqn": ["ods", "staging", "banner", "banner__saturn", "stvstat"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvstat", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner state code validation", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvstat\"", "created_at": 1705823512.252641}, "source.ods.banner__saturn.stvtele": {"database": "ods", "schema": "banner", "name": "stvtele", "resource_type": "source", "package_name": "ods", "path": "domains/general/models/staging/banner/_banner__general__sources.yml", "original_file_path": "domains/general/models/staging/banner/_banner__general__sources.yml", "unique_id": "source.ods.banner__saturn.stvtele", "fqn": ["ods", "staging", "banner", "banner__saturn", "stvtele"], "source_name": "banner__saturn", "source_description": "", "loader": "", "identifier": "stvtele", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "Banner phone code validation", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "\"ods\".\"banner\".\"stvtele\"", "created_at": 1705823512.252681}}, "macros": {"macro.dbt_duckdb.duckdb__get_binding_char": {"name": "duckdb__get_binding_char", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_binding_char", "macro_sql": "{% macro duckdb__get_binding_char() %}\n  {{ return(adapter.get_binding_char()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.170177, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_batch_size": {"name": "duckdb__get_batch_size", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_batch_size", "macro_sql": "{% macro duckdb__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1702888, "supported_languages": null}, "macro.dbt_duckdb.duckdb__load_csv_rows": {"name": "duckdb__load_csv_rows", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/seed.sql", "original_file_path": "macros/seed.sql", "unique_id": "macro.dbt_duckdb.duckdb__load_csv_rows", "macro_sql": "{% macro duckdb__load_csv_rows(model, agate_table) %}\n    {% if config.get('fast', true) %}\n        {% set seed_file_path = adapter.get_seed_file_path(model) %}\n        {% set delimiter = config.get('delimiter', ',') %}\n        {% set sql %}\n          COPY {{ this.render() }} FROM '{{ seed_file_path }}' (FORMAT CSV, HEADER TRUE, DELIMITER '{{ delimiter }}')\n        {% endset %}\n        {% do adapter.add_query(sql, abridge_sql_log=True) %}\n        {{ return(sql) }}\n    {% endif %}\n\n    {% set batch_size = get_batch_size() %}\n    {% set agate_table = adapter.convert_datetimes_to_strs(agate_table) %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    {{ get_binding_char() }}\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.171849, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_merge_sql": {"name": "duckdb__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_merge_sql", "macro_sql": "{% macro duckdb__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    update {{ target }} as DBT_INTERNAL_TARGET\n    set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_scd_id::text = DBT_INTERNAL_TARGET.dbt_scd_id::text\n      and DBT_INTERNAL_SOURCE.dbt_change_type::text in ('update'::text, 'delete'::text)\n      and DBT_INTERNAL_TARGET.dbt_valid_to is null;\n\n    insert into {{ target }} ({{ insert_cols_csv }})\n    select {% for column in insert_cols -%}\n        DBT_INTERNAL_SOURCE.{{ column }} {%- if not loop.last %}, {%- endif %}\n    {%- endfor %}\n    from {{ source }} as DBT_INTERNAL_SOURCE\n    where DBT_INTERNAL_SOURCE.dbt_change_type::text = 'insert'::text;\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.172517, "supported_languages": null}, "macro.dbt_duckdb.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(False, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.172815, "supported_languages": null}, "macro.dbt_duckdb.duckdb__post_snapshot": {"name": "duckdb__post_snapshot", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/snapshot_helper.sql", "original_file_path": "macros/snapshot_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__post_snapshot", "macro_sql": "{% macro duckdb__post_snapshot(staging_relation) %}\n    {% do return(drop_relation(staging_relation)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.172927, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_catalog": {"name": "duckdb__get_catalog", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_catalog", "macro_sql": "{% macro duckdb__get_catalog(information_schema, schemas) -%}\n  {%- call statement('catalog', fetch_result=True) -%}\n    select\n        '{{ database }}' as table_database,\n        t.table_schema,\n        t.table_name,\n        t.table_type,\n        '' as table_comment,\n        c.column_name,\n        c.ordinal_position as column_index,\n        c.data_type column_type,\n        '' as column_comment,\n        '' as table_owner\n    FROM information_schema.tables t JOIN information_schema.columns c ON t.table_schema = c.table_schema AND t.table_name = c.table_name\n    WHERE (\n        {%- for schema in schemas -%}\n          upper(t.table_schema) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n    )\n    AND t.table_type IN ('BASE TABLE', 'VIEW')\n    ORDER BY\n        t.table_schema,\n        t.table_name,\n        c.ordinal_position\n  {%- endcall -%}\n  {{ return(load_result('catalog').table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.173401, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_schema": {"name": "duckdb__create_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_schema", "macro_sql": "{% macro duckdb__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1789498, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_schema": {"name": "duckdb__drop_schema", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_schema", "macro_sql": "{% macro duckdb__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {%- endcall -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.179074, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_schemas": {"name": "duckdb__list_schemas", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_schemas", "macro_sql": "{% macro duckdb__list_schemas(database) -%}\n  {% set sql %}\n    select schema_name\n    from system.information_schema.schemata\n    {% if database is not none %}\n    where catalog_name = '{{ database }}'\n    {% endif %}\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.17926, "supported_languages": null}, "macro.dbt_duckdb.duckdb__check_schema_exists": {"name": "duckdb__check_schema_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__check_schema_exists", "macro_sql": "{% macro duckdb__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from system.information_schema.schemata\n        where schema_name = '{{ schema }}'\n        and catalog_name = '{{ information_schema.database }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1794329, "supported_languages": null}, "macro.dbt_duckdb.get_column_names": {"name": "get_column_names", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.get_column_names", "macro_sql": "{% macro get_column_names() %}\n  {# loop through user_provided_columns to get column names #}\n    {%- set user_provided_columns = model['columns'] -%}\n    (\n    {% for i in user_provided_columns %}\n      {% set col = user_provided_columns[i] %}\n      {{ col['name'] }} {{ \",\" if not loop.last }}\n    {% endfor %}\n  )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.179714, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_table_as": {"name": "duckdb__create_table_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_table_as", "macro_sql": "{% macro duckdb__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(compiled_code) }}\n    {% endif %}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n    create {% if temporary: -%}temporary{%- endif %} table\n      {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% if contract_config.enforced and not temporary %}\n    {#-- DuckDB doesnt support constraints on temp tables --#}\n    {{ get_table_columns_and_constraints() }} ;\n    insert into {{ relation }} {{ get_column_names() }} (\n      {{ get_select_subquery(compiled_code) }}\n    );\n  {% else %}\n    as (\n      {{ compiled_code }}\n    );\n  {% endif %}\n  {%- elif language == 'python' -%}\n    {{ py_write_table(temporary=temporary, relation=relation, compiled_code=compiled_code) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"duckdb__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt_duckdb.get_column_names", "macro.dbt.get_select_subquery", "macro.dbt_duckdb.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1804311, "supported_languages": null}, "macro.dbt_duckdb.py_write_table": {"name": "py_write_table", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.py_write_table", "macro_sql": "{% macro py_write_table(temporary, relation, compiled_code) -%}\n{{ compiled_code }}\n\ndef materialize(df, con):\n    try:\n        import pyarrow\n        pyarrow_available = True\n    except ImportError:\n        pyarrow_available = False\n    finally:\n        if pyarrow_available and isinstance(df, pyarrow.Table):\n            # https://github.com/duckdb/duckdb/issues/6584\n            import pyarrow.dataset\n    con.execute('create table {{ relation }} as select * from df')\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.180555, "supported_languages": null}, "macro.dbt_duckdb.duckdb__create_view_as": {"name": "duckdb__create_view_as", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__create_view_as", "macro_sql": "{% macro duckdb__create_view_as(relation, sql) -%}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced %}\n    {{ get_assert_columns_equivalent(sql) }}\n  {%- endif %}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.180844, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_columns_in_relation": {"name": "duckdb__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_columns_in_relation", "macro_sql": "{% macro duckdb__get_columns_in_relation(relation) -%}\n  {% call statement('get_columns_in_relation', fetch_result=True) %}\n      select\n          column_name,\n          data_type,\n          character_maximum_length,\n          numeric_precision,\n          numeric_scale\n\n      from system.information_schema.columns\n      where table_name = '{{ relation.identifier }}'\n      {% if relation.schema %}\n      and table_schema = '{{ relation.schema }}'\n      {% endif %}\n      {% if relation.database %}\n      and table_catalog = '{{ relation.database }}'\n      {% endif %}\n      order by ordinal_position\n\n  {% endcall %}\n  {% set table = load_result('get_columns_in_relation').table %}\n  {{ return(sql_convert_columns_in_relation(table)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.sql_convert_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1811829, "supported_languages": null}, "macro.dbt_duckdb.duckdb__list_relations_without_caching": {"name": "duckdb__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__list_relations_without_caching", "macro_sql": "{% macro duckdb__list_relations_without_caching(schema_relation) %}\n  {% call statement('list_relations_without_caching', fetch_result=True) -%}\n    select\n      '{{ schema_relation.database }}' as database,\n      table_name as name,\n      table_schema as schema,\n      CASE table_type\n        WHEN 'BASE TABLE' THEN 'table'\n        WHEN 'VIEW' THEN 'view'\n        WHEN 'LOCAL TEMPORARY' THEN 'table'\n        END as type\n    from system.information_schema.tables\n    where table_schema = '{{ schema_relation.schema }}'\n    and table_catalog = '{{ schema_relation.database }}'\n  {% endcall %}\n  {{ return(load_result('list_relations_without_caching').table) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.181428, "supported_languages": null}, "macro.dbt_duckdb.duckdb__drop_relation": {"name": "duckdb__drop_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__drop_relation", "macro_sql": "{% macro duckdb__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.181582, "supported_languages": null}, "macro.dbt_duckdb.duckdb__rename_relation": {"name": "duckdb__rename_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__rename_relation", "macro_sql": "{% macro duckdb__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter {{ to_relation.type }} {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1817951, "supported_languages": null}, "macro.dbt_duckdb.duckdb__make_temp_relation": {"name": "duckdb__make_temp_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__make_temp_relation", "macro_sql": "{% macro duckdb__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix ~ py_current_timestring() %}\n    {% do return(base_relation.incorporate(\n                                  path={\n                                    \"identifier\": tmp_identifier,\n                                    \"schema\": none,\n                                    \"database\": none\n                                  })) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.py_current_timestring"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.182116, "supported_languages": null}, "macro.dbt_duckdb.duckdb__current_timestamp": {"name": "duckdb__current_timestamp", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__current_timestamp", "macro_sql": "{% macro duckdb__current_timestamp() -%}\n  now()\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1821718, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_string_as_time": {"name": "duckdb__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_string_as_time", "macro_sql": "{% macro duckdb__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"'\" ~ timestamp ~ \"'::timestamp\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.182295, "supported_languages": null}, "macro.dbt_duckdb.duckdb__snapshot_get_time": {"name": "duckdb__snapshot_get_time", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__snapshot_get_time", "macro_sql": "{% macro duckdb__snapshot_get_time() -%}\n  {{ current_timestamp() }}::timestamp\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.18237, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_incremental_default_sql": {"name": "duckdb__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_incremental_default_sql", "macro_sql": "{% macro duckdb__get_incremental_default_sql(arg_dict) %}\n  {% do return(get_incremental_delete_insert_sql(arg_dict)) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1824782, "supported_languages": null}, "macro.dbt_duckdb.location_exists": {"name": "location_exists", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.location_exists", "macro_sql": "{% macro location_exists(location) -%}\n  {% do return(adapter.location_exists(location)) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.182584, "supported_languages": null}, "macro.dbt_duckdb.write_to_file": {"name": "write_to_file", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.write_to_file", "macro_sql": "{% macro write_to_file(relation, location, options) -%}\n  {% call statement('write_to_file') -%}\n    copy {{ relation }} to '{{ location }}' ({{ options }})\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.182733, "supported_languages": null}, "macro.dbt_duckdb.store_relation": {"name": "store_relation", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.store_relation", "macro_sql": "{% macro store_relation(plugin, relation, location, format, config) -%}\n  {%- set column_list = adapter.get_columns_in_relation(relation) -%}\n  {% do adapter.store_relation(plugin, relation, column_list, location, format, config) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.182935, "supported_languages": null}, "macro.dbt_duckdb.render_write_options": {"name": "render_write_options", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "unique_id": "macro.dbt_duckdb.render_write_options", "macro_sql": "{% macro render_write_options(config) -%}\n  {% set options = config.get('options', {}) %}\n  {% if options is not mapping %}\n    {% do exceptions.raise_compiler_error(\"The options argument must be a dictionary\") %}\n  {% endif %}\n\n  {% for k in options %}\n    {% set _ = options.update({k: render(options[k])}) %}\n  {% endfor %}\n\n  {# legacy top-level write options #}\n  {% if config.get('format') %}\n    {% set _ = options.update({'format': render(config.get('format'))}) %}\n  {% endif %}\n  {% if config.get('delimiter') %}\n    {% set _ = options.update({'delimiter': render(config.get('delimiter'))}) %}\n  {% endif %}\n\n  {% do return(options) %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.183605, "supported_languages": null}, "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql": {"name": "duckdb__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/incremental_helper.sql", "original_file_path": "macros/incremental_helper.sql", "unique_id": "macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql", "macro_sql": "{% macro duckdb__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }} as DBT_INCREMENTAL_TARGET\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = DBT_INCREMENTAL_TARGET.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1850939, "supported_languages": null}, "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns": {"name": "duckdb__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/columns.sql", "original_file_path": "macros/columns.sql", "unique_id": "macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns", "macro_sql": "{% macro duckdb__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n    {% for column in add_columns %}\n      {% set sql -%}\n         alter {{ relation.type }} {{ relation }} add column\n           {{ column.name }} {{ column.data_type }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n  {% if remove_columns %}\n    {% for column in remove_columns %}\n      {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n          {{ column.name }}\n      {%- endset -%}\n      {% do run_query(sql) %}\n    {% endfor %}\n  {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.185759, "supported_languages": null}, "macro.dbt_duckdb.materialization_table_duckdb": {"name": "materialization_table_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "unique_id": "macro.dbt_duckdb.materialization_table_duckdb", "macro_sql": "{% materialization table, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set language = model['language'] -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main', language=language) -%}\n    {{- create_table_as(False, intermediate_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.187706, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_external_duckdb": {"name": "materialization_external_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/external.sql", "original_file_path": "macros/materializations/external.sql", "unique_id": "macro.dbt_duckdb.materialization_external_duckdb", "macro_sql": "{% materialization external, adapter=\"duckdb\", supported_languages=['sql', 'python'] %}\n\n  {%- set location = render(config.get('location', default=external_location(this, config))) -%})\n  {%- set rendered_options = render_write_options(config) -%}\n  {%- set format = config.get('format', 'parquet') -%}\n  {%- set write_options = adapter.external_write_options(location, rendered_options) -%}\n  {%- set read_location = adapter.external_read_location(location, rendered_options) -%}\n\n  -- set language - python or sql\n  {%- set language = model['language'] -%}\n\n  {%- set target_relation = this.incorporate(type='view') %}\n\n  -- Continue as normal materialization\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set temp_relation =  make_intermediate_relation(this.incorporate(type='table'), suffix='__dbt_tmp') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation, suffix='__dbt_int') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_temp_relation = load_cached_relation(temp_relation) -%}\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_temp_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('create_table', language=language) -%}\n    {{- create_table_as(False, temp_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  -- write an temp relation into file\n  {{ write_to_file(temp_relation, location, write_options) }}\n  -- create a view on top of the location\n  {% call statement('main', language='sql') -%}\n    create or replace view {{ intermediate_relation }} as (\n        select * from '{{ read_location }}'\n    );\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n  {{ drop_relation_if_exists(temp_relation) }}\n\n  -- register table into glue\n  {%- set plugin_name = config.get('plugin') -%}\n  {%- set glue_register = config.get('glue_register', default=false) -%}\n  {% if plugin_name is not none or glue_register is true %}\n    {% if glue_register %}\n      {# legacy hack to set the glue database name, deprecate this #}\n      {%- set plugin_name = 'glue|' ~ config.get('glue_database', 'default') -%}\n    {% endif %}\n    {% do store_relation(plugin_name, target_relation, location, format, config) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_duckdb.write_to_file", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_duckdb.store_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1913788, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.materialization_incremental_duckdb": {"name": "materialization_incremental_duckdb", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "unique_id": "macro.dbt_duckdb.materialization_incremental_duckdb", "macro_sql": "{% materialization incremental, adapter=\"duckdb\", supported_languages=['sql', 'python'] -%}\n\n  {%- set language = model['language'] -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, compiled_code, language) %}\n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, intermediate_relation, compiled_code, language) %}\n    {% set need_swap = true %}\n  {% else %}\n    {% if language == 'python' %}\n      {% set build_python = create_table_as(False, temp_relation, compiled_code, language) %}\n      {% call statement(\"pre\", language=language) %}\n        {{- build_python }}\n      {% endcall %}\n    {% else %} {# SQL #}\n      {% do run_query(create_table_as(True, temp_relation, compiled_code, language)) %}\n    {% endif %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n    {% set language = \"sql\" %}\n\n  {% endif %}\n\n  {% call statement(\"main\", language=language) %}\n      {{- build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.statement", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.195491, "supported_languages": ["sql", "python"]}, "macro.dbt_duckdb.duckdb__dateadd": {"name": "duckdb__dateadd", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt_duckdb.duckdb__dateadd", "macro_sql": "{% macro duckdb__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.195699, "supported_languages": null}, "macro.dbt_duckdb.duckdb__listagg": {"name": "duckdb__listagg", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt_duckdb.duckdb__listagg", "macro_sql": "{% macro duckdb__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    {% if limit_num -%}\n    list_aggr(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        'string_agg',\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1961331, "supported_languages": null}, "macro.dbt_duckdb.duckdb__datediff": {"name": "duckdb__datediff", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt_duckdb.duckdb__datediff", "macro_sql": "{% macro duckdb__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.1982982, "supported_languages": null}, "macro.dbt_duckdb.duckdb__any_value": {"name": "duckdb__any_value", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt_duckdb.duckdb__any_value", "macro_sql": "{% macro duckdb__any_value(expression) -%}\n\n    arbitrary({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.198518, "supported_languages": null}, "macro.dbt_duckdb.register_upstream_external_models": {"name": "register_upstream_external_models", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/upstream.sql", "original_file_path": "macros/utils/upstream.sql", "unique_id": "macro.dbt_duckdb.register_upstream_external_models", "macro_sql": "{%- macro register_upstream_external_models() -%}\n{% if execute %}\n{% set upstream_nodes = {} %}\n{% set upstream_schemas = {} %}\n{% for node in selected_resources %}\n  {% for upstream_node in graph['nodes'][node]['depends_on']['nodes'] %}\n    {% if upstream_node not in upstream_nodes and upstream_node not in selected_resources %}\n      {% do upstream_nodes.update({upstream_node: None}) %}\n      {% set upstream = graph['nodes'].get(upstream_node) %}\n      {% if upstream\n         and upstream.resource_type in ('model', 'seed')\n         and upstream.config.materialized=='external'\n      %}\n        {%- set upstream_rel = api.Relation.create(\n          database=upstream['database'],\n          schema=upstream['schema'],\n          identifier=upstream['alias']\n        ) -%}\n        {%- set location = upstream.config.get('location', external_location(upstream_rel, upstream.config)) -%}\n        {%- set rendered_options = render_write_options(upstream.config) -%}\n        {%- set upstream_location = adapter.external_read_location(location, rendered_options) -%}\n        {% if upstream_rel.schema not in upstream_schemas %}\n          {% call statement('main', language='sql') -%}\n            create schema if not exists {{ upstream_rel.schema }}\n          {%- endcall %}\n          {% do upstream_schemas.update({upstream_rel.schema: None}) %}\n        {% endif %}\n        {% call statement('main', language='sql') -%}\n          create or replace view {{ upstream_rel }} as (\n            select * from '{{ upstream_location }}'\n          );\n        {%- endcall %}\n      {%- endif %}\n    {% endif %}\n  {% endfor %}\n{% endfor %}\n{% do adapter.commit() %}\n{% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_duckdb.external_location", "macro.dbt_duckdb.render_write_options", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.200235, "supported_languages": null}, "macro.dbt_duckdb.duckdb__split_part": {"name": "duckdb__split_part", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/splitpart.sql", "original_file_path": "macros/utils/splitpart.sql", "unique_id": "macro.dbt_duckdb.duckdb__split_part", "macro_sql": "{% macro duckdb__split_part(string_text, delimiter_text, part_number) %}\n    string_split({{ string_text }}, {{ delimiter_text }})[ {{ part_number }} ]\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.200423, "supported_languages": null}, "macro.dbt_duckdb.duckdb__last_day": {"name": "duckdb__last_day", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/lastday.sql", "original_file_path": "macros/utils/lastday.sql", "unique_id": "macro.dbt_duckdb.duckdb__last_day", "macro_sql": "{% macro duckdb__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- duckdb dateadd does not support quarter interval.\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd('month', '3', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc", "macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.200803, "supported_languages": null}, "macro.dbt_duckdb.external_location": {"name": "external_location", "resource_type": "macro", "package_name": "dbt_duckdb", "path": "macros/utils/external_location.sql", "original_file_path": "macros/utils/external_location.sql", "unique_id": "macro.dbt_duckdb.external_location", "macro_sql": "{%- macro external_location(relation, config) -%}\n  {%- if config.get('options', {}).get('partition_by') is none -%}\n    {%- set format = config.get('format', 'parquet') -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}.{{ format }}\n  {%- else -%}\n    {{- adapter.external_root() }}/{{ relation.identifier }}\n  {%- endif -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.201192, "supported_languages": null}, "macro.dbt.run_hooks": {"name": "run_hooks", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.201893, "supported_languages": null}, "macro.dbt.make_hook_config": {"name": "make_hook_config", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.202018, "supported_languages": null}, "macro.dbt.before_begin": {"name": "before_begin", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.202112, "supported_languages": null}, "macro.dbt.in_transaction": {"name": "in_transaction", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2022028, "supported_languages": null}, "macro.dbt.after_commit": {"name": "after_commit", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "unique_id": "macro.dbt.after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.202297, "supported_languages": null}, "macro.dbt.set_sql_header": {"name": "set_sql_header", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2025511, "supported_languages": null}, "macro.dbt.should_full_refresh": {"name": "should_full_refresh", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.202742, "supported_languages": null}, "macro.dbt.should_store_failures": {"name": "should_store_failures", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "unique_id": "macro.dbt.should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.202934, "supported_languages": null}, "macro.dbt.snapshot_merge_sql": {"name": "snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2032142, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"name": "default__snapshot_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "unique_id": "macro.dbt.default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.203394, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"name": "strategy_dispatch", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2056901, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"name": "snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2058072, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"name": "default__snapshot_hash_arguments", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.20595, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"name": "snapshot_timestamp_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.206403, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"name": "snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.206507, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"name": "default__snapshot_string_as_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.206629, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"name": "snapshot_check_all_get_existing_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n            {#-- N.B. The whitespace below is necessary to avoid edge case issue with comments --#}\n            {#-- See: https://github.com/dbt-labs/dbt-core/issues/6781 --#}\n            select {{ check_cols_config | join(', ') }} from (\n                {{ node['compiled_code'] }}\n            ) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2076101, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"name": "snapshot_check_strategy", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "unique_id": "macro.dbt.snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2084212, "supported_languages": null}, "macro.dbt.create_columns": {"name": "create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.211081, "supported_languages": null}, "macro.dbt.default__create_columns": {"name": "default__create_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.211277, "supported_languages": null}, "macro.dbt.post_snapshot": {"name": "post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.211392, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"name": "default__post_snapshot", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2114549, "supported_languages": null}, "macro.dbt.get_true_sql": {"name": "get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.211555, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"name": "default__get_true_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.211637, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"name": "snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.211769, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"name": "default__snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2123468, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"name": "build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.212467, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"name": "default__build_snapshot_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.212627, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"name": "build_snapshot_staging_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "unique_id": "macro.dbt.build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2128901, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"name": "materialization_snapshot_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "unique_id": "macro.dbt.materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.216969, "supported_languages": ["sql"]}, "macro.dbt.materialization_test_default": {"name": "materialization_test_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "unique_id": "macro.dbt.materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n    {% set store_failures_as = config.get('store_failures_as') %}\n    -- if `--store-failures` is invoked via command line and `store_failures_as` is not set,\n    -- config.get('store_failures_as', 'table') returns None, not 'table'\n    {% if store_failures_as == none %}{% set store_failures_as = 'table' %}{% endif %}\n    {% if store_failures_as not in ['table', 'view'] %}\n        {{ exceptions.raise_compiler_error(\n            \"'\" ~ store_failures_as ~ \"' is not a valid value for `store_failures_as`. \"\n            \"Accepted values are: ['ephemeral', 'table', 'view']\"\n        ) }}\n    {% endif %}\n\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type=store_failures_as) -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ get_create_sql(target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.get_create_sql", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.218818, "supported_languages": ["sql"]}, "macro.dbt.get_test_sql": {"name": "get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.219136, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"name": "default__get_test_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "unique_id": "macro.dbt.default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2193549, "supported_languages": null}, "macro.dbt.get_where_subquery": {"name": "get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2196102, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"name": "default__get_where_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "unique_id": "macro.dbt.default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2198489, "supported_languages": null}, "macro.dbt.materialization_materialized_view_default": {"name": "materialization_materialized_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialization_materialized_view_default", "macro_sql": "{% materialization materialized_view, default %}\n    {% set existing_relation = load_cached_relation(this) %}\n    {% set target_relation = this.incorporate(type=this.MaterializedView) %}\n    {% set intermediate_relation = make_intermediate_relation(target_relation) %}\n    {% set backup_relation_type = target_relation.MaterializedView if existing_relation is none else existing_relation.type %}\n    {% set backup_relation = make_backup_relation(target_relation, backup_relation_type) %}\n\n    {{ materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) }}\n\n        {% set build_sql = materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n        {% if build_sql == '' %}\n            {{ materialized_view_execute_no_op(target_relation) }}\n        {% else %}\n            {{ materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) }}\n        {% endif %}\n\n    {{ materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) }}\n\n    {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.materialized_view_setup", "macro.dbt.materialized_view_get_build_sql", "macro.dbt.materialized_view_execute_no_op", "macro.dbt.materialized_view_execute_build_sql", "macro.dbt.materialized_view_teardown"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.223305, "supported_languages": ["sql"]}, "macro.dbt.materialized_view_setup": {"name": "materialized_view_setup", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_setup", "macro_sql": "{% macro materialized_view_setup(backup_relation, intermediate_relation, pre_hooks) %}\n\n    -- backup_relation and intermediate_relation should not already exist in the database\n    -- it's possible these exist because of a previous run that exited unexpectedly\n    {% set preexisting_backup_relation = load_cached_relation(backup_relation) %}\n    {% set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) %}\n\n    -- drop the temp relations if they exist already in the database\n    {{ drop_relation_if_exists(preexisting_backup_relation) }}\n    {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n\n    {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.223549, "supported_languages": null}, "macro.dbt.materialized_view_teardown": {"name": "materialized_view_teardown", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_teardown", "macro_sql": "{% macro materialized_view_teardown(backup_relation, intermediate_relation, post_hooks) %}\n\n    -- drop the temp relations if they exist to leave the database clean for the next run\n    {{ drop_relation_if_exists(backup_relation) }}\n    {{ drop_relation_if_exists(intermediate_relation) }}\n\n    {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.223712, "supported_languages": null}, "macro.dbt.materialized_view_get_build_sql": {"name": "materialized_view_get_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_get_build_sql", "macro_sql": "{% macro materialized_view_get_build_sql(existing_relation, target_relation, backup_relation, intermediate_relation) %}\n\n    {% set full_refresh_mode = should_full_refresh() %}\n\n    -- determine the scenario we're in: create, full_refresh, alter, refresh data\n    {% if existing_relation is none %}\n        {% set build_sql = get_create_materialized_view_as_sql(target_relation, sql) %}\n    {% elif full_refresh_mode or not existing_relation.is_materialized_view %}\n        {% set build_sql = get_replace_sql(existing_relation, target_relation, sql) %}\n    {% else %}\n\n        -- get config options\n        {% set on_configuration_change = config.get('on_configuration_change') %}\n        {% set configuration_changes = get_materialized_view_configuration_changes(existing_relation, config) %}\n\n        {% if configuration_changes is none %}\n            {% set build_sql = refresh_materialized_view(target_relation) %}\n\n        {% elif on_configuration_change == 'apply' %}\n            {% set build_sql = get_alter_materialized_view_as_sql(target_relation, configuration_changes, sql, existing_relation, backup_relation, intermediate_relation) %}\n        {% elif on_configuration_change == 'continue' %}\n            {% set build_sql = '' %}\n            {{ exceptions.warn(\"Configuration changes were identified and `on_configuration_change` was set to `continue` for `\" ~ target_relation ~ \"`\") }}\n        {% elif on_configuration_change == 'fail' %}\n            {{ exceptions.raise_fail_fast_error(\"Configuration changes were identified and `on_configuration_change` was set to `fail` for `\" ~ target_relation ~ \"`\") }}\n\n        {% else %}\n            -- this only happens if the user provides a value other than `apply`, 'skip', 'fail'\n            {{ exceptions.raise_compiler_error(\"Unexpected configuration scenario\") }}\n\n        {% endif %}\n\n    {% endif %}\n\n    {% do return(build_sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.get_create_materialized_view_as_sql", "macro.dbt.get_replace_sql", "macro.dbt.get_materialized_view_configuration_changes", "macro.dbt.refresh_materialized_view", "macro.dbt.get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.224531, "supported_languages": null}, "macro.dbt.materialized_view_execute_no_op": {"name": "materialized_view_execute_no_op", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_no_op", "macro_sql": "{% macro materialized_view_execute_no_op(target_relation) %}\n    {% do store_raw_result(\n        name=\"main\",\n        message=\"skip \" ~ target_relation,\n        code=\"skip\",\n        rows_affected=\"-1\"\n    ) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.224681, "supported_languages": null}, "macro.dbt.materialized_view_execute_build_sql": {"name": "materialized_view_execute_build_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/materialized_view.sql", "original_file_path": "macros/materializations/models/materialized_view.sql", "unique_id": "macro.dbt.materialized_view_execute_build_sql", "macro_sql": "{% macro materialized_view_execute_build_sql(build_sql, existing_relation, target_relation, post_hooks) %}\n\n    -- `BEGIN` happens here:\n    {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n    {% set grant_config = config.get('grants') %}\n\n    {% call statement(name=\"main\") %}\n        {{ build_sql }}\n    {% endcall %}\n\n    {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n    {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n    {% do persist_docs(target_relation, model) %}\n\n    {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n    {{ adapter.commit() }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.225116, "supported_languages": null}, "macro.dbt.materialization_view_default": {"name": "materialization_view_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/view.sql", "original_file_path": "macros/materializations/models/view.sql", "unique_id": "macro.dbt.materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.22706, "supported_languages": ["sql"]}, "macro.dbt.materialization_table_default": {"name": "materialization_table_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/table.sql", "original_file_path": "macros/materializations/models/table.sql", "unique_id": "macro.dbt.materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n     /* Do the equivalent of rename_if_exists. 'existing_relation' could have been dropped\n        since the variable was first set. */\n    {% set existing_relation = load_cached_relation(existing_relation) %}\n    {% if existing_relation is not none %}\n        {{ adapter.rename_relation(existing_relation, backup_relation) }}\n    {% endif %}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.228987, "supported_languages": ["sql"]}, "macro.dbt.get_quoted_csv": {"name": "get_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.230122, "supported_languages": null}, "macro.dbt.diff_columns": {"name": "diff_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2304928, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"name": "diff_column_data_types", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.230934, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"name": "get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2310882, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"name": "default__get_merge_update_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "unique_id": "macro.dbt.default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.23153, "supported_languages": null}, "macro.dbt.get_merge_sql": {"name": "get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n   -- back compat for old kwarg name\n  {% set incremental_predicates = kwargs.get('predicates', incremental_predicates) %}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.235821, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"name": "default__get_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, incremental_predicates=none) -%}\n    {%- set predicates = [] if incremental_predicates is none else [] + incremental_predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{\"(\" ~ predicates | join(\") and (\") ~ \")\"}}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2371259, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"name": "get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns, incremental_predicates) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.237296, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"name": "default__get_delete_insert_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns, incremental_predicates) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last}}\n                {% endfor %}\n                {% if incremental_predicates %}\n                    {% for predicate in incremental_predicates %}\n                        and {{ predicate }}\n                    {% endfor %}\n                {% endif %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            )\n            {%- if incremental_predicates %}\n                {% for predicate in incremental_predicates %}\n                    and {{ predicate }}\n                {% endfor %}\n            {%- endif -%};\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.23793, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"name": "get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2381032, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"name": "default__get_insert_overwrite_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.238521, "supported_languages": null}, "macro.dbt.is_incremental": {"name": "is_incremental", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "unique_id": "macro.dbt.is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.238952, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"name": "get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2395892, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"name": "default__get_incremental_append_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.239747, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"name": "get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2398798, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"name": "default__get_incremental_delete_insert_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.240077, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"name": "get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.240203, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"name": "default__get_incremental_merge_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.240402, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"name": "get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.24053, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"name": "default__get_incremental_insert_overwrite_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"incremental_predicates\"])) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.240704, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"name": "get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.240822, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"name": "default__get_incremental_default_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.240913, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"name": "get_insert_into_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/strategies.sql", "original_file_path": "macros/materializations/models/incremental/strategies.sql", "unique_id": "macro.dbt.get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.241097, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"name": "materialization_incremental_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "unique_id": "macro.dbt.materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('predicates', none) or config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'incremental_predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.265818, "supported_languages": ["sql"]}, "macro.dbt.incremental_validate_on_schema_change": {"name": "incremental_validate_on_schema_change", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2695181, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"name": "check_for_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.270334, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"name": "sync_column_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.27115, "supported_languages": null}, "macro.dbt.process_schema_changes": {"name": "process_schema_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "unique_id": "macro.dbt.process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.271725, "supported_languages": null}, "macro.dbt.can_clone_table": {"name": "can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.can_clone_table", "macro_sql": "{% macro can_clone_table() %}\n    {{ return(adapter.dispatch('can_clone_table', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__can_clone_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.27188, "supported_languages": null}, "macro.dbt.default__can_clone_table": {"name": "default__can_clone_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/can_clone_table.sql", "original_file_path": "macros/materializations/models/clone/can_clone_table.sql", "unique_id": "macro.dbt.default__can_clone_table", "macro_sql": "{% macro default__can_clone_table() %}\n    {{ return(False) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2719538, "supported_languages": null}, "macro.dbt.create_or_replace_clone": {"name": "create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.create_or_replace_clone", "macro_sql": "{% macro create_or_replace_clone(this_relation, defer_relation) %}\n    {{ return(adapter.dispatch('create_or_replace_clone', 'dbt')(this_relation, defer_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_or_replace_clone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2721379, "supported_languages": null}, "macro.dbt.default__create_or_replace_clone": {"name": "default__create_or_replace_clone", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/create_or_replace_clone.sql", "original_file_path": "macros/materializations/models/clone/create_or_replace_clone.sql", "unique_id": "macro.dbt.default__create_or_replace_clone", "macro_sql": "{% macro default__create_or_replace_clone(this_relation, defer_relation) %}\n    create or replace table {{ this_relation }} clone {{ defer_relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.272228, "supported_languages": null}, "macro.dbt.materialization_clone_default": {"name": "materialization_clone_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/models/clone/clone.sql", "original_file_path": "macros/materializations/models/clone/clone.sql", "unique_id": "macro.dbt.materialization_clone_default", "macro_sql": "{%- materialization clone, default -%}\n\n  {%- set relations = {'relations': []} -%}\n\n  {%- if not defer_relation -%}\n      -- nothing to do\n      {{ log(\"No relation found in state manifest for \" ~ model.unique_id, info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n\n  {%- if existing_relation and not flags.FULL_REFRESH -%}\n      -- noop!\n      {{ log(\"Relation \" ~ existing_relation ~ \" already exists\", info=True) }}\n      {{ return(relations) }}\n  {%- endif -%}\n\n  {%- set other_existing_relation = load_cached_relation(defer_relation) -%}\n\n  -- If this is a database that can do zero-copy cloning of tables, and the other relation is a table, then this will be a table\n  -- Otherwise, this will be a view\n\n  {% set can_clone_table = can_clone_table() %}\n\n  {%- if other_existing_relation and other_existing_relation.type == 'table' and can_clone_table -%}\n\n      {%- set target_relation = this.incorporate(type='table') -%}\n      {% if existing_relation is not none and not existing_relation.is_table %}\n        {{ log(\"Dropping relation \" ~ existing_relation ~ \" because it is of type \" ~ existing_relation.type) }}\n        {{ drop_relation_if_exists(existing_relation) }}\n      {% endif %}\n\n      -- as a general rule, data platforms that can clone tables can also do atomic 'create or replace'\n      {% call statement('main') %}\n          {% if target_relation and defer_relation and target_relation == defer_relation %}\n              {{ log(\"Target relation and defer relation are the same, skipping clone for relation: \" ~ target_relation) }}\n          {% else %}\n              {{ create_or_replace_clone(target_relation, defer_relation) }}\n          {% endif %}\n\n      {% endcall %}\n\n      {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n      {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n      {% do persist_docs(target_relation, model) %}\n\n      {{ return({'relations': [target_relation]}) }}\n\n  {%- else -%}\n\n      {%- set target_relation = this.incorporate(type='view') -%}\n\n      -- reuse the view materialization\n      -- TODO: support actual dispatch for materialization macros\n      -- Tracking ticket: https://github.com/dbt-labs/dbt-core/issues/7799\n      {% set search_name = \"materialization_view_\" ~ adapter.type() %}\n      {% if not search_name in context %}\n          {% set search_name = \"materialization_view_default\" %}\n      {% endif %}\n      {% set materialization_macro = context[search_name] %}\n      {% set relations = materialization_macro() %}\n      {{ return(relations) }}\n\n  {%- endif -%}\n\n{%- endmaterialization -%}", "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.can_clone_table", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_or_replace_clone", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.274654, "supported_languages": ["sql"]}, "macro.dbt.materialization_seed_default": {"name": "materialization_seed_default", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "unique_id": "macro.dbt.materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparison later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.276788, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"name": "create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.280288, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"name": "default__create_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.280873, "supported_languages": null}, "macro.dbt.reset_csv_table": {"name": "reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2810209, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"name": "default__reset_csv_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.281318, "supported_languages": null}, "macro.dbt.get_csv_sql": {"name": "get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.281437, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"name": "default__get_csv_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2815192, "supported_languages": null}, "macro.dbt.get_binding_char": {"name": "get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.281609, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"name": "default__get_binding_char", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2816792, "supported_languages": null}, "macro.dbt.get_batch_size": {"name": "get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.281777, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"name": "default__get_batch_size", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.28185, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"name": "get_seed_column_quoted_csv", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2821429, "supported_languages": null}, "macro.dbt.load_csv_rows": {"name": "load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2823198, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"name": "default__load_csv_rows", "resource_type": "macro", "package_name": "dbt", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "unique_id": "macro.dbt.default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.283113, "supported_languages": null}, "macro.dbt.generate_alias_name": {"name": "generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2834098, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"name": "default__generate_alias_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "unique_id": "macro.dbt.default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- elif node.version -%}\n\n        {{ return(node.name ~ \"_v\" ~ (node.version | replace(\".\", \"_\"))) }}\n\n    {%- else -%}\n\n        {{ node.name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.283674, "supported_languages": null}, "macro.dbt.generate_schema_name": {"name": "generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.284041, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"name": "default__generate_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2842371, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"name": "generate_schema_name_for_env", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "unique_id": "macro.dbt.generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.28444, "supported_languages": null}, "macro.dbt.generate_database_name": {"name": "generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.284718, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"name": "default__generate_database_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "unique_id": "macro.dbt.default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2849002, "supported_languages": null}, "macro.dbt.get_drop_sql": {"name": "get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.get_drop_sql", "macro_sql": "{%- macro get_drop_sql(relation) -%}\n    {{- log('Applying DROP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2854002, "supported_languages": null}, "macro.dbt.default__get_drop_sql": {"name": "default__get_drop_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__get_drop_sql", "macro_sql": "{%- macro default__get_drop_sql(relation) -%}\n\n    {%- if relation.is_view -%}\n        {{ drop_view(relation) }}\n\n    {%- elif relation.is_table -%}\n        {{ drop_table(relation) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ drop_materialized_view(relation) }}\n\n    {%- else -%}\n        drop {{ relation.type }} if exists {{ relation }} cascade\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.drop_view", "macro.dbt.drop_table", "macro.dbt.drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.285671, "supported_languages": null}, "macro.dbt.drop_relation": {"name": "drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n    {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2857862, "supported_languages": null}, "macro.dbt.default__drop_relation": {"name": "default__drop_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n    {% call statement('drop_relation', auto_begin=False) -%}\n        {{ get_drop_sql(relation) }}\n    {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.285909, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"name": "drop_relation_if_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop.sql", "original_file_path": "macros/relations/drop.sql", "unique_id": "macro.dbt.drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.286041, "supported_languages": null}, "macro.dbt.get_replace_sql": {"name": "get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.get_replace_sql", "macro_sql": "{% macro get_replace_sql(existing_relation, target_relation, sql) %}\n    {{- log('Applying REPLACE to: ' ~ existing_relation) -}}\n    {{- adapter.dispatch('get_replace_sql', 'dbt')(existing_relation, target_relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.286588, "supported_languages": null}, "macro.dbt.default__get_replace_sql": {"name": "default__get_replace_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/replace.sql", "original_file_path": "macros/relations/replace.sql", "unique_id": "macro.dbt.default__get_replace_sql", "macro_sql": "{% macro default__get_replace_sql(existing_relation, target_relation, sql) %}\n\n    {# /* use a create or replace statement if possible */ #}\n\n    {% set is_replaceable = existing_relation.type == target_relation_type and existing_relation.can_be_replaced %}\n\n    {% if is_replaceable and existing_relation.is_view %}\n        {{ get_replace_view_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_table %}\n        {{ get_replace_table_sql(target_relation, sql) }}\n\n    {% elif is_replaceable and existing_relation.is_materialized_view %}\n        {{ get_replace_materialized_view_sql(target_relation, sql) }}\n\n    {# /* a create or replace statement is not possible, so try to stage and/or backup to be safe */ #}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one using a backup */ #}\n    {%- elif target_relation.can_be_renamed and existing_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* create target_relation as an intermediate relation, then swap it out with the existing one without using a backup */ #}\n    {%- elif target_relation.can_be_renamed -%}\n        {{ get_create_intermediate_sql(target_relation, sql) }};\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_rename_intermediate_sql(target_relation) }}\n\n    {# /* create target_relation in place by first backing up the existing relation */ #}\n    {%- elif existing_relation.can_be_renamed -%}\n        {{ get_create_backup_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }};\n        {{ get_drop_backup_sql(existing_relation) }}\n\n    {# /* no renaming is allowed, so just drop and create */ #}\n    {%- else -%}\n        {{ get_drop_sql(existing_relation) }};\n        {{ get_create_sql(target_relation, sql) }}\n\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_replace_view_sql", "macro.dbt.get_replace_table_sql", "macro.dbt.get_replace_materialized_view_sql", "macro.dbt.get_create_intermediate_sql", "macro.dbt.get_create_backup_sql", "macro.dbt.get_rename_intermediate_sql", "macro.dbt.get_drop_backup_sql", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2873442, "supported_languages": null}, "macro.dbt.get_create_intermediate_sql": {"name": "get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.get_create_intermediate_sql", "macro_sql": "{%- macro get_create_intermediate_sql(relation, sql) -%}\n    {{- log('Applying CREATE INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_intermediate_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.287586, "supported_languages": null}, "macro.dbt.default__get_create_intermediate_sql": {"name": "default__get_create_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_intermediate.sql", "original_file_path": "macros/relations/create_intermediate.sql", "unique_id": "macro.dbt.default__get_create_intermediate_sql", "macro_sql": "{%- macro default__get_create_intermediate_sql(relation, sql) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    -- drop any pre-existing intermediate\n    {{ get_drop_sql(intermediate_relation) }};\n\n    {{ get_create_sql(intermediate_relation, sql) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.287759, "supported_languages": null}, "macro.dbt.get_drop_backup_sql": {"name": "get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.get_drop_backup_sql", "macro_sql": "{%- macro get_drop_backup_sql(relation) -%}\n    {{- log('Applying DROP BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_drop_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_drop_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.287982, "supported_languages": null}, "macro.dbt.default__get_drop_backup_sql": {"name": "default__get_drop_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/drop_backup.sql", "original_file_path": "macros/relations/drop_backup.sql", "unique_id": "macro.dbt.default__get_drop_backup_sql", "macro_sql": "{%- macro default__get_drop_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    {{ get_drop_sql(backup_relation) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.288121, "supported_languages": null}, "macro.dbt.get_rename_sql": {"name": "get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.get_rename_sql", "macro_sql": "{%- macro get_rename_sql(relation, new_name) -%}\n    {{- log('Applying RENAME to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_sql', 'dbt')(relation, new_name) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.288618, "supported_languages": null}, "macro.dbt.default__get_rename_sql": {"name": "default__get_rename_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__get_rename_sql", "macro_sql": "{%- macro default__get_rename_sql(relation, new_name) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_rename_view_sql(relation, new_name) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_rename_table_sql(relation, new_name) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_rename_materialized_view_sql(relation, new_name) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_rename_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.get_rename_view_sql", "macro.dbt.get_rename_table_sql", "macro.dbt.get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2889102, "supported_languages": null}, "macro.dbt.rename_relation": {"name": "rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.28905, "supported_languages": null}, "macro.dbt.default__rename_relation": {"name": "default__rename_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename.sql", "original_file_path": "macros/relations/rename.sql", "unique_id": "macro.dbt.default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.289245, "supported_languages": null}, "macro.dbt.get_create_backup_sql": {"name": "get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.get_create_backup_sql", "macro_sql": "{%- macro get_create_backup_sql(relation) -%}\n    {{- log('Applying CREATE BACKUP to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_backup_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_backup_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.289492, "supported_languages": null}, "macro.dbt.default__get_create_backup_sql": {"name": "default__get_create_backup_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create_backup.sql", "original_file_path": "macros/relations/create_backup.sql", "unique_id": "macro.dbt.default__get_create_backup_sql", "macro_sql": "{%- macro default__get_create_backup_sql(relation) -%}\n\n    -- get the standard backup name\n    {% set backup_relation = make_backup_relation(relation, relation.type) %}\n\n    -- drop any pre-existing backup\n    {{ get_drop_sql(backup_relation) }};\n\n    {{ get_rename_sql(relation, backup_relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_backup_relation", "macro.dbt.get_drop_sql", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.289676, "supported_languages": null}, "macro.dbt.get_create_sql": {"name": "get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.get_create_sql", "macro_sql": "{%- macro get_create_sql(relation, sql) -%}\n    {{- log('Applying CREATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_create_sql', 'dbt')(relation, sql) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_create_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.290001, "supported_languages": null}, "macro.dbt.default__get_create_sql": {"name": "default__get_create_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/create.sql", "original_file_path": "macros/relations/create.sql", "unique_id": "macro.dbt.default__get_create_sql", "macro_sql": "{%- macro default__get_create_sql(relation, sql) -%}\n\n    {%- if relation.is_view -%}\n        {{ get_create_view_as_sql(relation, sql) }}\n\n    {%- elif relation.is_table -%}\n        {{ get_create_table_as_sql(False, relation, sql) }}\n\n    {%- elif relation.is_materialized_view -%}\n        {{ get_create_materialized_view_as_sql(relation, sql) }}\n\n    {%- else -%}\n        {{- exceptions.raise_compiler_error(\"`get_create_sql` has not been implemented for: \" ~ relation.type ) -}}\n\n    {%- endif -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.get_create_view_as_sql", "macro.dbt.get_create_table_as_sql", "macro.dbt.get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.290387, "supported_languages": null}, "macro.dbt.get_rename_intermediate_sql": {"name": "get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.get_rename_intermediate_sql", "macro_sql": "{%- macro get_rename_intermediate_sql(relation) -%}\n    {{- log('Applying RENAME INTERMEDIATE to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_rename_intermediate_sql', 'dbt')(relation) -}}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": ["macro.dbt.default__get_rename_intermediate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.290634, "supported_languages": null}, "macro.dbt.default__get_rename_intermediate_sql": {"name": "default__get_rename_intermediate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/rename_intermediate.sql", "original_file_path": "macros/relations/rename_intermediate.sql", "unique_id": "macro.dbt.default__get_rename_intermediate_sql", "macro_sql": "{%- macro default__get_rename_intermediate_sql(relation) -%}\n\n    -- get the standard intermediate name\n    {% set intermediate_relation = make_intermediate_relation(relation) %}\n\n    {{ get_rename_sql(intermediate_relation, relation.identifier) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.make_intermediate_relation", "macro.dbt.get_rename_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.290773, "supported_languages": null}, "macro.dbt.drop_materialized_view": {"name": "drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.drop_materialized_view", "macro_sql": "{% macro drop_materialized_view(relation) -%}\n    {{ return(adapter.dispatch('drop_materialized_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.290952, "supported_languages": null}, "macro.dbt.default__drop_materialized_view": {"name": "default__drop_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/drop.sql", "original_file_path": "macros/relations/materialized_view/drop.sql", "unique_id": "macro.dbt.default__drop_materialized_view", "macro_sql": "{% macro default__drop_materialized_view(relation) -%}\n    drop materialized view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.291023, "supported_languages": null}, "macro.dbt.get_replace_materialized_view_sql": {"name": "get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.get_replace_materialized_view_sql", "macro_sql": "{% macro get_replace_materialized_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_materialized_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2911959, "supported_languages": null}, "macro.dbt.default__get_replace_materialized_view_sql": {"name": "default__get_replace_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/replace.sql", "original_file_path": "macros/relations/materialized_view/replace.sql", "unique_id": "macro.dbt.default__get_replace_materialized_view_sql", "macro_sql": "{% macro default__get_replace_materialized_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.291293, "supported_languages": null}, "macro.dbt.refresh_materialized_view": {"name": "refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.refresh_materialized_view", "macro_sql": "{% macro refresh_materialized_view(relation) %}\n    {{- log('Applying REFRESH to: ' ~ relation) -}}\n    {{- adapter.dispatch('refresh_materialized_view', 'dbt')(relation) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__refresh_materialized_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.291487, "supported_languages": null}, "macro.dbt.default__refresh_materialized_view": {"name": "default__refresh_materialized_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/refresh.sql", "original_file_path": "macros/relations/materialized_view/refresh.sql", "unique_id": "macro.dbt.default__refresh_materialized_view", "macro_sql": "{% macro default__refresh_materialized_view(relation) %}\n    {{ exceptions.raise_compiler_error(\"`refresh_materialized_view` has not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2915719, "supported_languages": null}, "macro.dbt.get_rename_materialized_view_sql": {"name": "get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.get_rename_materialized_view_sql", "macro_sql": "{% macro get_rename_materialized_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_materialized_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_materialized_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2917812, "supported_languages": null}, "macro.dbt.default__get_rename_materialized_view_sql": {"name": "default__get_rename_materialized_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/rename.sql", "original_file_path": "macros/relations/materialized_view/rename.sql", "unique_id": "macro.dbt.default__get_rename_materialized_view_sql", "macro_sql": "{% macro default__get_rename_materialized_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_materialized_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.291889, "supported_languages": null}, "macro.dbt.get_alter_materialized_view_as_sql": {"name": "get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_alter_materialized_view_as_sql", "macro_sql": "{% macro get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{- log('Applying ALTER to: ' ~ relation) -}}\n    {{- adapter.dispatch('get_alter_materialized_view_as_sql', 'dbt')(\n        relation,\n        configuration_changes,\n        sql,\n        existing_relation,\n        backup_relation,\n        intermediate_relation\n    ) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_alter_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.292375, "supported_languages": null}, "macro.dbt.default__get_alter_materialized_view_as_sql": {"name": "default__get_alter_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_alter_materialized_view_as_sql", "macro_sql": "{% macro default__get_alter_materialized_view_as_sql(\n    relation,\n    configuration_changes,\n    sql,\n    existing_relation,\n    backup_relation,\n    intermediate_relation\n) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.292536, "supported_languages": null}, "macro.dbt.get_materialized_view_configuration_changes": {"name": "get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.get_materialized_view_configuration_changes", "macro_sql": "{% macro get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    /* {#\n    It's recommended that configuration changes be formatted as follows:\n    {\"<change_category>\": [{\"action\": \"<name>\", \"context\": ...}]}\n\n    For example:\n    {\n        \"indexes\": [\n            {\"action\": \"drop\", \"context\": \"index_abc\"},\n            {\"action\": \"create\", \"context\": {\"columns\": [\"column_1\", \"column_2\"], \"type\": \"hash\", \"unique\": True}},\n        ],\n    }\n\n    Either way, `get_materialized_view_configuration_changes` needs to align with `get_alter_materialized_view_as_sql`.\n    #} */\n    {{- log('Determining configuration changes on: ' ~ existing_relation) -}}\n    {%- do return(adapter.dispatch('get_materialized_view_configuration_changes', 'dbt')(existing_relation, new_config)) -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_materialized_view_configuration_changes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.292753, "supported_languages": null}, "macro.dbt.default__get_materialized_view_configuration_changes": {"name": "default__get_materialized_view_configuration_changes", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/alter.sql", "original_file_path": "macros/relations/materialized_view/alter.sql", "unique_id": "macro.dbt.default__get_materialized_view_configuration_changes", "macro_sql": "{% macro default__get_materialized_view_configuration_changes(existing_relation, new_config) %}\n    {{ exceptions.raise_compiler_error(\"Materialized views have not been implemented for this adapter.\") }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.292848, "supported_languages": null}, "macro.dbt.get_create_materialized_view_as_sql": {"name": "get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.get_create_materialized_view_as_sql", "macro_sql": "{% macro get_create_materialized_view_as_sql(relation, sql) -%}\n    {{- adapter.dispatch('get_create_materialized_view_as_sql', 'dbt')(relation, sql) -}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_materialized_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.293028, "supported_languages": null}, "macro.dbt.default__get_create_materialized_view_as_sql": {"name": "default__get_create_materialized_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/materialized_view/create.sql", "original_file_path": "macros/relations/materialized_view/create.sql", "unique_id": "macro.dbt.default__get_create_materialized_view_as_sql", "macro_sql": "{% macro default__get_create_materialized_view_as_sql(relation, sql) -%}\n    {{ exceptions.raise_compiler_error(\n        \"`get_create_materialized_view_as_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.293122, "supported_languages": null}, "macro.dbt.get_table_columns_and_constraints": {"name": "get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_table_columns_and_constraints", "macro_sql": "{%- macro get_table_columns_and_constraints() -%}\n  {{ adapter.dispatch('get_table_columns_and_constraints', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.293795, "supported_languages": null}, "macro.dbt.default__get_table_columns_and_constraints": {"name": "default__get_table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_table_columns_and_constraints", "macro_sql": "{% macro default__get_table_columns_and_constraints() -%}\n  {{ return(table_columns_and_constraints()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.table_columns_and_constraints"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.293879, "supported_languages": null}, "macro.dbt.table_columns_and_constraints": {"name": "table_columns_and_constraints", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.table_columns_and_constraints", "macro_sql": "{% macro table_columns_and_constraints() %}\n  {# loop through user_provided_columns to create DDL with data types and constraints #}\n    {%- set raw_column_constraints = adapter.render_raw_columns_constraints(raw_columns=model['columns']) -%}\n    {%- set raw_model_constraints = adapter.render_raw_model_constraints(raw_constraints=model['constraints']) -%}\n    (\n    {% for c in raw_column_constraints -%}\n      {{ c }}{{ \",\" if not loop.last or raw_model_constraints }}\n    {% endfor %}\n    {% for c in raw_model_constraints -%}\n        {{ c }}{{ \",\" if not loop.last }}\n    {% endfor -%}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.294241, "supported_languages": null}, "macro.dbt.get_assert_columns_equivalent": {"name": "get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.get_assert_columns_equivalent", "macro_sql": "\n\n{%- macro get_assert_columns_equivalent(sql) -%}\n  {{ adapter.dispatch('get_assert_columns_equivalent', 'dbt')(sql) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.294357, "supported_languages": null}, "macro.dbt.default__get_assert_columns_equivalent": {"name": "default__get_assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__get_assert_columns_equivalent", "macro_sql": "{% macro default__get_assert_columns_equivalent(sql) -%}\n  {{ return(assert_columns_equivalent(sql)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.294451, "supported_languages": null}, "macro.dbt.assert_columns_equivalent": {"name": "assert_columns_equivalent", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.assert_columns_equivalent", "macro_sql": "{% macro assert_columns_equivalent(sql) %}\n\n  {#-- First ensure the user has defined 'columns' in yaml specification --#}\n  {%- set user_defined_columns = model['columns'] -%}\n  {%- if not user_defined_columns -%}\n      {{ exceptions.raise_contract_error([], []) }}\n  {%- endif -%}\n\n  {#-- Obtain the column schema provided by sql file. #}\n  {%- set sql_file_provided_columns = get_column_schema_from_query(sql, config.get('sql_header', none)) -%}\n  {#--Obtain the column schema provided by the schema file by generating an 'empty schema' query from the model's columns. #}\n  {%- set schema_file_provided_columns = get_column_schema_from_query(get_empty_schema_sql(user_defined_columns)) -%}\n\n  {#-- create dictionaries with name and formatted data type and strings for exception #}\n  {%- set sql_columns = format_columns(sql_file_provided_columns) -%}\n  {%- set yaml_columns = format_columns(schema_file_provided_columns)  -%}\n\n  {%- if sql_columns|length != yaml_columns|length -%}\n    {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n  {%- endif -%}\n\n  {%- for sql_col in sql_columns -%}\n    {%- set yaml_col = [] -%}\n    {%- for this_col in yaml_columns -%}\n      {%- if this_col['name'] == sql_col['name'] -%}\n        {%- do yaml_col.append(this_col) -%}\n        {%- break -%}\n      {%- endif -%}\n    {%- endfor -%}\n    {%- if not yaml_col -%}\n      {#-- Column with name not found in yaml #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n    {%- if sql_col['formatted'] != yaml_col[0]['formatted'] -%}\n      {#-- Column data types don't match #}\n      {%- do exceptions.raise_contract_error(yaml_columns, sql_columns) -%}\n    {%- endif -%}\n  {%- endfor -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_column_schema_from_query", "macro.dbt.get_empty_schema_sql", "macro.dbt.format_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.295306, "supported_languages": null}, "macro.dbt.format_columns": {"name": "format_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.format_columns", "macro_sql": "{% macro format_columns(columns) %}\n  {% set formatted_columns = [] %}\n  {% for column in columns %}\n    {%- set formatted_column = adapter.dispatch('format_column', 'dbt')(column) -%}\n    {%- do formatted_columns.append(formatted_column) -%}\n  {% endfor %}\n  {{ return(formatted_columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column", "macro.dbt.default__format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.295639, "supported_languages": null}, "macro.dbt.default__format_column": {"name": "default__format_column", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/column/columns_spec_ddl.sql", "original_file_path": "macros/relations/column/columns_spec_ddl.sql", "unique_id": "macro.dbt.default__format_column", "macro_sql": "{% macro default__format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2958772, "supported_languages": null}, "macro.dbt.drop_table": {"name": "drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.drop_table", "macro_sql": "{% macro drop_table(relation) -%}\n    {{ return(adapter.dispatch('drop_table', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.296062, "supported_languages": null}, "macro.dbt.default__drop_table": {"name": "default__drop_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/drop.sql", "original_file_path": "macros/relations/table/drop.sql", "unique_id": "macro.dbt.default__drop_table", "macro_sql": "{% macro default__drop_table(relation) -%}\n    drop table if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.296134, "supported_languages": null}, "macro.dbt.get_replace_table_sql": {"name": "get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.get_replace_table_sql", "macro_sql": "{% macro get_replace_table_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_table_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.296319, "supported_languages": null}, "macro.dbt.default__get_replace_table_sql": {"name": "default__get_replace_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/replace.sql", "original_file_path": "macros/relations/table/replace.sql", "unique_id": "macro.dbt.default__get_replace_table_sql", "macro_sql": "{% macro default__get_replace_table_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.29642, "supported_languages": null}, "macro.dbt.get_rename_table_sql": {"name": "get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.get_rename_table_sql", "macro_sql": "{% macro get_rename_table_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_table_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_table_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.296604, "supported_languages": null}, "macro.dbt.default__get_rename_table_sql": {"name": "default__get_rename_table_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/rename.sql", "original_file_path": "macros/relations/table/rename.sql", "unique_id": "macro.dbt.default__get_rename_table_sql", "macro_sql": "{% macro default__get_rename_table_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_table_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2967072, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"name": "get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2972631, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"name": "default__get_create_table_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2973819, "supported_languages": null}, "macro.dbt.create_table_as": {"name": "create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.297651, "supported_languages": null}, "macro.dbt.default__create_table_as": {"name": "default__create_table_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  {% set contract_config = config.get('contract') %}\n  {% if contract_config.enforced and (not temporary) %}\n    {{ get_assert_columns_equivalent(sql) }}\n    {{ get_table_columns_and_constraints() }}\n    {%- set sql = get_select_subquery(sql) %}\n  {% endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent", "macro.dbt.get_table_columns_and_constraints", "macro.dbt.get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.298131, "supported_languages": null}, "macro.dbt.default__get_column_names": {"name": "default__get_column_names", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_column_names", "macro_sql": "{% macro default__get_column_names() %}\n  {#- loop through user_provided_columns to get column names -#}\n    {%- set user_provided_columns = model['columns'] -%}\n    {%- for i in user_provided_columns %}\n      {%- set col = user_provided_columns[i] -%}\n      {%- set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] -%}\n      {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2984471, "supported_languages": null}, "macro.dbt.get_select_subquery": {"name": "get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.get_select_subquery", "macro_sql": "{% macro get_select_subquery(sql) %}\n  {{ return(adapter.dispatch('get_select_subquery', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_select_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.298583, "supported_languages": null}, "macro.dbt.default__get_select_subquery": {"name": "default__get_select_subquery", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/table/create.sql", "original_file_path": "macros/relations/table/create.sql", "unique_id": "macro.dbt.default__get_select_subquery", "macro_sql": "{% macro default__get_select_subquery(sql) %}\n    select {{ adapter.dispatch('get_column_names', 'dbt')() }}\n    from (\n        {{ sql }}\n    ) as model_subq\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.get_column_names", "macro.dbt.default__get_column_names"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2987149, "supported_languages": null}, "macro.dbt.drop_view": {"name": "drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.drop_view", "macro_sql": "{% macro drop_view(relation) -%}\n    {{ return(adapter.dispatch('drop_view', 'dbt')(relation)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__drop_view"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.298903, "supported_languages": null}, "macro.dbt.default__drop_view": {"name": "default__drop_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/drop.sql", "original_file_path": "macros/relations/view/drop.sql", "unique_id": "macro.dbt.default__drop_view", "macro_sql": "{% macro default__drop_view(relation) -%}\n    drop view if exists {{ relation }} cascade\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.298976, "supported_languages": null}, "macro.dbt.get_replace_view_sql": {"name": "get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.get_replace_view_sql", "macro_sql": "{% macro get_replace_view_sql(relation, sql) %}\n    {{- adapter.dispatch('get_replace_view_sql', 'dbt')(relation, sql) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_replace_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.299593, "supported_languages": null}, "macro.dbt.default__get_replace_view_sql": {"name": "default__get_replace_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__get_replace_view_sql", "macro_sql": "{% macro default__get_replace_view_sql(relation, sql) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_replace_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.2996962, "supported_languages": null}, "macro.dbt.create_or_replace_view": {"name": "create_or_replace_view", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.300451, "supported_languages": null}, "macro.dbt.handle_existing_table": {"name": "handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.300589, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"name": "default__handle_existing_table", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/replace.sql", "original_file_path": "macros/relations/view/replace.sql", "unique_id": "macro.dbt.default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3007329, "supported_languages": null}, "macro.dbt.get_rename_view_sql": {"name": "get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.get_rename_view_sql", "macro_sql": "{% macro get_rename_view_sql(relation, new_name) %}\n    {{- adapter.dispatch('get_rename_view_sql', 'dbt')(relation, new_name) -}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_rename_view_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.300905, "supported_languages": null}, "macro.dbt.default__get_rename_view_sql": {"name": "default__get_rename_view_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/rename.sql", "original_file_path": "macros/relations/view/rename.sql", "unique_id": "macro.dbt.default__get_rename_view_sql", "macro_sql": "{% macro default__get_rename_view_sql(relation, new_name) %}\n    {{ exceptions.raise_compiler_error(\n        \"`get_rename_view_sql` has not been implemented for this adapter.\"\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3010151, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"name": "get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.301284, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"name": "default__get_create_view_as_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.301383, "supported_languages": null}, "macro.dbt.create_view_as": {"name": "create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.301496, "supported_languages": null}, "macro.dbt.default__create_view_as": {"name": "default__create_view_as", "resource_type": "macro", "package_name": "dbt", "path": "macros/relations/view/create.sql", "original_file_path": "macros/relations/view/create.sql", "unique_id": "macro.dbt.default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }}\n    {% set contract_config = config.get('contract') %}\n    {% if contract_config.enforced %}\n      {{ get_assert_columns_equivalent(sql) }}\n    {%- endif %}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.get_assert_columns_equivalent"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.301827, "supported_languages": null}, "macro.dbt.default__test_relationships": {"name": "default__test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "unique_id": "macro.dbt.default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.302055, "supported_languages": null}, "macro.dbt.default__test_not_null": {"name": "default__test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "unique_id": "macro.dbt.default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.30224, "supported_languages": null}, "macro.dbt.default__test_unique": {"name": "default__test_unique", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "unique_id": "macro.dbt.default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.302397, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"name": "default__test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "unique_id": "macro.dbt.default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.302764, "supported_languages": null}, "macro.dbt.statement": {"name": "statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3037708, "supported_languages": null}, "macro.dbt.noop_statement": {"name": "noop_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.304173, "supported_languages": null}, "macro.dbt.run_query": {"name": "run_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "unique_id": "macro.dbt.run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.304393, "supported_languages": null}, "macro.dbt.convert_datetime": {"name": "convert_datetime", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.305771, "supported_languages": null}, "macro.dbt.dates_in_range": {"name": "dates_in_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partition start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.306565, "supported_languages": null}, "macro.dbt.partition_range": {"name": "partition_range", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3070662, "supported_languages": null}, "macro.dbt.py_current_timestring": {"name": "py_current_timestring", "resource_type": "macro", "package_name": "dbt", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "unique_id": "macro.dbt.py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.30723, "supported_languages": null}, "macro.dbt.except": {"name": "except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.307384, "supported_languages": null}, "macro.dbt.default__except": {"name": "default__except", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/except.sql", "original_file_path": "macros/utils/except.sql", "unique_id": "macro.dbt.default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3074381, "supported_languages": null}, "macro.dbt.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.307931, "supported_languages": null}, "macro.dbt.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3082938, "supported_languages": null}, "macro.dbt.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.308438, "supported_languages": null}, "macro.dbt.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_spine.sql", "original_file_path": "macros/utils/date_spine.sql", "unique_id": "macro.dbt.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n    {# call as follows:\n\n    date_spine(\n        \"day\",\n        \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n        \"dbt.dateadd(week, 1, current_date)\"\n    ) #}\n\n\n    with rawdata as (\n\n        {{dbt.generate_series(\n            dbt.get_intervals_between(start_date, end_date, datepart)\n        )}}\n\n    ),\n\n    all_periods as (\n\n        select (\n            {{\n                dbt.dateadd(\n                    datepart,\n                    \"row_number() over (order by 1) - 1\",\n                    start_date\n                )\n            }}\n        ) as date_{{datepart}}\n        from rawdata\n\n    ),\n\n    filtered as (\n\n        select *\n        from all_periods\n        where date_{{datepart}} <= {{ end_date }}\n\n    )\n\n    select * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.generate_series", "macro.dbt.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.308667, "supported_languages": null}, "macro.dbt.replace": {"name": "replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3088908, "supported_languages": null}, "macro.dbt.default__replace": {"name": "default__replace", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/replace.sql", "original_file_path": "macros/utils/replace.sql", "unique_id": "macro.dbt.default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.309004, "supported_languages": null}, "macro.dbt.concat": {"name": "concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.309172, "supported_languages": null}, "macro.dbt.default__concat": {"name": "default__concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/concat.sql", "original_file_path": "macros/utils/concat.sql", "unique_id": "macro.dbt.default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3092558, "supported_languages": null}, "macro.dbt.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.309845, "supported_languages": null}, "macro.dbt.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.310136, "supported_languages": null}, "macro.dbt.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.310267, "supported_languages": null}, "macro.dbt.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/generate_series.sql", "original_file_path": "macros/utils/generate_series.sql", "unique_id": "macro.dbt.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.310691, "supported_languages": null}, "macro.dbt.length": {"name": "length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.310865, "supported_languages": null}, "macro.dbt.default__length": {"name": "default__length", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/length.sql", "original_file_path": "macros/utils/length.sql", "unique_id": "macro.dbt.default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3109388, "supported_languages": null}, "macro.dbt.dateadd": {"name": "dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3111732, "supported_languages": null}, "macro.dbt.default__dateadd": {"name": "default__dateadd", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/dateadd.sql", "original_file_path": "macros/utils/dateadd.sql", "unique_id": "macro.dbt.default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.311286, "supported_languages": null}, "macro.dbt.intersect": {"name": "intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3114371, "supported_languages": null}, "macro.dbt.default__intersect": {"name": "default__intersect", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/intersect.sql", "original_file_path": "macros/utils/intersect.sql", "unique_id": "macro.dbt.default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.31149, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"name": "escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.31167, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"name": "default__escape_single_quotes", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/escape_single_quotes.sql", "original_file_path": "macros/utils/escape_single_quotes.sql", "unique_id": "macro.dbt.default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.311757, "supported_languages": null}, "macro.dbt.right": {"name": "right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.311939, "supported_languages": null}, "macro.dbt.default__right": {"name": "default__right", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/right.sql", "original_file_path": "macros/utils/right.sql", "unique_id": "macro.dbt.default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.312027, "supported_languages": null}, "macro.dbt.listagg": {"name": "listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.312424, "supported_languages": null}, "macro.dbt.default__listagg": {"name": "default__listagg", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/listagg.sql", "original_file_path": "macros/utils/listagg.sql", "unique_id": "macro.dbt.default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.312684, "supported_languages": null}, "macro.dbt.datediff": {"name": "datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.312917, "supported_languages": null}, "macro.dbt.default__datediff": {"name": "default__datediff", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/datediff.sql", "original_file_path": "macros/utils/datediff.sql", "unique_id": "macro.dbt.default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.313028, "supported_languages": null}, "macro.dbt.safe_cast": {"name": "safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3132238, "supported_languages": null}, "macro.dbt.default__safe_cast": {"name": "default__safe_cast", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/safe_cast.sql", "original_file_path": "macros/utils/safe_cast.sql", "unique_id": "macro.dbt.default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.313319, "supported_languages": null}, "macro.dbt.hash": {"name": "hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3134909, "supported_languages": null}, "macro.dbt.default__hash": {"name": "default__hash", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/hash.sql", "original_file_path": "macros/utils/hash.sql", "unique_id": "macro.dbt.default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3135989, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"name": "cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.313766, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"name": "default__cast_bool_to_text", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/cast_bool_to_text.sql", "original_file_path": "macros/utils/cast_bool_to_text.sql", "unique_id": "macro.dbt.default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.313874, "supported_languages": null}, "macro.dbt.any_value": {"name": "any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.31404, "supported_languages": null}, "macro.dbt.default__any_value": {"name": "default__any_value", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/any_value.sql", "original_file_path": "macros/utils/any_value.sql", "unique_id": "macro.dbt.default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.314111, "supported_languages": null}, "macro.dbt.position": {"name": "position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.314307, "supported_languages": null}, "macro.dbt.default__position": {"name": "default__position", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/position.sql", "original_file_path": "macros/utils/position.sql", "unique_id": "macro.dbt.default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.314402, "supported_languages": null}, "macro.dbt.string_literal": {"name": "string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3145669, "supported_languages": null}, "macro.dbt.default__string_literal": {"name": "default__string_literal", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/literal.sql", "original_file_path": "macros/utils/literal.sql", "unique_id": "macro.dbt.default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.314635, "supported_languages": null}, "macro.dbt.type_string": {"name": "type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.31536, "supported_languages": null}, "macro.dbt.default__type_string": {"name": "default__type_string", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3154628, "supported_languages": null}, "macro.dbt.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.315569, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.31567, "supported_languages": null}, "macro.dbt.type_float": {"name": "type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3157701, "supported_languages": null}, "macro.dbt.default__type_float": {"name": "default__type_float", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3158631, "supported_languages": null}, "macro.dbt.type_numeric": {"name": "type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.315964, "supported_languages": null}, "macro.dbt.default__type_numeric": {"name": "default__type_numeric", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316072, "supported_languages": null}, "macro.dbt.type_bigint": {"name": "type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316177, "supported_languages": null}, "macro.dbt.default__type_bigint": {"name": "default__type_bigint", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316274, "supported_languages": null}, "macro.dbt.type_int": {"name": "type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316375, "supported_languages": null}, "macro.dbt.default__type_int": {"name": "default__type_int", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316465, "supported_languages": null}, "macro.dbt.type_boolean": {"name": "type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316563, "supported_languages": null}, "macro.dbt.default__type_boolean": {"name": "default__type_boolean", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/data_types.sql", "original_file_path": "macros/utils/data_types.sql", "unique_id": "macro.dbt.default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316651, "supported_languages": null}, "macro.dbt.array_concat": {"name": "array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.316842, "supported_languages": null}, "macro.dbt.default__array_concat": {"name": "default__array_concat", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_concat.sql", "original_file_path": "macros/utils/array_concat.sql", "unique_id": "macro.dbt.default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3169332, "supported_languages": null}, "macro.dbt.bool_or": {"name": "bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.317099, "supported_languages": null}, "macro.dbt.default__bool_or": {"name": "default__bool_or", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/bool_or.sql", "original_file_path": "macros/utils/bool_or.sql", "unique_id": "macro.dbt.default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3171709, "supported_languages": null}, "macro.dbt.last_day": {"name": "last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.317406, "supported_languages": null}, "macro.dbt.default_last_day": {"name": "default_last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3175838, "supported_languages": null}, "macro.dbt.default__last_day": {"name": "default__last_day", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/last_day.sql", "original_file_path": "macros/utils/last_day.sql", "unique_id": "macro.dbt.default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.317685, "supported_languages": null}, "macro.dbt.split_part": {"name": "split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.318041, "supported_languages": null}, "macro.dbt.default__split_part": {"name": "default__split_part", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt.default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.318155, "supported_languages": null}, "macro.dbt._split_part_negative": {"name": "_split_part_negative", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/split_part.sql", "original_file_path": "macros/utils/split_part.sql", "unique_id": "macro.dbt._split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 + {{ part_number }}\n        )\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.318308, "supported_languages": null}, "macro.dbt.date_trunc": {"name": "date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.318492, "supported_languages": null}, "macro.dbt.default__date_trunc": {"name": "default__date_trunc", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/date_trunc.sql", "original_file_path": "macros/utils/date_trunc.sql", "unique_id": "macro.dbt.default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.31858, "supported_languages": null}, "macro.dbt.array_construct": {"name": "array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3188312, "supported_languages": null}, "macro.dbt.default__array_construct": {"name": "default__array_construct", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_construct.sql", "original_file_path": "macros/utils/array_construct.sql", "unique_id": "macro.dbt.default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.319069, "supported_languages": null}, "macro.dbt.array_append": {"name": "array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3192582, "supported_languages": null}, "macro.dbt.default__array_append": {"name": "default__array_append", "resource_type": "macro", "package_name": "dbt", "path": "macros/utils/array_append.sql", "original_file_path": "macros/utils/array_append.sql", "unique_id": "macro.dbt.default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.31935, "supported_languages": null}, "macro.dbt.create_schema": {"name": "create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.319604, "supported_languages": null}, "macro.dbt.default__create_schema": {"name": "default__create_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.319726, "supported_languages": null}, "macro.dbt.drop_schema": {"name": "drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.319825, "supported_languages": null}, "macro.dbt.default__drop_schema": {"name": "default__drop_schema", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "unique_id": "macro.dbt.default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.319942, "supported_languages": null}, "macro.dbt.current_timestamp": {"name": "current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.320256, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"name": "default__current_timestamp", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.320352, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"name": "snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.320443, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"name": "default__snapshot_get_time", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3205109, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"name": "current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3206139, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"name": "default__current_timestamp_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3206642, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"name": "current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.32078, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"name": "default__current_timestamp_in_utc_backcompat", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/timestamps.sql", "original_file_path": "macros/adapters/timestamps.sql", "unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt.default__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3208919, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"name": "get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.321483, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"name": "default__get_create_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3215759, "supported_languages": null}, "macro.dbt.create_indexes": {"name": "create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3216808, "supported_languages": null}, "macro.dbt.default__create_indexes": {"name": "default__create_indexes", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3219469, "supported_languages": null}, "macro.dbt.get_drop_index_sql": {"name": "get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_drop_index_sql", "macro_sql": "{% macro get_drop_index_sql(relation, index_name) -%}\n    {{ adapter.dispatch('get_drop_index_sql', 'dbt')(relation, index_name) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_drop_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.322073, "supported_languages": null}, "macro.dbt.default__get_drop_index_sql": {"name": "default__get_drop_index_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_drop_index_sql", "macro_sql": "{% macro default__get_drop_index_sql(relation, index_name) -%}\n    {{ exceptions.raise_compiler_error(\"`get_drop_index_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.322164, "supported_languages": null}, "macro.dbt.get_show_indexes_sql": {"name": "get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.get_show_indexes_sql", "macro_sql": "{% macro get_show_indexes_sql(relation) -%}\n    {{ adapter.dispatch('get_show_indexes_sql', 'dbt')(relation) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_indexes_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.322272, "supported_languages": null}, "macro.dbt.default__get_show_indexes_sql": {"name": "default__get_show_indexes_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "unique_id": "macro.dbt.default__get_show_indexes_sql", "macro_sql": "{% macro default__get_show_indexes_sql(relation) -%}\n    {{ exceptions.raise_compiler_error(\"`get_show_indexes_sql has not been implemented for this adapter.\") }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.322356, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"name": "make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3237681, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"name": "default__make_intermediate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.323881, "supported_languages": null}, "macro.dbt.make_temp_relation": {"name": "make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.32403, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"name": "default__make_temp_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.324291, "supported_languages": null}, "macro.dbt.make_backup_relation": {"name": "make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3244538, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"name": "default__make_backup_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.324667, "supported_languages": null}, "macro.dbt.truncate_relation": {"name": "truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.324781, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"name": "default__truncate_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.324884, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"name": "get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.325037, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"name": "default__get_or_create_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.325376, "supported_languages": null}, "macro.dbt.load_cached_relation": {"name": "load_cached_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3255198, "supported_languages": null}, "macro.dbt.load_relation": {"name": "load_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "unique_id": "macro.dbt.load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3256068, "supported_languages": null}, "macro.dbt.collect_freshness": {"name": "collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.325888, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"name": "default__collect_freshness", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "unique_id": "macro.dbt.default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3261619, "supported_languages": null}, "macro.dbt.validate_sql": {"name": "validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.validate_sql", "macro_sql": "{% macro validate_sql(sql) -%}\n  {{ return(adapter.dispatch('validate_sql', 'dbt')(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__validate_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3263512, "supported_languages": null}, "macro.dbt.default__validate_sql": {"name": "default__validate_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/validate_sql.sql", "original_file_path": "macros/adapters/validate_sql.sql", "unique_id": "macro.dbt.default__validate_sql", "macro_sql": "{% macro default__validate_sql(sql) -%}\n  {% call statement('validate_sql') -%}\n    explain {{ sql }}\n  {% endcall %}\n  {{ return(load_result('validate_sql')) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3265011, "supported_languages": null}, "macro.dbt.copy_grants": {"name": "copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.327701, "supported_languages": null}, "macro.dbt.default__copy_grants": {"name": "default__copy_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3277812, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"name": "support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3278909, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"name": "default__support_multiple_grantees_per_dcl_statement", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.327965, "supported_languages": null}, "macro.dbt.should_revoke": {"name": "should_revoke", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3281941, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"name": "get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.328319, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"name": "default__get_show_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.328386, "supported_languages": null}, "macro.dbt.get_grant_sql": {"name": "get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.328537, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"name": "default__get_grant_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.328662, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"name": "get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.328811, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"name": "default__get_revoke_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.32894, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"name": "get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.329097, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"name": "default__get_dcl_statement_list", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.329626, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"name": "call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.32975, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"name": "default__call_dcl_statements", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.329908, "supported_languages": null}, "macro.dbt.apply_grants": {"name": "apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.330048, "supported_languages": null}, "macro.dbt.default__apply_grants": {"name": "default__apply_grants", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/apply_grants.sql", "original_file_path": "macros/adapters/apply_grants.sql", "unique_id": "macro.dbt.default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3307571, "supported_languages": null}, "macro.dbt.get_show_sql": {"name": "get_show_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_show_sql", "macro_sql": "{% macro get_show_sql(compiled_code, sql_header, limit) -%}\n  {%- if sql_header -%}\n  {{ sql_header }}\n  {%- endif -%}\n  {%- if limit is not none -%}\n  {{ get_limit_subquery_sql(compiled_code, limit) }}\n  {%- else -%}\n  {{ compiled_code }}\n  {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.331121, "supported_languages": null}, "macro.dbt.get_limit_subquery_sql": {"name": "get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.get_limit_subquery_sql", "macro_sql": "{% macro get_limit_subquery_sql(sql, limit) %}\n  {{ adapter.dispatch('get_limit_subquery_sql', 'dbt')(sql, limit) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_limit_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.331254, "supported_languages": null}, "macro.dbt.default__get_limit_subquery_sql": {"name": "default__get_limit_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/show.sql", "original_file_path": "macros/adapters/show.sql", "unique_id": "macro.dbt.default__get_limit_subquery_sql", "macro_sql": "{% macro default__get_limit_subquery_sql(sql, limit) %}\n    select *\n    from (\n        {{ sql }}\n    ) as model_limit_subq\n    limit {{ limit }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.331352, "supported_languages": null}, "macro.dbt.alter_column_comment": {"name": "alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.331824, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"name": "default__alter_column_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3319418, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"name": "alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.332076, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"name": "default__alter_relation_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.332194, "supported_languages": null}, "macro.dbt.persist_docs": {"name": "persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.332374, "supported_languages": null}, "macro.dbt.default__persist_docs": {"name": "default__persist_docs", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "unique_id": "macro.dbt.default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.332696, "supported_languages": null}, "macro.dbt.get_catalog_relations": {"name": "get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog_relations", "macro_sql": "{% macro get_catalog_relations(information_schema, relations) -%}\n  {{ return(adapter.dispatch('get_catalog_relations', 'dbt')(information_schema, relations)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_catalog_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.334742, "supported_languages": null}, "macro.dbt.default__get_catalog_relations": {"name": "default__get_catalog_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog_relations", "macro_sql": "{% macro default__get_catalog_relations(information_schema, relations) -%}\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog_relations not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.334919, "supported_languages": null}, "macro.dbt.get_catalog": {"name": "get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.335055, "supported_languages": null}, "macro.dbt.default__get_catalog": {"name": "default__get_catalog", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3352268, "supported_languages": null}, "macro.dbt.information_schema_name": {"name": "information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.335349, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"name": "default__information_schema_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.335457, "supported_languages": null}, "macro.dbt.list_schemas": {"name": "list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.335576, "supported_languages": null}, "macro.dbt.default__list_schemas": {"name": "default__list_schemas", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.335733, "supported_languages": null}, "macro.dbt.check_schema_exists": {"name": "check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.33586, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"name": "default__check_schema_exists", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.336045, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"name": "list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3361611, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"name": "default__list_relations_without_caching", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.33626, "supported_languages": null}, "macro.dbt.get_relations": {"name": "get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relations", "macro_sql": "{% macro get_relations() %}\n  {{ return(adapter.dispatch('get_relations', 'dbt')()) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.336362, "supported_languages": null}, "macro.dbt.default__get_relations": {"name": "default__get_relations", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relations", "macro_sql": "{% macro default__get_relations() %}\n  {{ exceptions.raise_not_implemented(\n    'get_relations macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3364558, "supported_languages": null}, "macro.dbt.get_relation_last_modified": {"name": "get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.get_relation_last_modified", "macro_sql": "{% macro get_relation_last_modified(information_schema, relations) %}\n  {{ return(adapter.dispatch('get_relation_last_modified', 'dbt')(information_schema, relations)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_relation_last_modified"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.336648, "supported_languages": null}, "macro.dbt.default__get_relation_last_modified": {"name": "default__get_relation_last_modified", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "unique_id": "macro.dbt.default__get_relation_last_modified", "macro_sql": "{% macro default__get_relation_last_modified(information_schema, relations) %}\n  {{ exceptions.raise_not_implemented(\n    'get_relation_last_modified macro not implemented for adapter ' + adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3367648, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"name": "get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.338305, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"name": "default__get_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.338419, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"name": "sql_convert_columns_in_relation", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.338624, "supported_languages": null}, "macro.dbt.get_empty_subquery_sql": {"name": "get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_subquery_sql", "macro_sql": "{% macro get_empty_subquery_sql(select_sql, select_sql_header=none) -%}\n  {{ return(adapter.dispatch('get_empty_subquery_sql', 'dbt')(select_sql, select_sql_header)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.338779, "supported_languages": null}, "macro.dbt.default__get_empty_subquery_sql": {"name": "default__get_empty_subquery_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_subquery_sql", "macro_sql": "{% macro default__get_empty_subquery_sql(select_sql, select_sql_header=none) %}\n    {%- if select_sql_header is not none -%}\n    {{ select_sql_header }}\n    {%- endif -%}\n    select * from (\n        {{ select_sql }}\n    ) as __dbt_sbq\n    where false\n    limit 0\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.338915, "supported_languages": null}, "macro.dbt.get_empty_schema_sql": {"name": "get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_empty_schema_sql", "macro_sql": "{% macro get_empty_schema_sql(columns) -%}\n  {{ return(adapter.dispatch('get_empty_schema_sql', 'dbt')(columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_empty_schema_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.339038, "supported_languages": null}, "macro.dbt.default__get_empty_schema_sql": {"name": "default__get_empty_schema_sql", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_empty_schema_sql", "macro_sql": "{% macro default__get_empty_schema_sql(columns) %}\n    {%- set col_err = [] -%}\n    {%- set col_naked_numeric = [] -%}\n    select\n    {% for i in columns %}\n      {%- set col = columns[i] -%}\n      {%- if col['data_type'] is not defined -%}\n        {%- do col_err.append(col['name']) -%}\n      {#-- If this column's type is just 'numeric' then it is missing precision/scale, raise a warning --#}\n      {%- elif col['data_type'].strip().lower() in ('numeric', 'decimal', 'number') -%}\n        {%- do col_naked_numeric.append(col['name']) -%}\n      {%- endif -%}\n      {% set col_name = adapter.quote(col['name']) if col.get('quote') else col['name'] %}\n      cast(null as {{ col['data_type'] }}) as {{ col_name }}{{ \", \" if not loop.last }}\n    {%- endfor -%}\n    {%- if (col_err | length) > 0 -%}\n      {{ exceptions.column_type_missing(column_names=col_err) }}\n    {%- elif (col_naked_numeric | length) > 0 -%}\n      {{ exceptions.warn(\"Detected columns with numeric type and unspecified precision/scale, this can lead to unintended rounding: \" ~ col_naked_numeric ~ \"`\") }}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.339798, "supported_languages": null}, "macro.dbt.get_column_schema_from_query": {"name": "get_column_schema_from_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_column_schema_from_query", "macro_sql": "{% macro get_column_schema_from_query(select_sql, select_sql_header=none) -%}\n    {% set columns = [] %}\n    {# -- Using an 'empty subquery' here to get the same schema as the given select_sql statement, without necessitating a data scan.#}\n    {% set sql = get_empty_subquery_sql(select_sql, select_sql_header) %}\n    {% set column_schema = adapter.get_column_schema_from_query(sql) %}\n    {{ return(column_schema) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.340044, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"name": "get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3401668, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"name": "default__get_columns_in_query", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        {{ get_empty_subquery_sql(select_sql) }}\n    {% endcall %}\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.get_empty_subquery_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.340401, "supported_languages": null}, "macro.dbt.alter_column_type": {"name": "alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.340557, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"name": "default__alter_column_type", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.340957, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"name": "alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_duckdb.duckdb__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.341134, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"name": "default__alter_relation_add_remove_columns", "resource_type": "macro", "package_name": "dbt", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.341663, "supported_languages": null}, "macro.dbt.resolve_model_name": {"name": "resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.resolve_model_name", "macro_sql": "{% macro resolve_model_name(input_model_name) %}\n    {{ return(adapter.dispatch('resolve_model_name', 'dbt')(input_model_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.default__resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.342836, "supported_languages": null}, "macro.dbt.default__resolve_model_name": {"name": "default__resolve_model_name", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.default__resolve_model_name", "macro_sql": "\n\n{%- macro default__resolve_model_name(input_model_name) -%}\n    {{  input_model_name | string | replace('\"', '\\\"') }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.342941, "supported_languages": null}, "macro.dbt.build_ref_function": {"name": "build_ref_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {% set _ref_args = [_ref.get('package'), _ref['name']] if _ref.get('package') else [_ref['name'],] %}\n        {%- set resolved = ref(*_ref_args, v=_ref.get('version')) -%}\n        {%- if _ref.get('version') -%}\n            {% do _ref_args.extend([\"v\" ~ _ref['version']]) %}\n        {%- endif -%}\n       {%- do ref_dict.update({_ref_args | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef ref(*args, **kwargs):\n    refs = {{ ref_dict | tojson }}\n    key = '.'.join(args)\n    version = kwargs.get(\"v\") or kwargs.get(\"version\")\n    if version:\n        key += f\".v{version}\"\n    dbt_load_df_function = kwargs.get(\"dbt_load_df_function\")\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.343488, "supported_languages": null}, "macro.dbt.build_source_function": {"name": "build_source_function", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join('.'): resolve_model_name(resolved)}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = '.'.join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.resolve_model_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.343761, "supported_languages": null}, "macro.dbt.build_config_dict": {"name": "build_config_dict", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {% set config_dbt_used = zip(model.config.config_keys_used, model.config.config_keys_defaults) | list %}\n    {%- for key, default in config_dbt_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == \"language\" -%}\n          {%- set value = \"python\" -%}\n        {%- endif -%}\n        {%- set value = model.config.get(key, default) -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3441222, "supported_languages": null}, "macro.dbt.py_script_postfix": {"name": "py_script_postfix", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = \"{{ this.database }}\"\n    schema = \"{{ this.schema }}\"\n    identifier = \"{{ this.identifier }}\"\n    {% set this_relation_name = resolve_model_name(this) %}\n    def __repr__(self):\n        return '{{ this_relation_name  }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args, **kwargs: ref(*args, **kwargs, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.resolve_model_name", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3444202, "supported_languages": null}, "macro.dbt.py_script_comment": {"name": "py_script_comment", "resource_type": "macro", "package_name": "dbt", "path": "macros/python_model/python.sql", "original_file_path": "macros/python_model/python.sql", "unique_id": "macro.dbt.py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3444679, "supported_languages": null}, "macro.dbt.test_unique": {"name": "test_unique", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3448021, "supported_languages": null}, "macro.dbt.test_not_null": {"name": "test_not_null", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.34497, "supported_languages": null}, "macro.dbt.test_accepted_values": {"name": "test_accepted_values", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.34516, "supported_languages": null}, "macro.dbt.test_relationships": {"name": "test_relationships", "resource_type": "macro", "package_name": "dbt", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "unique_id": "macro.dbt.test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.345346, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"name": "get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3455942, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"name": "default__get_url_host", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "unique_id": "macro.dbt_utils.default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt.split_part(\n        dbt.split_part(\n            dbt.replace(\n                dbt.replace(\n                    dbt.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        dbt.type_string()\n        )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part", "macro.dbt.replace", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.346056, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"name": "get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.346402, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"name": "default__get_url_path", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "unique_id": "macro.dbt_utils.default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        dbt.replace(\n            dbt.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ dbt.position(\"'/'\", stripped_url) }}, 0),\n            {{ dbt.position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt.split_part(\n            dbt.right(\n                stripped_url,\n                dbt.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt.safe_cast(\n        parsed_path,\n        dbt.type_string()\n    )}}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.replace", "macro.dbt.position", "macro.dbt.split_part", "macro.dbt.right", "macro.dbt.length", "macro.dbt.safe_cast", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3468642, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"name": "get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.347061, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"name": "default__get_url_parameter", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "unique_id": "macro.dbt_utils.default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt.split_part(dbt.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.347261, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"name": "test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.347998, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"name": "default__test_fewer_rows_than", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model, group_by_columns) %}\n\n{{ config(fail_calc = 'sum(coalesce(row_count_delta, 0))') }}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in equal_rowcount. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_fewer_rows_than'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_our_model \n    from {{ model }}\n    {{ groupby_gb_cols }}\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_fewer_rows_than,\n      count(*) as count_comparison_model \n    from {{ compare_model }}\n    {{ groupby_gb_cols }}\n\n),\ncounts as (\n\n    select\n\n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_our_model,\n        count_comparison_model\n    from a\n    full join b on \n    a.id_dbtutils_test_fewer_rows_than = b.id_dbtutils_test_fewer_rows_than\n    {{ join_gb_cols }}\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3486981, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"name": "test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.349296, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"name": "default__test_equal_rowcount", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "unique_id": "macro.dbt_utils.default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model, group_by_columns) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'sum(coalesce(diff_count, 0))') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(', ') + ', ' %}\n  {% set join_gb_cols %}\n    {% for c in group_by_columns %}\n      and a.{{c}} = b.{{c}}\n    {% endfor %}\n  {% endset %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n{#-- We must add a fake join key in case additional grouping variables are not provided --#}\n{#-- Redshift does not allow for dynamically created join conditions (e.g. full join on 1 = 1 --#}\n{#-- The same logic is used in fewer_rows_than. In case of changes, maintain consistent logic --#}\n{% set group_by_columns = ['id_dbtutils_test_equal_rowcount'] + group_by_columns %}\n{% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n\nwith a as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_a \n    from {{ model }}\n    {{groupby_gb_cols}}\n\n\n),\nb as (\n\n    select \n      {{select_gb_cols}}\n      1 as id_dbtutils_test_equal_rowcount,\n      count(*) as count_b \n    from {{ compare_model }}\n    {{groupby_gb_cols}}\n\n),\nfinal as (\n\n    select\n    \n        {% for c in group_by_columns -%}\n          a.{{c}} as {{c}}_a,\n          b.{{c}} as {{c}}_b,\n        {% endfor %}\n\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n\n    from a\n    full join b\n    on\n    a.id_dbtutils_test_equal_rowcount = b.id_dbtutils_test_equal_rowcount\n    {{join_gb_cols}}\n\n\n)\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.350019, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"name": "test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.350475, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"name": "default__test_relationships_where", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "unique_id": "macro.dbt_utils.default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3507142, "supported_languages": null}, "macro.dbt_utils.test_recency": {"name": "test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.test_recency", "macro_sql": "{% test recency(model, field, datepart, interval, ignore_time_component=False, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval, ignore_time_component, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3512142, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"name": "default__test_recency", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "unique_id": "macro.dbt_utils.default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval, ignore_time_component, group_by_columns) %}\n\n{% set threshold = 'cast(' ~ dbt.dateadd(datepart, interval * -1, dbt.current_timestamp()) ~ ' as ' ~ ('date' if ignore_time_component else dbt.type_timestamp()) ~ ')'  %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nwith recency as (\n\n    select \n\n      {{ select_gb_cols }}\n      {% if ignore_time_component %}\n        cast(max({{ field }}) as date) as most_recent\n      {%- else %}\n        max({{ field }}) as most_recent\n      {%- endif %}\n\n    from {{ model }}\n\n    {{ groupby_gb_cols }}\n\n)\n\nselect\n\n    {{ select_gb_cols }}\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.current_timestamp", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.351773, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"name": "test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.test_not_constant", "macro_sql": "{% test not_constant(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.352053, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"name": "default__test_not_constant", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "unique_id": "macro.dbt_utils.default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name, group_by_columns) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    {{select_gb_cols}}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\n  {{groupby_gb_cols}}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.35234, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"name": "test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3527339, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"name": "default__test_accepted_range", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "unique_id": "macro.dbt_utils.default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.35306, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"name": "test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3534322, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"name": "default__test_not_accepted_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "unique_id": "macro.dbt_utils.default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.353701, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"name": "test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name, group_by_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.354157, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"name": "default__test_at_least_one", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "unique_id": "macro.dbt_utils.default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name, group_by_columns) %}\n\n{% set pruned_cols = [column_name] %}\n\n{% if group_by_columns|length() > 0 %}\n\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n  {% set pruned_cols = group_by_columns %}\n\n  {% if column_name not in pruned_cols %}\n    {% do pruned_cols.append(column_name) %}\n  {% endif %}\n\n{% endif %}\n\n{% set select_pruned_cols = pruned_cols|join(' ,') %}\n\nselect *\nfrom (\n    with pruned_rows as (\n      select\n        {{ select_pruned_cols }}\n      from {{ model }}\n      where {{ column_name }} is not null\n      limit 1\n    )\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      {{select_gb_cols}}\n      count({{ column_name }}) as filler_column\n\n    from pruned_rows\n\n    {{groupby_gb_cols}}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.354694, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"name": "test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.355135, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"name": "default__test_unique_combination_of_columns", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3555698, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"name": "test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.355953, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"name": "default__test_cardinality_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "unique_id": "macro.dbt_utils.default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3561978, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None) %}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3564749, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"name": "default__test_expression_is_true", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "unique_id": "macro.dbt_utils.default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else \"1\" %}\n\nselect\n    {{ column_list }}\nfrom {{ model }}\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.356886, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"name": "test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model, group_by_columns = []) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, group_by_columns, **kwargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3572989, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"name": "default__test_not_null_proportion", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "unique_id": "macro.dbt_utils.default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model, group_by_columns) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(' ,') + ', ' %}\n  {% set groupby_gb_cols = 'group by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith validation as (\n  select\n    {{select_gb_cols}}\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n  {{groupby_gb_cols}}\n),\nvalidation_errors as (\n  select\n    {{select_gb_cols}}\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3578172, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"name": "test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart, group_by_columns)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.358442, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"name": "default__test_sequential_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "unique_id": "macro.dbt_utils.default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None, group_by_columns = []) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\n{% if group_by_columns|length() > 0 %}\n  {% set select_gb_cols = group_by_columns|join(',') + ', ' %}\n  {% set partition_gb_cols = 'partition by ' + group_by_columns|join(',') %}\n{% endif %}\n\nwith windowed as (\n\n    select\n        {{ select_gb_cols }}\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            {{partition_gb_cols}}\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt.type_timestamp() }})= cast({{ dbt.dateadd(datepart, interval, previous_column_name) }} as {{ dbt.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt.type_timestamp", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.359046, "supported_languages": null}, "macro.dbt_utils.test_equality": {"name": "test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.359544, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"name": "default__test_equality", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "unique_id": "macro.dbt_utils.default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.360137, "supported_languages": null}, "macro.dbt_utils.test_not_empty_string": {"name": "test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.test_not_empty_string", "macro_sql": "{% test not_empty_string(model, column_name, trim_whitespace=true) %}\n\n  {{ return(adapter.dispatch('test_not_empty_string', 'dbt_utils')(model, column_name, trim_whitespace)) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_not_empty_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3604841, "supported_languages": null}, "macro.dbt_utils.default__test_not_empty_string": {"name": "default__test_not_empty_string", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/not_empty_string.sql", "original_file_path": "macros/generic_tests/not_empty_string.sql", "unique_id": "macro.dbt_utils.default__test_not_empty_string", "macro_sql": "{% macro default__test_not_empty_string(model, column_name, trim_whitespace=true) %}\n\n    with\n    \n    all_values as (\n\n        select \n\n\n            {% if trim_whitespace == true -%}\n\n                trim({{ column_name }}) as {{ column_name }}\n\n            {%- else -%}\n\n                {{ column_name }}\n\n            {%- endif %}\n            \n        from {{ model }}\n\n    ),\n\n    errors as (\n\n        select * from all_values\n        where {{ column_name }} = ''\n\n    )\n\n    select * from errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3606899, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"name": "test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.363125, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"name": "default__test_mutually_exclusive_ranges", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions more cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.364119, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"name": "pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.364287, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"name": "default__pretty_log_format", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "unique_id": "macro.dbt_utils.default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.36439, "supported_languages": null}, "macro.dbt_utils._is_relation": {"name": "_is_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_relation.sql", "original_file_path": "macros/jinja_helpers/_is_relation.sql", "unique_id": "macro.dbt_utils._is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3646662, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"name": "pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3648582, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"name": "default__pretty_time", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "unique_id": "macro.dbt_utils.default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.364993, "supported_languages": null}, "macro.dbt_utils.log_info": {"name": "log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.365168, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"name": "default__log_info", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "unique_id": "macro.dbt_utils.default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.365283, "supported_languages": null}, "macro.dbt_utils.slugify": {"name": "slugify", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "unique_id": "macro.dbt_utils.slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n{#- Prepends \"_\" if string begins with a number -#}\n{% set string = modules.re.sub('^[0-9]', '_' + string[0], string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.365725, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"name": "_is_ephemeral", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/jinja_helpers/_is_ephemeral.sql", "original_file_path": "macros/jinja_helpers/_is_ephemeral.sql", "unique_id": "macro.dbt_utils._is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3662999, "supported_languages": null}, "macro.dbt_utils.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3667881, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3671858, "supported_languages": null}, "macro.dbt_utils.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.367338, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "unique_id": "macro.dbt_utils.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.367587, "supported_languages": null}, "macro.dbt_utils.safe_subtract": {"name": "safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.safe_subtract", "macro_sql": "{%- macro safe_subtract(field_list) -%}\n    {{ return(adapter.dispatch('safe_subtract', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_subtract"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3678532, "supported_languages": null}, "macro.dbt_utils.default__safe_subtract": {"name": "default__safe_subtract", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_subtract.sql", "original_file_path": "macros/sql/safe_subtract.sql", "unique_id": "macro.dbt_utils.default__safe_subtract", "macro_sql": "\n\n{%- macro default__safe_subtract(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_subtract` macro takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' -\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.368223, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"name": "nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.368445, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"name": "default__nullcheck_table", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "unique_id": "macro.dbt_utils.default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.36874, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"name": "get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.369174, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"name": "default__get_relations_by_pattern", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3697011, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.370301, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.37058, "supported_languages": null}, "macro.dbt_utils.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.370708, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "unique_id": "macro.dbt_utils.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3710568, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"name": "get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.37152, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"name": "default__get_relations_by_prefix", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.37208, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"name": "get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3723578, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"name": "default__get_tables_by_prefix_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3725498, "supported_languages": null}, "macro.dbt_utils.star": {"name": "star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix, quote_identifiers)) }}\r\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3734028, "supported_languages": null}, "macro.dbt_utils.default__star": {"name": "default__star", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "unique_id": "macro.dbt_utils.default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='', quote_identifiers=True) -%}\r\n    {%- do dbt_utils._is_relation(from, 'star') -%}\r\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\r\n\r\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\r\n    {%- if not execute -%}\r\n        {% do return('*') %}\r\n    {%- endif -%}\r\n\r\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\r\n\r\n    {%- if cols|length <= 0 -%}\r\n        {% if flags.WHICH == 'compile' %}\r\n            {% set response %}\r\n*\r\n/* No columns were returned. Maybe the relation doesn't exist yet \r\nor all columns were excluded. This star is only output during  \r\ndbt compile, and exists to keep SQLFluff happy. */\r\n            {% endset %}\r\n            {% do return(response) %}\r\n        {% else %}\r\n            {% do return(\"/* no columns returned from star() macro */\") %}\r\n        {% endif %}\r\n    {%- else -%}\r\n        {%- for col in cols %}\r\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}\r\n                {%- if quote_identifiers -%}\r\n                    {{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {%- else -%}\r\n                    {{ col|trim }} {%- if prefix!='' or suffix!='' %} as {{ (prefix ~ col ~ suffix)|trim }} {%- endif -%}\r\n                {% endif %}\r\n            {%- if not loop.last %},{{ '\\n  ' }}{%- endif -%}\r\n        {%- endfor -%}\r\n    {% endif %}\r\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3742971, "supported_languages": null}, "macro.dbt_utils.unpivot": {"name": "unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.375201, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"name": "default__unpivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "unique_id": "macro.dbt_utils.default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value') -%}\n\n    {% if not relation %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.type_string", "macro.dbt.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.376269, "supported_languages": null}, "macro.dbt_utils.safe_divide": {"name": "safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.safe_divide", "macro_sql": "{% macro safe_divide(numerator, denominator) -%}\n  {{ return(adapter.dispatch('safe_divide', 'dbt_utils')(numerator, denominator)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_divide"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3764648, "supported_languages": null}, "macro.dbt_utils.default__safe_divide": {"name": "default__safe_divide", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_divide.sql", "original_file_path": "macros/sql/safe_divide.sql", "unique_id": "macro.dbt_utils.default__safe_divide", "macro_sql": "{% macro default__safe_divide(numerator, denominator) %}\n    ( {{ numerator }} ) / nullif( ( {{ denominator }} ), 0)\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.376559, "supported_languages": null}, "macro.dbt_utils.union_relations": {"name": "union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.378714, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"name": "default__union_relations", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "unique_id": "macro.dbt_utils.default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n    {%- set all_excludes = [] -%}\n    {%- set all_includes = [] -%}\n\n    {%- if exclude -%}\n        {%- for exc in exclude -%}\n            {%- do all_excludes.append(exc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- if include -%}\n        {%- for inc in include -%}\n            {%- do all_includes.append(inc | lower) -%}\n        {%- endfor -%}\n    {%- endif -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column | lower in all_excludes -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column | lower not in all_includes -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ dbt.string_literal(relation) }} as {{ dbt.type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt.string_literal", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3810618, "supported_languages": null}, "macro.dbt_utils.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3812668, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "unique_id": "macro.dbt_utils.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.38144, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"name": "deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by) -%}\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.381977, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"name": "default__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.382139, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"name": "redshift__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.382277, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"name": "postgres__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.382418, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"name": "snowflake__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.382546, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"name": "bigquery__deduplicate", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "unique_id": "macro.dbt_utils.bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.382665, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"name": "surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.382912, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"name": "default__surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "unique_id": "macro.dbt_utils.default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- set error_message = '\nWarning: `dbt_utils.surrogate_key` has been replaced by \\\n`dbt_utils.generate_surrogate_key`. The new macro treats null values \\\ndifferently to empty strings. To restore the behaviour of the original \\\nmacro, add a global variable in dbt_project.yml called \\\n`surrogate_key_treat_nulls_as_empty_strings` to your \\\ndbt_project.yml file with a value of True. \\\nThe {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.raise_compiler_error(error_message) -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3830621, "supported_languages": null}, "macro.dbt_utils.safe_add": {"name": "safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.safe_add", "macro_sql": "{%- macro safe_add(field_list) -%}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.383307, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"name": "default__safe_add", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "unique_id": "macro.dbt_utils.default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add(field_list) -%}\n\n{%- if field_list is not iterable or field_list is string or field_list is mapping -%}\n\n{%- set error_message = '\nWarning: the `safe_add` macro now takes a single list argument instead of \\\nstring arguments. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{%- endif -%}\n\n{% set fields = [] %}\n\n{%- for field in field_list -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.383649, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"name": "nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.383883, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"name": "default__nullcheck", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "unique_id": "macro.dbt_utils.default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.384109, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"name": "get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3852959, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"name": "default__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.385542, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"name": "bigquery__get_tables_by_pattern_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.386025, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"name": "_bigquery__get_matching_schemata", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.386366, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"name": "get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.387151, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"name": "default__get_column_values", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "unique_id": "macro.dbt_utils.default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.388192, "supported_languages": null}, "macro.dbt_utils.pivot": {"name": "pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.388872, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"name": "default__pivot", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "unique_id": "macro.dbt_utils.default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.38939, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"name": "get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.389685, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"name": "default__get_filtered_columns_in_relation", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.390173, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"name": "width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3907142, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"name": "default__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, dbt.type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, dbt.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.391096, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"name": "snowflake__width_bucket", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/width_bucket.sql", "original_file_path": "macros/sql/width_bucket.sql", "unique_id": "macro.dbt_utils.snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3912268, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"name": "get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.391495, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"name": "default__get_query_results_as_dict", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.39192, "supported_languages": null}, "macro.dbt_utils.generate_surrogate_key": {"name": "generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.generate_surrogate_key", "macro_sql": "{%- macro generate_surrogate_key(field_list) -%}\n    {{ return(adapter.dispatch('generate_surrogate_key', 'dbt_utils')(field_list)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__generate_surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.392237, "supported_languages": null}, "macro.dbt_utils.default__generate_surrogate_key": {"name": "default__generate_surrogate_key", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/generate_surrogate_key.sql", "original_file_path": "macros/sql/generate_surrogate_key.sql", "unique_id": "macro.dbt_utils.default__generate_surrogate_key", "macro_sql": "\n\n{%- macro default__generate_surrogate_key(field_list) -%}\n\n{%- if var('surrogate_key_treat_nulls_as_empty_strings', False) -%}\n    {%- set default_null_value = \"\" -%}\n{%- else -%}\n    {%- set default_null_value = '_dbt_utils_surrogate_key_null_' -%}\n{%- endif -%}\n\n{%- set fields = [] -%}\n\n{%- for field in field_list -%}\n\n    {%- do fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt.type_string() ~ \"), '\" ~ default_null_value  ~\"')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- do fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ dbt.hash(dbt.concat(fields)) }}\n\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.hash", "macro.dbt.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.39266, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"name": "get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.393023, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"name": "default__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.393121, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"name": "postgres__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.393219, "supported_languages": null}, "macro.dbt_utils.databricks__get_table_types_sql": {"name": "databricks__get_table_types_sql", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "unique_id": "macro.dbt_utils.databricks__get_table_types_sql", "macro_sql": "{% macro databricks__get_table_types_sql() %}\n            case table_type\n                when 'MANAGED' then 'table'\n                when 'BASE TABLE' then 'table'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3933141, "supported_languages": null}, "macro.dbt_utils.get_single_value": {"name": "get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.get_single_value", "macro_sql": "{% macro get_single_value(query, default=none) %}\n    {{ return(adapter.dispatch('get_single_value', 'dbt_utils')(query, default)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__get_single_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.393664, "supported_languages": null}, "macro.dbt_utils.default__get_single_value": {"name": "default__get_single_value", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/get_single_value.sql", "original_file_path": "macros/sql/get_single_value.sql", "unique_id": "macro.dbt_utils.default__get_single_value", "macro_sql": "{% macro default__get_single_value(query, default) %}\n\n{# This macro returns the (0, 0) record in a query, i.e. the first row of the first column #}\n\n    {%- call statement('get_query_result', fetch_result=True, auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {%- if execute -%}\n\n        {% set r = load_result('get_query_result').table.columns[0].values() %}\n        {% if r | length == 0 %}\n            {% do print('Query `' ~ query ~ '` returned no rows. Using the default value: ' ~ default) %}\n            {% set sql_result = default %}\n        {% else %}\n            {% set sql_result = r[0] %}\n        {% endif %}\n        \n    {%- else -%}\n    \n        {% set sql_result = default %}\n    \n    {%- endif -%}\n\n    {% do return(sql_result) %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.394166, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"name": "degrees_to_radians", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.394943, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"name": "haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.3951302, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"name": "default__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.395513, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"name": "bigquery__haversine_distance", "resource_type": "macro", "package_name": "dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "unique_id": "macro.dbt_utils.bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.396023, "supported_languages": null}, "macro.audit_helper.compare_relations": {"name": "compare_relations", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relations.sql", "original_file_path": "macros/compare_relations.sql", "unique_id": "macro.audit_helper.compare_relations", "macro_sql": "{% macro compare_relations(a_relation, b_relation, exclude_columns=[], primary_key=None, summarize=true) %}\n\n{% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n{% set column_selection %}\n\n  {% for column_name in column_names %} \n    {{ adapter.quote(column_name) }} \n    {% if not loop.last %}\n      , \n    {% endif %} \n  {% endfor %}\n\n{% endset %}\n\n{% set a_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ a_relation }}\n{% endset %}\n\n{% set b_query %}\nselect\n\n  {{ column_selection }}\n\nfrom {{ b_relation }}\n{% endset %}\n\n{{ audit_helper.compare_queries(a_query, b_query, primary_key, summarize) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.396629, "supported_languages": null}, "macro.audit_helper.compare_all_columns": {"name": "compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.compare_all_columns", "macro_sql": "{% macro compare_all_columns( a_relation, b_relation, primary_key,  exclude_columns=[],summarize=true ) -%}\n  {{ return(adapter.dispatch('compare_all_columns', 'audit_helper')( a_relation, b_relation, primary_key, exclude_columns, summarize )) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_all_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.39762, "supported_languages": null}, "macro.audit_helper.default__compare_all_columns": {"name": "default__compare_all_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_all_columns.sql", "original_file_path": "macros/compare_all_columns.sql", "unique_id": "macro.audit_helper.default__compare_all_columns", "macro_sql": "{% macro default__compare_all_columns( a_relation, b_relation, primary_key, exclude_columns=[], summarize=true ) -%}\n\n  {% set column_names = dbt_utils.get_filtered_columns_in_relation(from=a_relation, except=exclude_columns) %}\n\n  {# We explictly select the primary_key and rename to support any sql as the primary_key -\n  a column or concatenated columns. this assumes that a_relation and b_relation do not already \n  have a field named dbt_audit_helper_pk #}\n\n  {% set a_query %}      \n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ a_relation }}\n  {% endset %}\n\n  {% set b_query %}\n    select\n      *,\n      {{ primary_key }} as dbt_audit_helper_pk\n    from {{ b_relation }}\n  {% endset %}\n\n  {% for column_name in column_names %}\n\n    {% set audit_query = audit_helper.compare_column_values_verbose(\n      a_query=a_query,\n      b_query=b_query,\n      primary_key=\"dbt_audit_helper_pk\",\n      column_to_compare=column_name\n    ) %}\n\n    /*  Create a query combining results from all columns so that the user, or the \n    test suite, can examine all at once.\n    */\n    \n    {% if loop.first %}\n\n    /*  Create a CTE that wraps all the unioned subqueries that are created\n        in this for loop\n    */\n      with main as ( \n\n    {% endif %}\n\n    /*  There will be one audit_query subquery for each column\n    */\n    ( {{ audit_query }} )\n\n    {% if not loop.last %}\n\n      union all\n\n    {% else %}\n\n    ), \n    \n      {%- if summarize %}\n\n        final as (\n          select\n            upper(column_name) as column_name,\n            sum(case when perfect_match then 1 else 0 end) as perfect_match,\n            sum(case when null_in_a then 1 else 0 end) as null_in_a,\n            sum(case when null_in_b then 1 else 0 end) as null_in_b,\n            sum(case when missing_from_a then 1 else 0 end) as missing_from_a,\n            sum(case when missing_from_b then 1 else 0 end) as missing_from_b,\n            sum(case when conflicting_values then 1 else 0 end) as conflicting_values\n          from main\n          group by 1\n          order by column_name\n        )\n\n      {%- else %}\n\n        final as (\n          select\n            primary_key,           \n            upper(column_name) as column_name,\n            perfect_match,\n            null_in_a,\n            null_in_b,\n            missing_from_a,\n            missing_from_b,\n            conflicting_values\n          from main    \n          order by primary_key\n        )\n\n      {%- endif %}\n\n      select * from final\n    \n    {% endif %}\n\n  {% endfor %}\n    \n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_filtered_columns_in_relation", "macro.audit_helper.compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.398292, "supported_languages": null}, "macro.audit_helper.compare_column_values_verbose": {"name": "compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.compare_column_values_verbose", "macro_sql": "{% macro compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values_verbose', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values_verbose"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.399911, "supported_languages": null}, "macro.audit_helper.default__compare_column_values_verbose": {"name": "default__compare_column_values_verbose", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values_verbose.sql", "original_file_path": "macros/compare_column_values_verbose.sql", "unique_id": "macro.audit_helper.default__compare_column_values_verbose", "macro_sql": "{% macro default__compare_column_values_verbose(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n)\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as primary_key,\n\n        {% if target.name == 'postgres' or target.name == 'redshift' %}\n            '{{ column_to_compare }}'::text as column_name,\n        {% else %}\n            '{{ column_to_compare }}' as column_name,\n        {% endif %}\n\n        coalesce(\n            a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} and \n                a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null,\n            (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null),\n            false\n        ) as perfect_match,\n        a_query.{{ column_to_compare }} is null and a_query.{{ primary_key }} is not null as null_in_a,\n        b_query.{{ column_to_compare }} is null and b_query.{{ primary_key }} is not null as null_in_b,\n        a_query.{{ primary_key }} is null as missing_from_a,\n        b_query.{{ primary_key }} is null as missing_from_b,\n        coalesce(\n            a_query.{{ primary_key }} is not null and b_query.{{ primary_key }} is not null and \n            -- ensure that neither value is missing before considering it a conflict\n            (\n                a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} or -- two not-null values that do not match\n                (a_query.{{ column_to_compare }} is not null and b_query.{{ column_to_compare }} is null) or -- null in b and not null in a\n                (a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is not null) -- null in a and not null in b\n            ), \n            false\n        ) as conflicting_values\n        -- considered a conflict if the values do not match AND at least one of the values is not null.\n\n    from a_query\n\n    full outer join b_query on (a_query.{{ primary_key }} = b_query.{{ primary_key }})\n\n\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4004748, "supported_languages": null}, "macro.audit_helper.compare_column_values": {"name": "compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.compare_column_values", "macro_sql": "{% macro compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\n  {{ return(adapter.dispatch('compare_column_values', 'audit_helper')(a_query, b_query, primary_key, column_to_compare)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.402813, "supported_languages": null}, "macro.audit_helper.default__compare_column_values": {"name": "default__compare_column_values", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_column_values.sql", "original_file_path": "macros/compare_column_values.sql", "unique_id": "macro.audit_helper.default__compare_column_values", "macro_sql": "{% macro default__compare_column_values(a_query, b_query, primary_key, column_to_compare) -%}\nwith a_query as (\n    {{ a_query }}\n),\n\nb_query as (\n    {{ b_query }}\n),\n\njoined as (\n    select\n        coalesce(a_query.{{ primary_key }}, b_query.{{ primary_key }}) as {{ primary_key }},\n        a_query.{{ column_to_compare }} as a_query_value,\n        b_query.{{ column_to_compare }} as b_query_value,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then '\u2705: perfect match'\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then '\u2705: both are null'\n            when a_query.{{ primary_key }} is null then '\ud83e\udd37: \u200dmissing from a'\n            when b_query.{{ primary_key }} is null then '\ud83e\udd37: missing from b'\n            when a_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in a only'\n            when b_query.{{ column_to_compare }} is null then '\ud83e\udd37: value is null in b only'\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then '\ud83d\ude45: \u200dvalues do not match'\n            else 'unknown' -- this should never happen\n        end as match_status,\n        case\n            when a_query.{{ column_to_compare }} = b_query.{{ column_to_compare }} then 0\n            when a_query.{{ column_to_compare }} is null and b_query.{{ column_to_compare }} is null then 1\n            when a_query.{{ primary_key }} is null then 2\n            when b_query.{{ primary_key }} is null then 3\n            when a_query.{{ column_to_compare }} is null then 4\n            when b_query.{{ column_to_compare }} is null then 5\n            when a_query.{{ column_to_compare }} != b_query.{{ column_to_compare }} then 6\n            else 7 -- this should never happen\n        end as match_order\n\n    from a_query\n\n    full outer join b_query on a_query.{{ primary_key }} = b_query.{{ primary_key }}\n),\n\naggregated as (\n    select\n        '{{ column_to_compare }}' as column_name,\n        match_status,\n        match_order,\n        count(*) as count_records\n    from joined\n\n    group by column_name, match_status, match_order\n)\n\nselect\n    column_name,\n    match_status,\n    count_records,\n    round(100.0 * count_records / sum(count_records) over (), 2) as percent_of_total\n\nfrom aggregated\n\norder by match_order\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.403349, "supported_languages": null}, "macro.audit_helper.compare_queries": {"name": "compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.compare_queries", "macro_sql": "{% macro compare_queries(a_query, b_query, primary_key=None, summarize=true) -%}\n  {{ return(adapter.dispatch('compare_queries', 'audit_helper')(a_query, b_query, primary_key, summarize)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_queries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4039328, "supported_languages": null}, "macro.audit_helper.default__compare_queries": {"name": "default__compare_queries", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_queries.sql", "original_file_path": "macros/compare_queries.sql", "unique_id": "macro.audit_helper.default__compare_queries", "macro_sql": "{% macro default__compare_queries(a_query, b_query, primary_key=None, summarize=true) %}\n\nwith a as (\n\n    {{ a_query }}\n\n),\n\nb as (\n\n    {{ b_query }}\n\n),\n\na_intersect_b as (\n\n    select * from a\n    {{ dbt.intersect() }}\n    select * from b\n\n),\n\na_except_b as (\n\n    select * from a\n    {{ dbt.except() }}\n    select * from b\n\n),\n\nb_except_a as (\n\n    select * from b\n    {{ dbt.except() }}\n    select * from a\n\n),\n\nall_records as (\n\n    select\n        *,\n        true as in_a,\n        true as in_b\n    from a_intersect_b\n\n    union all\n\n    select\n        *,\n        true as in_a,\n        false as in_b\n    from a_except_b\n\n    union all\n\n    select\n        *,\n        false as in_a,\n        true as in_b\n    from b_except_a\n\n),\n\n{%- if summarize %}\n\nsummary_stats as (\n\n    select\n\n        in_a,\n        in_b,\n        count(*) as count\n\n    from all_records\n    group by 1, 2\n\n),\n\nfinal as (\n\n    select\n\n        *,\n        round(100.0 * count / sum(count) over (), 2) as percent_of_total\n\n    from summary_stats\n    order by in_a desc, in_b desc\n\n)\n\n{%- else %}\n\nfinal as (\n    \n    select * from all_records\n    where not (in_a and in_b)\n    order by {{ primary_key ~ \", \" if primary_key is not none }} in_a desc, in_b desc\n\n)\n\n{%- endif %}\n\nselect * from final\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.intersect", "macro.dbt.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.404277, "supported_languages": null}, "macro.audit_helper.compare_relation_columns": {"name": "compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.compare_relation_columns", "macro_sql": "{% macro compare_relation_columns(a_relation, b_relation) %}\n  {{ return(adapter.dispatch('compare_relation_columns', 'audit_helper')(a_relation, b_relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__compare_relation_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4050229, "supported_languages": null}, "macro.audit_helper.default__compare_relation_columns": {"name": "default__compare_relation_columns", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__compare_relation_columns", "macro_sql": "{% macro default__compare_relation_columns(a_relation, b_relation) %}\n\nwith a_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(a_relation) }}\n),\n\nb_cols as (\n    {{ audit_helper.get_columns_in_relation_sql(b_relation) }}\n)\n\nselect\n    column_name,\n    a_cols.ordinal_position as a_ordinal_position,\n    b_cols.ordinal_position as b_ordinal_position,\n    a_cols.data_type as a_data_type,\n    b_cols.data_type as b_data_type,\n    coalesce(a_cols.ordinal_position = b_cols.ordinal_position, false) as has_ordinal_position_match,\n    coalesce(a_cols.data_type = b_cols.data_type, false) as has_data_type_match\nfrom a_cols\nfull outer join b_cols using (column_name)\norder by coalesce(a_cols.ordinal_position, b_cols.ordinal_position)\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.405257, "supported_languages": null}, "macro.audit_helper.get_columns_in_relation_sql": {"name": "get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.get_columns_in_relation_sql", "macro_sql": "{% macro get_columns_in_relation_sql(relation) %}\n\n{{ adapter.dispatch('get_columns_in_relation_sql', 'audit_helper')(relation) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.405371, "supported_languages": null}, "macro.audit_helper.default__get_columns_in_relation_sql": {"name": "default__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.default__get_columns_in_relation_sql", "macro_sql": "{% macro default__get_columns_in_relation_sql(relation) %}\n    \n  {% set columns = adapter.get_columns_in_relation(relation) %}\n  {% for column in columns %}\n    select \n      {{ dbt.string_literal(column.name) }} as column_name, \n      {{ loop.index }} as ordinal_position,\n      {{ dbt.string_literal(column.data_type) }} as data_type\n\n  {% if not loop.last -%}\n    union all \n  {%- endif %}\n  {% endfor %}\n\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.405653, "supported_languages": null}, "macro.audit_helper.redshift__get_columns_in_relation_sql": {"name": "redshift__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.redshift__get_columns_in_relation_sql", "macro_sql": "{% macro redshift__get_columns_in_relation_sql(relation) %}\n  {# You can't store the results of an info schema query to a table/view in Redshift, because the data only lives on the leader node #}\n  {{ return (audit_helper.default__get_columns_in_relation_sql(relation)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.audit_helper.default__get_columns_in_relation_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4057589, "supported_languages": null}, "macro.audit_helper.snowflake__get_columns_in_relation_sql": {"name": "snowflake__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.snowflake__get_columns_in_relation_sql", "macro_sql": "{% macro snowflake__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/dev/louisa-may-alcott/plugins/snowflake/dbt/include/snowflake/macros/adapters.sql#L48\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from\n  {{ relation.information_schema('columns') }}\n\n  where table_name ilike '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema ilike '{{ relation.schema }}'\n    {% endif %}\n    {% if relation.database %}\n    and table_catalog ilike '{{ relation.database }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4059799, "supported_languages": null}, "macro.audit_helper.postgres__get_columns_in_relation_sql": {"name": "postgres__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.postgres__get_columns_in_relation_sql", "macro_sql": "{% macro postgres__get_columns_in_relation_sql(relation) %}\n{#-\nFrom: https://github.com/dbt-labs/dbt/blob/23484b18b71010f701b5312f920f04529ceaa6b2/plugins/postgres/dbt/include/postgres/macros/adapters.sql#L32\nEdited to include ordinal_position\n-#}\n  select\n      ordinal_position,\n      column_name,\n      data_type,\n      character_maximum_length,\n      numeric_precision,\n      numeric_scale\n\n  from {{ relation.information_schema('columns') }}\n  where table_name = '{{ relation.identifier }}'\n    {% if relation.schema %}\n    and table_schema = '{{ relation.schema }}'\n    {% endif %}\n  order by ordinal_position\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4061491, "supported_languages": null}, "macro.audit_helper.bigquery__get_columns_in_relation_sql": {"name": "bigquery__get_columns_in_relation_sql", "resource_type": "macro", "package_name": "audit_helper", "path": "macros/compare_relation_columns.sql", "original_file_path": "macros/compare_relation_columns.sql", "unique_id": "macro.audit_helper.bigquery__get_columns_in_relation_sql", "macro_sql": "{% macro bigquery__get_columns_in_relation_sql(relation) %}\n\n  select\n      ordinal_position,\n      column_name,\n      data_type\n\n  from `{{ relation.database }}`.`{{ relation.schema }}`.INFORMATION_SCHEMA.COLUMNS\n  where table_name = '{{ relation.identifier }}'\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.406261, "supported_languages": null}, "macro.codegen.generate_model_import_ctes": {"name": "generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.generate_model_import_ctes", "macro_sql": "{% macro generate_model_import_ctes(model_name, leading_commas = False) %}\n    {{ return(adapter.dispatch('generate_model_import_ctes', 'codegen')(model_name, leading_commas)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_import_ctes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.410929, "supported_languages": null}, "macro.codegen.default__generate_model_import_ctes": {"name": "default__generate_model_import_ctes", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_import_ctes.sql", "original_file_path": "macros/generate_model_import_ctes.sql", "unique_id": "macro.codegen.default__generate_model_import_ctes", "macro_sql": "{% macro default__generate_model_import_ctes(model_name, leading_commas) %}\n\n    {%- if execute -%}\n    {%- set nodes = graph.nodes.values() -%}\n\n    {%- set model = (nodes\n        | selectattr('name', 'equalto', model_name) \n        | selectattr('resource_type', 'equalto', 'model')\n        | list).pop() -%}\n\n    {%- set model_raw_sql = model.raw_sql or model.raw_code -%}\n    {%- else -%}\n    {%- set model_raw_sql = '' -%}\n    {%- endif -%}\n\n    {#-\n\n        REGEX Explanations\n\n        # with_regex\n        - matches (start of file followed by anything then whitespace\n        or whitespace\n        or a comma) followed by the word with then a space   \n\n        # from_ref \n        - matches (from or join) followed by some spaces and then {{ref(<something>)}}\n\n        # from_source \n        - matches (from or join) followed by some spaces and then {{source(<something>,<something_else>)}}\n\n        # from_var_1\n        - matches (from or join) followed by some spaces and then {{var(<something>)}}\n\n        # from_var_2\n        - matches (from or join) followed by some spaces and then {{var(<something>,<something_else>)}}\n\n        # from_table_1\n        - matches (from or join) followed by some spaces and then <something>.<something_else>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_2\n        - matches (from or join) followed by some spaces and then <something>.<something_else>.<something_different>\n          where each <something> is enclosed by (` or [ or \" or ' or nothing)\n\n        # from_table_3\n        - matches (from or join) followed by some spaces and then <something>\n          where <something> is enclosed by (` or [ or \" or ')\n\n        # config block\n        - matches the start of the file followed by anything and then {{config(<something>)}}\n\n    -#}\n\n    {%- set re = modules.re -%}\n\n    {%- set with_regex = '(?i)(?s)(^.*\\s*|\\s+|,)with\\s' -%}\n    {%- set does_raw_sql_contain_cte = re.search(with_regex, model_raw_sql) -%}\n\n    {%- set from_regexes = {\n        'from_ref':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), ref, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*ref\\s*\\(\\s*[\\'\\\"]?)\n            \n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n        \n            ',\n        'from_source':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), source, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*source\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark\n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n\n            ',\n        'from_var_1':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n\n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark\n            ([^)\\'\\\"]+)\n\n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}\n            (\\)\\s*}})\n            \n            ',\n        'from_var_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character\n            (from|join)\\s+\n            \n            # second matching group\n            # opening {{, 0 or more whitespace character(s), var, 0 or more whitespace character(s), an opening parenthesis, 0 or more whitespace character(s), 1 or 0 quotation mark\n            ({{\\s*var\\s*\\(\\s*[\\'\\\"]?)\n\n            # third matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n            \n            # fourth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)\n            ([\\'\\\"]?\\s*)\n\n            # fifth matching group\n            # a comma\n            (,)\n\n            # sixth matching group\n            # 0 or more whitespace character(s), 1 or 0 quotation mark            \n            (\\s*[\\'\\\"]?)\n\n            # seventh matching group\n            # at least 1 of anything except a parenthesis or quotation mark            \n            ([^)\\'\\\"]+)\n\n            # eighth matching group\n            # 1 or 0 quotation mark, 0 or more whitespace character(s)            \n            ([\\'\\\"]?\\s*)\n\n            # ninth matching group\n            # a closing parenthesis, 0 or more whitespace character(s), closing }}            \n            (\\)\\s*}})\n            \n            ',\n        'from_table_1':\n            '(?ix)\n            \n            # first matching group\n            # from or join followed by at least 1 whitespace character            \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)\n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period\n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n            \n            # seventh matching group\n            # at least 1 word character\n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_2':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\']?)\n            \n            # third matching group\n            # at least 1 word character\n            (\\w+)\n\n            # fouth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)            \n            ([\\]`\\\"\\']?)\n            \n            # fifth matching group\n            # a period            \n            (\\.)\n            \n            # sixth matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)\n            ([\\[`\\\"\\']?)\n\n            # seventh matching group\n            # at least 1 word character            \n            (\\w+)\n            \n            # eighth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) \n            ([\\]`\\\"\\']?)\n            \n            # ninth matching group\n            # a period             \n            (\\.)\n            \n            # tenth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark)             \n            ([\\[`\\\"\\']?)\n            \n            # eleventh matching group\n            # at least 1 word character   \n            (\\w+)\n\n            # twelfth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\']?)(?=\\s|$)\n            \n            ',\n        'from_table_3':\n            '(?ix)\n\n            # first matching group\n            # from or join followed by at least 1 whitespace character             \n            (from|join)\\s+\n            \n            # second matching group\n            # 1 or 0 of (opening bracket, backtick, or quotation mark)            \n            ([\\[`\\\"\\'])\n            \n            # third matching group\n            # at least 1 word character or space \n            ([\\w ]+)\n\n            # fourth matching group\n            # 1 or 0 of (closing bracket, backtick, or quotation mark) folowed by a whitespace character or end of string\n            ([\\]`\\\"\\'])(?=\\s|$)\n            \n            ',\n        'config_block':'(?i)(?s)^.*{{\\s*config\\s*\\([^)]+\\)\\s*}}'\n    } -%}\n\n    {%- set from_list = [] -%}\n    {%- set config_list = [] -%}\n    {%- set ns = namespace(model_sql = model_raw_sql) -%}\n\n    {%- for regex_name, regex_pattern in from_regexes.items() -%}\n\n        {%- set all_regex_matches = re.findall(regex_pattern, model_raw_sql) -%}\n\n        {%- for match in all_regex_matches -%}\n\n            {%- if regex_name == 'config_block' -%}\n                {%- set match_tuple = (match|trim, regex_name) -%}\n                {%- do config_list.append(match_tuple) -%}\n            {%- elif regex_name == 'from_source' -%}    \n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = 'source_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%} \n            {%- elif regex_name == 'from_table_1' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}   \n            {%- elif regex_name == 'from_table_2' -%}\n                {%- set full_from_clause = match[1:]|join()|trim -%}\n                {%- set cte_name = match[2]|lower + '_' + match[6]|lower + '_' + match[10]|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}                     \n            {%- else -%}\n                {%- set full_from_clause = match[1:]|join|trim -%}\n                {%- set cte_name = match[2]|trim|lower -%}\n                {%- set match_tuple = (cte_name, full_from_clause, regex_name) -%}\n                {%- do from_list.append(match_tuple) -%}\n            {%- endif -%}\n\n        {%- endfor -%}\n\n        {%- if regex_name == 'config_block' -%}\n        {%- elif regex_name == 'from_source' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> source_\\g<7>', ns.model_sql) -%}            \n        {%- elif regex_name == 'from_table_1' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>', ns.model_sql) -%}     \n        {%- elif regex_name == 'from_table_2' -%}\n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>_\\g<7>_\\g<11>', ns.model_sql) -%} \n        {%- else -%}   \n            {%- set ns.model_sql = re.sub(regex_pattern, '\\g<1> \\g<3>', ns.model_sql) -%}         \n        {% endif %}\n\n    {%- endfor -%}\n\n{%- if from_list|length > 0 -%}\n\n{%- set model_import_ctes -%}\n\n    {%- for config_obj in config_list -%}\n\n    {%- set ns.model_sql = ns.model_sql|replace(config_obj[0], '') -%}\n\n{{ config_obj[0] }}\n\n{% endfor -%}\n\n    {%- for from_obj in from_list|unique|sort -%}\n\n{%- if loop.first -%}with {% else -%}{%- if leading_commas -%},{%- endif -%}{%- endif -%}{{ from_obj[0] }} as (\n\n    select * from {{ from_obj[1] }}\n    {%- if from_obj[2] == 'from_source' and from_list|length > 1 %} \n    -- CAUTION: It's best practice to create staging layer for raw sources\n    {%- elif from_obj[2] == 'from_table_1' or from_obj[2] == 'from_table_2' or from_obj[2] == 'from_table_3' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a direct reference\n    {%- elif from_obj[2] == 'from_var_1' or from_obj[2] == 'from_var_2' %}\n    -- CAUTION: It's best practice to use the ref or source function instead of a var\n    {%- endif %}\n  \n){%- if ((loop.last and does_raw_sql_contain_cte) or (not loop.last)) and not leading_commas -%},{%- endif %}\n\n{% endfor -%}\n\n{%- if does_raw_sql_contain_cte -%}\n    {%- if leading_commas -%}\n        {%- set replace_with = '\\g<1>,' -%}\n    {%- else -%}\n        {%- set replace_with = '\\g<1>' -%}\n    {%- endif -%}\n{{ re.sub(with_regex, replace_with, ns.model_sql, 1)|trim }}\n{%- else -%}\n{{ ns.model_sql|trim }}\n{%- endif -%}\n\n{%- endset -%}\n\n{%- else -%}\n\n{% set model_import_ctes = model_raw_sql %}\n\n{%- endif -%}\n\n{%- if execute -%}\n\n{{ print(model_import_ctes) }}\n{% do return(model_import_ctes) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.414597, "supported_languages": null}, "macro.codegen.generate_column_yaml": {"name": "generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_column_yaml", "macro_sql": "{% macro generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name=\"\") %}\n  {{ return(adapter.dispatch('generate_column_yaml', 'codegen')(column, model_yaml, column_desc_dict, include_data_types, parent_column_name)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4161742, "supported_languages": null}, "macro.codegen.default__generate_column_yaml": {"name": "default__generate_column_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_column_yaml", "macro_sql": "{% macro default__generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types, parent_column_name) %}\n    {% if parent_column_name %}\n        {% set column_name = parent_column_name ~ \".\" ~ column.name %}\n    {% else %}\n        {% set column_name = column.name %}\n    {% endif %}\n\n    {% do model_yaml.append('      - name: ' ~ column_name  | lower ) %}\n    {% if include_data_types %}\n        {% do model_yaml.append('        data_type: ' ~ codegen.data_type_format_model(column)) %}\n    {% endif %}\n    {% do model_yaml.append('        description: \"' ~ column_desc_dict.get(column.name | lower,'') ~ '\"') %}\n    {% do model_yaml.append('') %}\n\n    {% if column.fields|length > 0 %}\n        {% for child_column in column.fields %}\n            {% set model_yaml = codegen.generate_column_yaml(child_column, model_yaml, column_desc_dict, include_data_types, parent_column_name=column_name) %}\n        {% endfor %}\n    {% endif %}\n    {% do return(model_yaml) %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.data_type_format_model", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4168582, "supported_languages": null}, "macro.codegen.generate_model_yaml": {"name": "generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_names=[], upstream_descriptions=False, include_data_types=True) -%}\n  {{ return(adapter.dispatch('generate_model_yaml', 'codegen')(model_names, upstream_descriptions, include_data_types)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_model_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4170291, "supported_languages": null}, "macro.codegen.default__generate_model_yaml": {"name": "default__generate_model_yaml", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "unique_id": "macro.codegen.default__generate_model_yaml", "macro_sql": "{% macro default__generate_model_yaml(model_names, upstream_descriptions, include_data_types) %}\n\n    {% set model_yaml=[] %}\n\n    {% do model_yaml.append('version: 2') %}\n    {% do model_yaml.append('') %}\n    {% do model_yaml.append('models:') %}\n\n    {% if model_names is string %}\n        {{ exceptions.raise_compiler_error(\"The `model_names` argument must always be a list, even if there is only one model.\") }}\n    {% else %}\n        {% for model in model_names %}\n            {% do model_yaml.append('  - name: ' ~ model | lower) %}\n            {% do model_yaml.append('    description: \"\"') %}\n            {% do model_yaml.append('    columns:') %}\n\n            {% set relation=ref(model) %}\n            {%- set columns = adapter.get_columns_in_relation(relation) -%}\n            {% set column_desc_dict =  codegen.build_dict_column_descriptions(model) if upstream_descriptions else {} %}\n\n            {% for column in columns %}\n                {% set model_yaml = codegen.generate_column_yaml(column, model_yaml, column_desc_dict, include_data_types) %}\n            {% endfor %}\n        {% endfor %}\n    {% endif %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.build_dict_column_descriptions", "macro.codegen.generate_column_yaml"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.417844, "supported_languages": null}, "macro.codegen.create_base_models": {"name": "create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.create_base_models", "macro_sql": "{% macro create_base_models(source_name, tables) %}\n    {{ return(adapter.dispatch('create_base_models', 'codegen')(source_name, tables)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__create_base_models"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.418135, "supported_languages": null}, "macro.codegen.default__create_base_models": {"name": "default__create_base_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/create_base_models.sql", "original_file_path": "macros/create_base_models.sql", "unique_id": "macro.codegen.default__create_base_models", "macro_sql": "{% macro default__create_base_models(source_name, tables) %}\n\n{% set source_name = \"\"~ source_name ~\"\" %}\n\n{% set zsh_command_models = \"source dbt_packages/codegen/bash_scripts/base_model_creation.sh \"\"\"~ source_name ~\"\"\" \" %}\n\n{%- set models_array = [] -%}\n\n{% for t in tables %}\n    {% set help_command = zsh_command_models + t %}\n    {{ models_array.append(help_command) }}\n{% endfor %}\n\n{{ log(\"Run these commands in your shell to generate the models:\\n\" ~ models_array|join(' && \\n'), info=True) }}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4184818, "supported_languages": null}, "macro.codegen.generate_base_model": {"name": "generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False, case_sensitive_cols=False, materialized=None) %}\n  {{ return(adapter.dispatch('generate_base_model', 'codegen')(source_name, table_name, leading_commas, case_sensitive_cols, materialized)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_base_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.419297, "supported_languages": null}, "macro.codegen.default__generate_base_model": {"name": "default__generate_base_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "unique_id": "macro.codegen.default__generate_base_model", "macro_sql": "{% macro default__generate_base_model(source_name, table_name, leading_commas, case_sensitive_cols, materialized) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\n\n{%- if materialized is not none -%}\n    {{ \"{{ config(materialized='\" ~ materialized ~ \"') }}\" }}\n{%- endif %}\n\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {% if not case_sensitive_cols %}{{ column | lower }}{% elif target.type == \"bigquery\" %}{{ column }}{% else %}{{ \"\\\"\" ~ column ~ \"\\\"\" }}{% endif %}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ print(base_model_sql) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4201658, "supported_languages": null}, "macro.codegen.get_tables_in_schema": {"name": "get_tables_in_schema", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.421993, "supported_languages": null}, "macro.codegen.generate_source": {"name": "generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, include_data_types=True, table_pattern='%', exclude='', name=schema_name, table_names=None, include_database=False, include_schema=False) %}\n    {{ return(adapter.dispatch('generate_source', 'codegen')(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.default__generate_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.422345, "supported_languages": null}, "macro.codegen.default__generate_source": {"name": "default__generate_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "unique_id": "macro.codegen.default__generate_source", "macro_sql": "{% macro default__generate_source(schema_name, database_name, generate_columns, include_descriptions, include_data_types, table_pattern, exclude, name, table_names, include_database, include_schema) %}\n\n{% set sources_yaml=[] %}\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ name | lower) %}\n\n{% if include_descriptions %}\n    {% do sources_yaml.append('    description: \"\"' ) %}\n{% endif %}\n\n{% if database_name != target.database or include_database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% if schema_name != name or include_schema %}\n{% do sources_yaml.append('    schema: ' ~ schema_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% if table_names is none %}\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n{% else %}\n{% set tables = table_names %}\n{% endif %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n    {% if include_descriptions %}\n        {% do sources_yaml.append('        description: \"\"' ) %}\n    {% endif %}\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_data_types %}\n                {% do sources_yaml.append('            data_type: ' ~ codegen.data_type_format_source(column)) %}\n            {% endif %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ print(joined) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_tables_in_schema", "macro.codegen.data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.423881, "supported_languages": null}, "macro.codegen.format_column": {"name": "format_column", "resource_type": "macro", "package_name": "codegen", "path": "macros/vendored/dbt_core/format_column.sql", "original_file_path": "macros/vendored/dbt_core/format_column.sql", "unique_id": "macro.codegen.format_column", "macro_sql": "{% macro format_column(column) -%}\n  {% set data_type = column.dtype %}\n  {% set formatted = column.column.lower() ~ \" \" ~ data_type %}\n  {{ return({'name': column.name, 'data_type': data_type, 'formatted': formatted}) }}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.424175, "supported_languages": null}, "macro.codegen.get_model_dependencies": {"name": "get_model_dependencies", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_model_dependencies", "macro_sql": "{% macro get_model_dependencies(model_name) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {{ return(node.depends_on.nodes) }}\n    {% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4251661, "supported_languages": null}, "macro.codegen.add_model_column_descriptions_to_dict": {"name": "add_model_column_descriptions_to_dict", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.add_model_column_descriptions_to_dict", "macro_sql": "{% macro add_model_column_descriptions_to_dict(model_name,dict_with_descriptions={}) %}\n    {% for node in graph.nodes.values() | selectattr('name', \"equalto\", model_name) %}\n        {% for col_name, col_values in node.columns.items() %}\n            {% do dict_with_descriptions.update( {col_name: col_values.description} ) %}\n        {% endfor %}\n    {% endfor %}\n    {{ return(dict_with_descriptions) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4254951, "supported_languages": null}, "macro.codegen.build_dict_column_descriptions": {"name": "build_dict_column_descriptions", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.build_dict_column_descriptions", "macro_sql": "{% macro build_dict_column_descriptions(model_name) %}\n    {% if execute %}\n        {% set glob_dict = {} %}\n        {% for full_model in codegen.get_model_dependencies(model_name) %}\n            {% do codegen.add_model_column_descriptions_to_dict(full_model.split('.')[-1],glob_dict) %}\n        {% endfor %}\n        {{ return(glob_dict) }}\n    {% endif %}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.get_model_dependencies", "macro.codegen.add_model_column_descriptions_to_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.425786, "supported_languages": null}, "macro.codegen.get_models": {"name": "get_models", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.get_models", "macro_sql": "{% macro get_models(directory=None, prefix=None) %}\n    {% set model_names=[] %}\n    {% set models = graph.nodes.values() | selectattr('resource_type', \"equalto\", 'model') %}\n    {% if directory and prefix %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory and model.name.startswith(prefix) %}\n                {% do model_names.append(model.name) %}\n            {% endif %} \n        {% endfor %}\n    {% elif directory %}\n        {% for model in models %}\n            {% set model_path = \"/\".join(model.path.split(\"/\")[:-1]) %}\n            {% if model_path == directory %}\n                {% do model_names.append(model.name) %}\n            {% endif %}\n        {% endfor %}\n    {% elif prefix %}\n        {% for model in models if model.name.startswith(prefix) %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% else %}\n        {% for model in models %}\n            {% do model_names.append(model.name) %}\n        {% endfor %}\n    {% endif %}\n    {{ return(model_names) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4267478, "supported_languages": null}, "macro.codegen.data_type_format_source": {"name": "data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_source", "macro_sql": "{% macro data_type_format_source(column) -%}\n  {{ return(adapter.dispatch('data_type_format_source', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_source"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.426879, "supported_languages": null}, "macro.codegen.default__data_type_format_source": {"name": "default__data_type_format_source", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_source", "macro_sql": "{% macro default__data_type_format_source(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.427032, "supported_languages": null}, "macro.codegen.data_type_format_model": {"name": "data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.data_type_format_model", "macro_sql": "{% macro data_type_format_model(column) -%}\n  {{ return(adapter.dispatch('data_type_format_model', 'codegen')(column)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.codegen.default__data_type_format_model"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.42715, "supported_languages": null}, "macro.codegen.default__data_type_format_model": {"name": "default__data_type_format_model", "resource_type": "macro", "package_name": "codegen", "path": "macros/helpers/helpers.sql", "original_file_path": "macros/helpers/helpers.sql", "unique_id": "macro.codegen.default__data_type_format_model", "macro_sql": "{% macro default__data_type_format_model(column) %}\n    {% set formatted = codegen.format_column(column) %}\n    {{ return(formatted['data_type'] | lower) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.codegen.format_column"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.427298, "supported_languages": null}, "macro.dbt_date.get_date_dimension": {"name": "get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.433546, "supported_languages": null}, "macro.dbt_date.default__get_date_dimension": {"name": "default__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.435019, "supported_languages": null}, "macro.dbt_date.postgres__get_date_dimension": {"name": "postgres__get_date_dimension", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "unique_id": "macro.dbt_date.postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt.type_int() }}) as quarter_of_year,\n    cast({{ dbt.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt.dateadd('day', '-1', dbt.dateadd('month', '3', dbt.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt.type_int() }}) as year_number,\n    cast({{ dbt.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt.type_int", "macro.dbt_date.month_name", "macro.dbt.date_trunc", "macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.436527, "supported_languages": null}, "macro.dbt_date.get_base_dates": {"name": "get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.43769, "supported_languages": null}, "macro.dbt_date.default__get_base_dates": {"name": "default__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.438197, "supported_languages": null}, "macro.dbt_date.bigquery__get_base_dates": {"name": "bigquery__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as datetime )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as datetime )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine", "macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4386508, "supported_languages": null}, "macro.dbt_date.trino__get_base_dates": {"name": "trino__get_base_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "unique_id": "macro.dbt_date.trino__get_base_dates", "macro_sql": "{% macro trino__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt.dateadd(datepart, -1 * n_dateparts, dbt_date.now()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_date.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_date.tomorrow", "macro.dbt_date.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.439153, "supported_languages": null}, "macro.dbt_date.get_intervals_between": {"name": "get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_date')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.439643, "supported_languages": null}, "macro.dbt_date.default__get_intervals_between": {"name": "default__get_intervals_between", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ dbt.datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4400342, "supported_languages": null}, "macro.dbt_date.date_spine": {"name": "date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_date')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.440189, "supported_languages": null}, "macro.dbt_date.default__date_spine": {"name": "default__date_spine", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/date_spine.sql", "original_file_path": "macros/_utils/date_spine.sql", "unique_id": "macro.dbt_date.default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dbt.dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{\n        dbt_date.generate_series(\n            dbt_date.get_intervals_between(start_date, end_date, datepart)\n        )\n    }}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt.dateadd(\n                datepart,\n                \"(row_number() over (order by 1) - 1)\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.generate_series", "macro.dbt_date.get_intervals_between", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.440431, "supported_languages": null}, "macro.dbt_date.get_powers_of_two": {"name": "get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.440999, "supported_languages": null}, "macro.dbt_date.default__get_powers_of_two": {"name": "default__get_powers_of_two", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.44125, "supported_languages": null}, "macro.dbt_date.generate_series": {"name": "generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_date')(upper_bound)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.441368, "supported_languages": null}, "macro.dbt_date.default__generate_series": {"name": "default__generate_series", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/generate_series.sql", "original_file_path": "macros/_utils/generate_series.sql", "unique_id": "macro.dbt_date.default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_date.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.441695, "supported_languages": null}, "macro.dbt_date.date": {"name": "date", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.date", "macro_sql": "{% macro date(year, month, day) %}\n    {{ return(modules.datetime.date(year, month, day)) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.441921, "supported_languages": null}, "macro.dbt_date.datetime": {"name": "datetime", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/_utils/modules_datetime.sql", "original_file_path": "macros/_utils/modules_datetime.sql", "unique_id": "macro.dbt_date.datetime", "macro_sql": "{% macro datetime(year, month, day, hour=0, minute=0, second=0, microsecond=0, tz=None) %}\n    {% set tz = tz if tz else var(\"dbt_date:time_zone\") %}\n    {{ return(\n        modules.datetime.datetime(\n            year=year, month=month, day=day, hour=hour,\n            minute=minute, second=second, microsecond=microsecond,\n            tzinfo=modules.pytz.timezone(tz)\n        )\n    ) }}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4422872, "supported_languages": null}, "macro.dbt_date.get_fiscal_year_dates": {"name": "get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4435189, "supported_languages": null}, "macro.dbt_date.default__get_fiscal_year_dates": {"name": "default__get_fiscal_year_dates", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith fsc_date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        fsc_date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        fsc_date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.443945, "supported_languages": null}, "macro.dbt_date.get_fiscal_periods": {"name": "get_fiscal_periods", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "unique_id": "macro.dbt_date.get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{#\nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case\n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year,\n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom\n    fscl_periods_quarters\norder by 1,2\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.444621, "supported_languages": null}, "macro.dbt_date.tomorrow": {"name": "tomorrow", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "unique_id": "macro.dbt_date.tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.444769, "supported_languages": null}, "macro.dbt_date.next_week": {"name": "next_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "unique_id": "macro.dbt_date.next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.444896, "supported_languages": null}, "macro.dbt_date.next_month_name": {"name": "next_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "unique_id": "macro.dbt_date.next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.445055, "supported_languages": null}, "macro.dbt_date.next_month": {"name": "next_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "unique_id": "macro.dbt_date.next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.445177, "supported_languages": null}, "macro.dbt_date.day_name": {"name": "day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.duckdb__day_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.445754, "supported_languages": null}, "macro.dbt_date.default__day_name": {"name": "default__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.445878, "supported_languages": null}, "macro.dbt_date.snowflake__day_name": {"name": "snowflake__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.446016, "supported_languages": null}, "macro.dbt_date.bigquery__day_name": {"name": "bigquery__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4461389, "supported_languages": null}, "macro.dbt_date.postgres__day_name": {"name": "postgres__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.446326, "supported_languages": null}, "macro.dbt_date.duckdb__day_name": {"name": "duckdb__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.duckdb__day_name", "macro_sql": "\n\n{%- macro duckdb__day_name(date, short) -%}\n    {%- if short -%}\n    substr(dayname({{ date }}), 1, 3)\n    {%- else -%}\n    dayname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.446444, "supported_languages": null}, "macro.dbt_date.spark__day_name": {"name": "spark__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.spark__day_name", "macro_sql": "\n\n{%- macro spark__day_name(date, short) -%}\n{%- set f = 'E' if short else 'EEEE' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4465652, "supported_languages": null}, "macro.dbt_date.trino__day_name": {"name": "trino__day_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "unique_id": "macro.dbt_date.trino__day_name", "macro_sql": "\n\n{%- macro trino__day_name(date, short) -%}\n{%- set f = 'a' if short else 'W' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.446688, "supported_languages": null}, "macro.dbt_date.to_unixtimestamp": {"name": "to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4469461, "supported_languages": null}, "macro.dbt_date.default__to_unixtimestamp": {"name": "default__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447031, "supported_languages": null}, "macro.dbt_date.snowflake__to_unixtimestamp": {"name": "snowflake__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447119, "supported_languages": null}, "macro.dbt_date.bigquery__to_unixtimestamp": {"name": "bigquery__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447181, "supported_languages": null}, "macro.dbt_date.spark__to_unixtimestamp": {"name": "spark__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.spark__to_unixtimestamp", "macro_sql": "\n\n{%- macro spark__to_unixtimestamp(timestamp) -%}\n    unix_timestamp({{ timestamp }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447243, "supported_languages": null}, "macro.dbt_date.trino__to_unixtimestamp": {"name": "trino__to_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__to_unixtimestamp", "macro_sql": "\n\n{%- macro trino__to_unixtimestamp(timestamp) -%}\n    to_unixtime({{ timestamp }} AT TIME ZONE 'UTC')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447309, "supported_languages": null}, "macro.dbt_date.n_days_away": {"name": "n_days_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "unique_id": "macro.dbt_date.n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447466, "supported_languages": null}, "macro.dbt_date.week_start": {"name": "week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.duckdb__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447789, "supported_languages": null}, "macro.dbt_date.default__week_start": {"name": "default__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt.date_trunc('week', date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.447891, "supported_languages": null}, "macro.dbt_date.snowflake__week_start": {"name": "snowflake__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4480891, "supported_languages": null}, "macro.dbt_date.postgres__week_start": {"name": "postgres__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt.dateadd('day', -1, dbt.date_trunc('week', dbt.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.448264, "supported_languages": null}, "macro.dbt_date.duckdb__week_start": {"name": "duckdb__week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "unique_id": "macro.dbt_date.duckdb__week_start", "macro_sql": "\n\n{%- macro duckdb__week_start(date) -%}\n{{ return(dbt_date.postgres__week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4483619, "supported_languages": null}, "macro.dbt_date.iso_week_start": {"name": "iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.duckdb__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.448815, "supported_languages": null}, "macro.dbt_date._iso_week_start": {"name": "_iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date._iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4489222, "supported_languages": null}, "macro.dbt_date.default__iso_week_start": {"name": "default__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.449018, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_start": {"name": "snowflake__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.44911, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_start": {"name": "postgres__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4492009, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_start": {"name": "duckdb__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_start", "macro_sql": "\n\n{%- macro duckdb__iso_week_start(date) -%}\n{{ return(dbt_date.postgres__iso_week_start(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.449304, "supported_languages": null}, "macro.dbt_date.spark__iso_week_start": {"name": "spark__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.spark__iso_week_start", "macro_sql": "\n\n{%- macro spark__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4494028, "supported_languages": null}, "macro.dbt_date.trino__iso_week_start": {"name": "trino__iso_week_start", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "unique_id": "macro.dbt_date.trino__iso_week_start", "macro_sql": "\n\n{%- macro trino__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.449507, "supported_languages": null}, "macro.dbt_date.n_days_ago": {"name": "n_days_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "unique_id": "macro.dbt_date.n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.449781, "supported_languages": null}, "macro.dbt_date.last_week": {"name": "last_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "unique_id": "macro.dbt_date.last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4499042, "supported_languages": null}, "macro.dbt_date.now": {"name": "now", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "unique_id": "macro.dbt_date.now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt.current_timestamp(), tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.450036, "supported_languages": null}, "macro.dbt_date.periods_since": {"name": "periods_since", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "unique_id": "macro.dbt_date.periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4502048, "supported_languages": null}, "macro.dbt_date.today": {"name": "today", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "unique_id": "macro.dbt_date.today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4503229, "supported_languages": null}, "macro.dbt_date.last_month": {"name": "last_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "unique_id": "macro.dbt_date.last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.450516, "supported_languages": null}, "macro.dbt_date.day_of_year": {"name": "day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.450794, "supported_languages": null}, "macro.dbt_date.default__day_of_year": {"name": "default__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.450887, "supported_languages": null}, "macro.dbt_date.postgres__day_of_year": {"name": "postgres__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.450977, "supported_languages": null}, "macro.dbt_date.redshift__day_of_year": {"name": "redshift__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4511008, "supported_languages": null}, "macro.dbt_date.spark__day_of_year": {"name": "spark__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.spark__day_of_year", "macro_sql": "\n\n{%- macro spark__day_of_year(date) -%}\n    dayofyear({{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.45117, "supported_languages": null}, "macro.dbt_date.trino__day_of_year": {"name": "trino__day_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "unique_id": "macro.dbt_date.trino__day_of_year", "macro_sql": "\n\n{%- macro trino__day_of_year(date) -%}\n    {{ dbt_date.date_part('day_of_year', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.451263, "supported_languages": null}, "macro.dbt_date.round_timestamp": {"name": "round_timestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/round_timestamp.sql", "original_file_path": "macros/calendar_date/round_timestamp.sql", "unique_id": "macro.dbt_date.round_timestamp", "macro_sql": "{% macro round_timestamp(timestamp) %}\n    {{ dbt.date_trunc(\"day\", dbt.dateadd(\"hour\", 12, timestamp)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.451423, "supported_languages": null}, "macro.dbt_date.from_unixtimestamp": {"name": "from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.45294, "supported_languages": null}, "macro.dbt_date.default__from_unixtimestamp": {"name": "default__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4531178, "supported_languages": null}, "macro.dbt_date.postgres__from_unixtimestamp": {"name": "postgres__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.453294, "supported_languages": null}, "macro.dbt_date.snowflake__from_unixtimestamp": {"name": "snowflake__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.453612, "supported_languages": null}, "macro.dbt_date.bigquery__from_unixtimestamp": {"name": "bigquery__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.453883, "supported_languages": null}, "macro.dbt_date.trino__from_unixtimestamp": {"name": "trino__from_unixtimestamp", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "unique_id": "macro.dbt_date.trino__from_unixtimestamp", "macro_sql": "\n\n{%- macro trino__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        cast(from_unixtime({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"milliseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 6)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"microseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }} * pow(10, 3)) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- elif format == \"nanoseconds\" -%}\n        cast(from_unixtime_nanos({{ epochs }}) AT TIME ZONE 'UTC' as {{ dbt.type_timestamp() }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.454255, "supported_languages": null}, "macro.dbt_date.n_months_ago": {"name": "n_months_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "unique_id": "macro.dbt_date.n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4544861, "supported_languages": null}, "macro.dbt_date.date_part": {"name": "date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.454705, "supported_languages": null}, "macro.dbt_date.default__date_part": {"name": "default__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4547951, "supported_languages": null}, "macro.dbt_date.bigquery__date_part": {"name": "bigquery__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.454886, "supported_languages": null}, "macro.dbt_date.trino__date_part": {"name": "trino__date_part", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "unique_id": "macro.dbt_date.trino__date_part", "macro_sql": "{% macro trino__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4549718, "supported_languages": null}, "macro.dbt_date.n_weeks_away": {"name": "n_weeks_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "unique_id": "macro.dbt_date.n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.455198, "supported_languages": null}, "macro.dbt_date.day_of_month": {"name": "day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4553442, "supported_languages": null}, "macro.dbt_date.redshift__day_of_month": {"name": "redshift__day_of_month", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "unique_id": "macro.dbt_date.redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt.type_bigint() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.455462, "supported_languages": null}, "macro.dbt_date.yesterday": {"name": "yesterday", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "unique_id": "macro.dbt_date.yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.455603, "supported_languages": null}, "macro.dbt_date.day_of_week": {"name": "day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.duckdb__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4575229, "supported_languages": null}, "macro.dbt_date.default__day_of_week": {"name": "default__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.457717, "supported_languages": null}, "macro.dbt_date.snowflake__day_of_week": {"name": "snowflake__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4580538, "supported_languages": null}, "macro.dbt_date.bigquery__day_of_week": {"name": "bigquery__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.45825, "supported_languages": null}, "macro.dbt_date.postgres__day_of_week": {"name": "postgres__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.458533, "supported_languages": null}, "macro.dbt_date.redshift__day_of_week": {"name": "redshift__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.458771, "supported_languages": null}, "macro.dbt_date.duckdb__day_of_week": {"name": "duckdb__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.duckdb__day_of_week", "macro_sql": "\n\n{%- macro duckdb__day_of_week(date, isoweek) -%}\n{{ return(dbt_date.postgres__day_of_week(date, isoweek)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4588768, "supported_languages": null}, "macro.dbt_date.spark__day_of_week": {"name": "spark__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.spark__day_of_week", "macro_sql": "\n\n\n{%- macro spark__day_of_week(date, isoweek) -%}\n\n    {%- set dow = \"dayofweek_iso\" if isoweek else \"dayofweek\" -%}\n\n    {{ dbt_date.date_part(dow, date) }}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4590101, "supported_languages": null}, "macro.dbt_date.trino__day_of_week": {"name": "trino__day_of_week", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "unique_id": "macro.dbt_date.trino__day_of_week", "macro_sql": "\n\n\n{%- macro trino__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('day_of_week', date) -%}\n\n    {%- if isoweek -%}\n        {{ dow }}\n    {%- else -%}\n        case\n            when {{ dow }} = 7 then 1\n            else {{ dow }} + 1\n        end\n    {%- endif -%}\n\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.459181, "supported_languages": null}, "macro.dbt_date.iso_week_end": {"name": "iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.459467, "supported_languages": null}, "macro.dbt_date._iso_week_end": {"name": "_iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date._iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.459601, "supported_languages": null}, "macro.dbt_date.default__iso_week_end": {"name": "default__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.45969, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_end": {"name": "snowflake__iso_week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4597828, "supported_languages": null}, "macro.dbt_date.n_weeks_ago": {"name": "n_weeks_ago", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "unique_id": "macro.dbt_date.n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('week',\n    dbt.dateadd('week', -1 * n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.460029, "supported_languages": null}, "macro.dbt_date.month_name": {"name": "month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.duckdb__month_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.460496, "supported_languages": null}, "macro.dbt_date.default__month_name": {"name": "default__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.460628, "supported_languages": null}, "macro.dbt_date.bigquery__month_name": {"name": "bigquery__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.460762, "supported_languages": null}, "macro.dbt_date.snowflake__month_name": {"name": "snowflake__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.46089, "supported_languages": null}, "macro.dbt_date.postgres__month_name": {"name": "postgres__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.461022, "supported_languages": null}, "macro.dbt_date.duckdb__month_name": {"name": "duckdb__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.duckdb__month_name", "macro_sql": "\n\n\n{%- macro duckdb__month_name(date, short) -%}\n    {%- if short -%}\n    substr(monthname({{ date }}), 1, 3)\n    {%- else -%}\n    monthname({{ date }})\n    {%- endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4611478, "supported_languages": null}, "macro.dbt_date.spark__month_name": {"name": "spark__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.spark__month_name", "macro_sql": "\n\n{%- macro spark__month_name(date, short) -%}\n{%- set f = 'LLL' if short else 'LLLL' -%}\n    date_format({{ date }}, '{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.461282, "supported_languages": null}, "macro.dbt_date.trino__month_name": {"name": "trino__month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "unique_id": "macro.dbt_date.trino__month_name", "macro_sql": "\n\n{%- macro trino__month_name(date, short) -%}\n{%- set f = 'b' if short else 'M' -%}\n    date_format({{ date }}, '%{{ f }}')\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4614139, "supported_languages": null}, "macro.dbt_date.last_month_name": {"name": "last_month_name", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "unique_id": "macro.dbt_date.last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(tz), short=short) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.461578, "supported_languages": null}, "macro.dbt_date.week_of_year": {"name": "week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.duckdb__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.461879, "supported_languages": null}, "macro.dbt_date.default__week_of_year": {"name": "default__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.462003, "supported_languages": null}, "macro.dbt_date.postgres__week_of_year": {"name": "postgres__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4621062, "supported_languages": null}, "macro.dbt_date.duckdb__week_of_year": {"name": "duckdb__week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__week_of_year", "macro_sql": "\n\n{%- macro duckdb__week_of_year(date) -%}\ncast(ceil(dayofyear({{ date }}) / 7) as int)\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.462178, "supported_languages": null}, "macro.dbt_date.convert_timezone": {"name": "convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.duckdb__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.463052, "supported_languages": null}, "macro.dbt_date.default__convert_timezone": {"name": "default__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\nconvert_timezone('{{ source_tz }}', '{{ target_tz }}',\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.46319, "supported_languages": null}, "macro.dbt_date.bigquery__convert_timezone": {"name": "bigquery__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.463298, "supported_languages": null}, "macro.dbt_date.postgres__convert_timezone": {"name": "postgres__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\ncast(\n    cast({{ column }} as {{ dbt.type_timestamp() }})\n        at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt.type_timestamp() }}\n)\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.463525, "supported_languages": null}, "macro.dbt_date.redshift__convert_timezone": {"name": "redshift__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4636538, "supported_languages": null}, "macro.dbt_date.duckdb__convert_timezone": {"name": "duckdb__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.duckdb__convert_timezone", "macro_sql": "{% macro duckdb__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.postgres__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.postgres__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4637911, "supported_languages": null}, "macro.dbt_date.spark__convert_timezone": {"name": "spark__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.463893, "supported_languages": null}, "macro.dbt_date.trino__convert_timezone": {"name": "trino__convert_timezone", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "unique_id": "macro.dbt_date.trino__convert_timezone", "macro_sql": "{%- macro trino__convert_timezone(column, target_tz, source_tz) -%}\n    cast((at_timezone(with_timezone(cast({{ column }} as {{ dbt.type_timestamp() }}), '{{ source_tz }}'), '{{ target_tz }}')) as {{ dbt.type_timestamp() }})\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.464035, "supported_languages": null}, "macro.dbt_date.n_months_away": {"name": "n_months_away", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "unique_id": "macro.dbt_date.n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt.date_trunc('month',\n    dbt.dateadd('month', n,\n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.464263, "supported_languages": null}, "macro.dbt_date.iso_week_of_year": {"name": "iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.duckdb__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.464733, "supported_languages": null}, "macro.dbt_date._iso_week_of_year": {"name": "_iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date._iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt.type_int() }})\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt.type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.464871, "supported_languages": null}, "macro.dbt_date.default__iso_week_of_year": {"name": "default__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4649658, "supported_languages": null}, "macro.dbt_date.snowflake__iso_week_of_year": {"name": "snowflake__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4650571, "supported_languages": null}, "macro.dbt_date.postgres__iso_week_of_year": {"name": "postgres__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4651551, "supported_languages": null}, "macro.dbt_date.duckdb__iso_week_of_year": {"name": "duckdb__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.duckdb__iso_week_of_year", "macro_sql": "\n\n{%- macro duckdb__iso_week_of_year(date) -%}\n{{ return(dbt_date.postgres__iso_week_of_year(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.465255, "supported_languages": null}, "macro.dbt_date.spark__iso_week_of_year": {"name": "spark__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.spark__iso_week_of_year", "macro_sql": "\n\n{%- macro spark__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4653492, "supported_languages": null}, "macro.dbt_date.trino__iso_week_of_year": {"name": "trino__iso_week_of_year", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "unique_id": "macro.dbt_date.trino__iso_week_of_year", "macro_sql": "\n\n{%- macro trino__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4654431, "supported_languages": null}, "macro.dbt_date.week_end": {"name": "week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.duckdb__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.465788, "supported_languages": null}, "macro.dbt_date.default__week_end": {"name": "default__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ last_day(date, 'week') }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt.last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.465878, "supported_languages": null}, "macro.dbt_date.snowflake__week_end": {"name": "snowflake__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4660091, "supported_languages": null}, "macro.dbt_date.postgres__week_end": {"name": "postgres__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.466141, "supported_languages": null}, "macro.dbt_date.duckdb__week_end": {"name": "duckdb__week_end", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "unique_id": "macro.dbt_date.duckdb__week_end", "macro_sql": "\n\n{%- macro duckdb__week_end(date) -%}\n{{ return(dbt_date.postgres__week_end(date)) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_date.postgres__week_end"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.466238, "supported_languages": null}, "macro.dbt_date.next_month_number": {"name": "next_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "unique_id": "macro.dbt_date.next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4663858, "supported_languages": null}, "macro.dbt_date.last_month_number": {"name": "last_month_number", "resource_type": "macro", "package_name": "dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "unique_id": "macro.dbt_date.last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(tz)) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.466526, "supported_languages": null}, "macro.dbt_expectations.type_timestamp": {"name": "type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.466815, "supported_languages": null}, "macro.dbt_expectations.default__type_timestamp": {"name": "default__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.466866, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_timestamp": {"name": "snowflake__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4669151, "supported_languages": null}, "macro.dbt_expectations.postgres__type_timestamp": {"name": "postgres__type_timestamp", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.466965, "supported_languages": null}, "macro.dbt_expectations.type_datetime": {"name": "type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.duckdb__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.467069, "supported_languages": null}, "macro.dbt_expectations.default__type_datetime": {"name": "default__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.467118, "supported_languages": null}, "macro.dbt_expectations.snowflake__type_datetime": {"name": "snowflake__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.46717, "supported_languages": null}, "macro.dbt_expectations.postgres__type_datetime": {"name": "postgres__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.467381, "supported_languages": null}, "macro.dbt_expectations.duckdb__type_datetime": {"name": "duckdb__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.duckdb__type_datetime", "macro_sql": "{% macro duckdb__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.467447, "supported_languages": null}, "macro.dbt_expectations.spark__type_datetime": {"name": "spark__type_datetime", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "unique_id": "macro.dbt_expectations.spark__type_datetime", "macro_sql": "{% macro spark__type_datetime() -%}\n    timestamp\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4674938, "supported_languages": null}, "macro.dbt_expectations.group_by": {"name": "group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_expectations')(n)) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.467678, "supported_languages": null}, "macro.dbt_expectations.default__group_by": {"name": "default__group_by", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/utils/groupby.sql", "original_file_path": "macros/utils/groupby.sql", "unique_id": "macro.dbt_expectations.default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}\n   {%- endfor -%}\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4678369, "supported_languages": null}, "macro.dbt_expectations.regexp_instr": {"name": "regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1, is_raw=False, flags=\"\") %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence, is_raw, flags\n    ) }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.duckdb__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4687948, "supported_languages": null}, "macro.dbt_expectations.default__regexp_instr": {"name": "default__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{# unclear if other databases support raw strings or flags #}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.469026, "supported_languages": null}, "macro.dbt_expectations.snowflake__regexp_instr": {"name": "snowflake__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.snowflake__regexp_instr", "macro_sql": "{% macro snowflake__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{%- set regexp = \"$$\" ~ regexp ~ \"$$\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'cimes') }}{% endif %}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4693172, "supported_languages": null}, "macro.dbt_expectations.bigquery__regexp_instr": {"name": "bigquery__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.bigquery__regexp_instr", "macro_sql": "{% macro bigquery__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}\n    {{ dbt_expectations._validate_re2_flags(flags) }}\n    {# BigQuery prepends \"(?flags)\" to set flags for current group #}\n    {%- set regexp = \"(?\" ~ flags ~ \")\" ~ regexp -%}\n{% endif %}\n{%- set regexp = \"r'\" ~ regexp ~ \"'\" if is_raw else \"'\" ~ regexp ~ \"'\" -%}\nregexp_instr({{ source_value }}, {{ regexp }}, {{ position }}, {{ occurrence }})\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_re2_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.469641, "supported_languages": null}, "macro.dbt_expectations.postgres__regexp_instr": {"name": "postgres__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'bcegimnpqstwx') }}{% endif %}\ncoalesce(array_length((select regexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')), 1), 0)\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.469842, "supported_languages": null}, "macro.dbt_expectations.redshift__regexp_instr": {"name": "redshift__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }}, 0, '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4700642, "supported_languages": null}, "macro.dbt_expectations.duckdb__regexp_instr": {"name": "duckdb__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.duckdb__regexp_instr", "macro_sql": "{% macro duckdb__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if flags %}{{ dbt_expectations._validate_flags(flags, 'ciep') }}{% endif %}\nregexp_matches({{ source_value }}, '{{ regexp }}', '{{ flags }}')\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations._validate_flags"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4702568, "supported_languages": null}, "macro.dbt_expectations.spark__regexp_instr": {"name": "spark__regexp_instr", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations.spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence, is_raw, flags) %}\n{% if is_raw or flags %}\n    {{ exceptions.warn(\n            \"is_raw and flags options are not supported for this adapter \"\n            ~ \"and are being ignored.\"\n    ) }}\n{% endif %}\nlength(regexp_extract({{ source_value }}, '{{ regexp }}', 0))\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.470461, "supported_languages": null}, "macro.dbt_expectations._validate_flags": {"name": "_validate_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_flags", "macro_sql": "{% macro _validate_flags(flags, alphabet) %}\n{% for flag in flags %}\n    {% if flag not in alphabet %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flag \" ~ flag ~ \" not in list of allowed flags for this adapter: \" ~ alphabet | join(\", \")\n    ) }}\n    {% endif %}\n{% endfor %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4706938, "supported_languages": null}, "macro.dbt_expectations._validate_re2_flags": {"name": "_validate_re2_flags", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "unique_id": "macro.dbt_expectations._validate_re2_flags", "macro_sql": "{% macro _validate_re2_flags(flags) %}\n{# Re2 supports following flags: #}\n{# i  :  case-insensitive (default fault) #}\n{# m  :  multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false) #}\n{# s  :  let . match \\n (default false) #}\n{# U  :  ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false) #}\n{# Flag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z).  #}\n\n{# Regex explanation: do not allow consecutive dashes, accept all re2 flags and clear operator, do not end with a dash  #}\n{% set re2_flags_pattern = '^(?!.*--)[-imsU]*(?<!-)$' %}\n{% set re = modules.re %}\n{% set is_match = re.match(re2_flags_pattern, flags) %}\n{% if not is_match %}\n    {# Using raise_compiler_error causes disabled tests with invalid flags to fail compilation #}\n    {{ exceptions.warn(\n        \"flags \" ~ flags ~ \" isn't a valid re2 flag pattern\"\n    ) }}\n{% endif %}\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.471004, "supported_languages": null}, "macro.dbt_expectations.log_natural": {"name": "log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.471235, "supported_languages": null}, "macro.dbt_expectations.default__log_natural": {"name": "default__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.default__log_natural", "macro_sql": "{% macro default__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.471304, "supported_languages": null}, "macro.dbt_expectations.bigquery__log_natural": {"name": "bigquery__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.471373, "supported_languages": null}, "macro.dbt_expectations.snowflake__log_natural": {"name": "snowflake__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.471437, "supported_languages": null}, "macro.dbt_expectations.spark__log_natural": {"name": "spark__log_natural", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "unique_id": "macro.dbt_expectations.spark__log_natural", "macro_sql": "{% macro spark__log_natural(x) -%}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.471505, "supported_languages": null}, "macro.dbt_expectations.rand": {"name": "rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.duckdb__rand"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4717388, "supported_languages": null}, "macro.dbt_expectations.default__rand": {"name": "default__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.default__rand", "macro_sql": "{% macro default__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4717891, "supported_languages": null}, "macro.dbt_expectations.bigquery__rand": {"name": "bigquery__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.bigquery__rand", "macro_sql": "{% macro bigquery__rand() -%}\n\n    rand()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4718359, "supported_languages": null}, "macro.dbt_expectations.snowflake__rand": {"name": "snowflake__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) -%}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4718919, "supported_languages": null}, "macro.dbt_expectations.postgres__rand": {"name": "postgres__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.postgres__rand", "macro_sql": "{% macro postgres__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.471937, "supported_languages": null}, "macro.dbt_expectations.redshift__rand": {"name": "redshift__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.redshift__rand", "macro_sql": "{% macro redshift__rand() -%}\n\n    random()\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4719832, "supported_languages": null}, "macro.dbt_expectations.duckdb__rand": {"name": "duckdb__rand", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "unique_id": "macro.dbt_expectations.duckdb__rand", "macro_sql": "{% macro duckdb__rand() -%}\n\n    random()\n\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.472029, "supported_languages": null}, "macro.dbt_expectations.median": {"name": "median", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "unique_id": "macro.dbt_expectations.median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.472158, "supported_languages": null}, "macro.dbt_expectations.percentile_cont": {"name": "percentile_cont", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.472606, "supported_languages": null}, "macro.dbt_expectations.default__quantile": {"name": "default__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4727428, "supported_languages": null}, "macro.dbt_expectations.bigquery__quantile": {"name": "bigquery__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) -%}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4728682, "supported_languages": null}, "macro.dbt_expectations.spark__quantile": {"name": "spark__quantile", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "unique_id": "macro.dbt_expectations.spark__quantile", "macro_sql": "{% macro spark__quantile(field, quantile, partition) -%}\n    percentile({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.472996, "supported_languages": null}, "macro.dbt_expectations.ignore_row_if_expression": {"name": "ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.ignore_row_if_expression", "macro_sql": "{% macro ignore_row_if_expression(ignore_row_if, columns) %}\n    {{ adapter.dispatch('ignore_row_if_expression', 'dbt_expectations') (ignore_row_if, columns) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4732952, "supported_languages": null}, "macro.dbt_expectations.default__ignore_row_if_expression": {"name": "default__ignore_row_if_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_ignore_row_if_expression.sql", "unique_id": "macro.dbt_expectations.default__ignore_row_if_expression", "macro_sql": "{% macro default__ignore_row_if_expression(ignore_row_if, columns) %}\n  {%- set ignore_row_if_values = [\"all_values_are_missing\", \"any_value_is_missing\"] -%}\n    {% if ignore_row_if not in ignore_row_if_values %}\n        {{ exceptions.raise_compiler_error(\n            \"`ignore_row_if` must be one of \" ~ (ignore_row_if_values | join(\", \")) ~ \". Got: '\" ~ ignore_row_if ~\"'.'\"\n        ) }}\n    {% endif %}\n\n    {%- set op = \"and\" if ignore_row_if == \"all_values_are_missing\" else \"or\" -%}\n    not (\n        {% for column in columns -%}\n        {{ column }} is null{% if not loop.last %} {{ op }} {% endif %}\n        {% endfor %}\n    )\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.473658, "supported_languages": null}, "macro.dbt_expectations.test_expression_between": {"name": "test_expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.474491, "supported_languages": null}, "macro.dbt_expectations.expression_between": {"name": "expression_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "unique_id": "macro.dbt_expectations.expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4749901, "supported_languages": null}, "macro.dbt_expectations.test_expression_is_true": {"name": "test_expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.47567, "supported_languages": null}, "macro.dbt_expectations.expression_is_true": {"name": "expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.475862, "supported_languages": null}, "macro.dbt_expectations.default__expression_is_true": {"name": "default__expression_is_true", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "unique_id": "macro.dbt_expectations.default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.476275, "supported_languages": null}, "macro.dbt_expectations.get_select": {"name": "get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.480022, "supported_languages": null}, "macro.dbt_expectations.default__get_select": {"name": "default__get_select", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4803898, "supported_languages": null}, "macro.dbt_expectations.test_equal_expression": {"name": "test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4807029, "supported_languages": null}, "macro.dbt_expectations.default__test_equal_expression": {"name": "default__test_equal_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "unique_id": "macro.dbt_expectations.default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4815528, "supported_languages": null}, "macro.dbt_expectations.truth_expression": {"name": "truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.481718, "supported_languages": null}, "macro.dbt_expectations.default__truth_expression": {"name": "default__truth_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "unique_id": "macro.dbt_expectations.default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.481788, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"name": "test_expect_column_values_to_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.482152, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"name": "test_expect_column_values_to_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4828448, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"name": "test_expect_column_values_to_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.483299, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"name": "test_expect_column_value_lengths_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.483627, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"name": "test_expect_column_value_lengths_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.484174, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"name": "test_expect_column_values_to_not_match_regex", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.484674, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"name": "test_expect_column_values_to_not_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.485451, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"name": "test_expect_column_values_to_match_regex_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None,\n                                                    is_raw=False,\n                                                    flags=\"\"\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex, is_raw=is_raw, flags=flags) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.486165, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"name": "test_expect_column_values_to_not_match_like_pattern_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.486825, "supported_languages": null}, "macro.dbt_expectations._get_like_pattern_expression": {"name": "_get_like_pattern_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "unique_id": "macro.dbt_expectations._get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4870012, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"name": "test_expect_column_values_to_not_match_like_pattern", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4874408, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"name": "test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4882581, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"name": "default__test_expect_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ column_name }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all rows, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_expectations.type_timestamp() }}))\n        <\n        cast({{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_expectations.type_timestamp() }})\n\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4886742, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"name": "test_expect_table_columns_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4894779, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"name": "test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model,\n                                            compare_model,\n                                            group_by=None,\n                                            compare_group_by=None,\n                                            factor=1,\n                                            row_condition=None,\n                                            compare_row_condition=None\n                                        ) -%}\n\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                group_by,\n                                                compare_group_by,\n                                                factor,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.49019, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table": {"name": "default__test_expect_table_row_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table(model,\n                                                    compare_model,\n                                                    group_by,\n                                                    compare_group_by,\n                                                    factor,\n                                                    row_condition,\n                                                    compare_row_condition\n                                                    ) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4904268, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"name": "test_expect_table_columns_to_not_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.491167, "supported_languages": null}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"name": "test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4928849, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"name": "default__test_expect_grouped_row_values_to_have_recent_data", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        max(cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }})) as latest_timestamp_column\n    from\n        {{ model }}\n    where\n        -- to exclude erroneous future dates\n        cast({{ timestamp_column }} as {{ dbt_expectations.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n),\ntotal_row_counts as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        -- are the max timestamps per group older than the specified cutoff?\n        latest_timestamp_column <\n            cast(\n                {{ dbt.dateadd(datepart, interval * -1, dbt_date.now()) }}\n                as {{ dbt_expectations.type_timestamp() }}\n            )\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on\n            {% for g in group_by %}\n            r.{{ g }} = t.{{ g }} and\n            {% endfor %}\n            r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.type_timestamp", "macro.dbt_date.now", "macro.dbt_expectations.group_by", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.49359, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_to_exist": {"name": "test_expect_column_to_exist", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.494399, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"name": "test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                            value,\n                                            group_by=None,\n                                            row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.494873, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"name": "default__test_expect_table_row_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n    expression=expression,\n    group_by_columns=group_by,\n    row_condition=row_condition)\n    }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.495069, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"name": "test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_be_between',\n                        'dbt_expectations') (model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.495698, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between": {"name": "default__test_expect_table_row_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_be_between", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_be_between(model,\n                                                min_value,\n                                                max_value,\n                                                group_by,\n                                                row_condition,\n                                                strictly\n                                                ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n    expression=expression,\n    min_value=min_value,\n    max_value=max_value,\n    group_by_columns=group_by,\n    row_condition=row_condition,\n    strictly=strictly\n    ) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.495917, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by=None,\n                                                                    compare_group_by=None,\n                                                                    row_condition=None,\n                                                                    compare_row_condition=None\n                                            ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal_other_table_times_factor',\n                        'dbt_expectations') (model,\n                                                compare_model,\n                                                factor,\n                                                group_by,\n                                                compare_group_by,\n                                                row_condition,\n                                                compare_row_condition\n                                            ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.496675, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor": {"name": "default__test_expect_table_row_count_to_equal_other_table_times_factor", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "\n\n{%- macro default__test_expect_table_row_count_to_equal_other_table_times_factor(model,\n                                                                    compare_model,\n                                                                    factor,\n                                                                    group_by,\n                                                                    compare_group_by,\n                                                                    row_condition,\n                                                                    compare_row_condition\n                                                                    ) -%}\n\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model,\n    compare_model,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.496871, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"name": "test_expect_table_columns_to_match_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.49764, "supported_languages": null}, "macro.dbt_expectations._get_column_list": {"name": "_get_column_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "unique_id": "macro.dbt_expectations._get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.497896, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"name": "test_expect_table_columns_to_match_ordered_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4988632, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table": {"name": "test_expect_table_aggregation_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_aggregation_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_aggregation_to_equal_other_table", "macro_sql": "{%- test expect_table_aggregation_to_equal_other_table(model,\n                                                expression,\n                                                compare_model,\n                                                compare_expression=None,\n                                                group_by=None,\n                                                compare_group_by=None,\n                                                row_condition=None,\n                                                compare_row_condition=None,\n                                                tolerance=0.0,\n                                                tolerance_percent=None\n                                                ) -%}\n\n\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    group_by=group_by,\n    compare_group_by=compare_group_by,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition,\n    tolerance=tolerance,\n    tolerance_percent=tolerance_percent\n) }}\n\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.4992871, "supported_languages": null}, "macro.dbt_expectations._list_intersect": {"name": "_list_intersect", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "unique_id": "macro.dbt_expectations._list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.499561, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"name": "test_expect_table_column_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.499879, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"name": "test_expect_table_column_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.500126, "supported_languages": null}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"name": "test_expect_table_column_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None\n                                                    ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.500793, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"name": "test_expect_column_values_to_not_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.501419, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"name": "test_expect_column_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.5020769, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"name": "test_expect_column_values_to_be_increasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.5029702, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"name": "test_expect_column_values_to_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.5032809, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"name": "test_expect_column_values_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.503447, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"name": "test_expect_column_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.503969, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"name": "test_expect_column_values_to_be_decreasing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.504786, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"name": "test_expect_column_values_to_be_in_type_list", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ escape_single_quotes(column.name | upper) }}' as {{ dbt.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.505526, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"name": "test_expect_column_values_to_be_of_type", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.5056798, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"name": "test_expect_column_values_to_have_consistent_casing", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.505985, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"name": "test_expect_column_values_to_not_be_null", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.506291, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"name": "test_expect_column_min_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.506826, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"name": "test_expect_column_unique_value_count_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.507339, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"name": "test_expect_column_quantile_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.507912, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"name": "test_expect_column_median_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.508477, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"name": "test_expect_column_proportion_of_unique_values_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})*1.0/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.509079, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"name": "test_expect_column_distinct_values_to_equal_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.509701, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"name": "test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model,\n                                                       column_name,\n                                                       value_set,\n                                                       top_n,\n                                                       quote_values=True,\n                                                       data_type=\"decimal\",\n                                                       row_condition=None\n                                                       ) -%}\n\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (\n            model, column_name, value_set, top_n, quote_values, data_type, row_condition\n        ) }}\n\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.5109959, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"name": "default__test_expect_column_most_common_value_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model,\n                                                                      column_name,\n                                                                      value_set,\n                                                                      top_n,\n                                                                      quote_values,\n                                                                      data_type,\n                                                                      row_condition\n                                                                      ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.51152, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"name": "test_expect_column_distinct_values_to_contain_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.51212, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"name": "test_expect_column_distinct_count_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                column_name,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.512504, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than": {"name": "test_expect_column_distinct_count_to_be_less_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_less_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_less_than", "macro_sql": "{% test expect_column_distinct_count_to_be_less_than(model,\n                                                       column_name,\n                                                       value,\n                                                       group_by=None,\n                                                       row_condition=None\n                                                       ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) < {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.512911, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"name": "test_expect_column_sum_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.513463, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"name": "test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.514421, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"name": "default__test_expect_column_stdev_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.514687, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"name": "test_expect_column_mean_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.515234, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"name": "test_expect_column_max_to_be_between", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.5157619, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"name": "test_expect_column_distinct_count_to_be_greater_than", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                          column_name,\n                                                          value,\n                                                          group_by=None,\n                                                          row_condition=None\n                                                          ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.516149, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"name": "test_expect_column_distinct_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model,\n                                                     column_name,\n                                                     value_set,\n                                                     quote_values=True,\n                                                     row_condition=None\n                                                     ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.516791, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"name": "test_expect_column_distinct_count_to_equal_other_table", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.517264, "supported_languages": null}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"name": "test_expect_row_values_to_have_data_for_every_n_datepart", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min(cast({{ date_col }} as date)) as start_{{ date_part }},\n            max(cast({{ date_col }} as date)) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n\n    {%- set db_start_date = dr.columns[0].values()[0] -%}\n    {%- set db_end_date = dr.columns[1].values()[0] -%}\n\n    {% if db_start_date is not string %}\n        {%- set db_start_date = db_start_date.strftime('%Y-%m-%d') -%}\n        {%- set db_end_date = db_end_date.strftime('%Y-%m-%d') -%}\n    {% endif %}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\n\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {#\n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals,\n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt.type_int() }}),\n            cast({{interval}} as {{ dbt.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {#\n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine\n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{ dbt.dateadd(\n            date_part,\n            \"mod(\n                cast(\" ~ dbt.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt.type_int() ~ \" )\n            ) * (-1)\",\n            \"cast( \" ~ dbt.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n\n    {% endif %}\n\n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt.datediff", "macro.dbt.type_int", "macro.dbt.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.520139, "supported_languages": null}, "macro.dbt_expectations._get_metric_expression": {"name": "_get_metric_expression", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations._get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.523309, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by=None,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.523679, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  group_by,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n{%- set partition_by = \"partition by \" ~ (group_by | join(\",\")) if group_by -%}\n{%- set group_by_length = (group_by | length ) if group_by else 0 -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt.date_trunc(period, date_column_name) }} as metric_period,\n            {{ group_by | join(\",\") ~ \",\" if group_by }}\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        {{  dbt_expectations.group_by(1 + group_by_length) }}\n\n    )\n    {%- if take_diffs %}\n    , grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(\n                {{ partition_by }}\n                order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over({{ partition_by }}\n                    order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/\n            nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt.dateadd(period, -test_periods, dbt.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_expectations.type_timestamp() }})\n    and\n    metric_period < {{ dbt.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "depends_on": {"macros": ["macro.dbt.date_trunc", "macro.dbt_expectations.group_by", "macro.dbt_expectations._get_metric_expression", "macro.dbt.dateadd", "macro.dbt_date.now", "macro.dbt_expectations.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.524626, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"name": "test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{\n        adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (\n            model, column_name, group_by, sigma_threshold\n        )\n    }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.525262, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"name": "default__test_expect_column_values_to_be_within_n_stdevs", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\n\nwith metric_values as (\n\n    select\n        {{ group_by | join(\",\") ~ \",\" if group_by }}\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    {% if group_by -%}\n    {{  dbt_expectations.group_by(group_by | length) }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/\n            nullif({{ column_name }}_stddev, 0) as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.525646, "supported_languages": null}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"name": "test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.526718, "supported_languages": null}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"name": "default__test_expect_select_column_values_to_be_unique_within_record", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.52746, "supported_languages": null}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"name": "test_expect_compound_columns_to_be_unique", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n    {%- if row_condition  %}\n    {{ row_condition }} and\n    {% endif -%}\n\n    {{ dbt_expectations.ignore_row_if_expression(ignore_row_if, columns) }}\n\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }},\n        {%- endfor %}\n        count(*) as {{adapter.quote(\"n_records\")}}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.ignore_row_if_expression"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.528821, "supported_languages": null}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"name": "test_expect_multicolumn_sum_to_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{# the if just allows for column names or literal numbers #}\n{% endfor %} = {% if sum_total is number %}{{sum_total}}{% else %}sum({{ sum_total }}){% endif %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.529495, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"name": "test_expect_column_pair_values_to_be_equal", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.529896, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"name": "test_expect_column_pair_values_A_to_be_greater_than_B", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.530323, "supported_languages": null}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"name": "test_expect_column_pair_values_to_be_in_set", "resource_type": "macro", "package_name": "dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1705823511.5312488, "supported_languages": null}}, "docs": {"doc.dbt.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "dbt", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.dbt.__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "doc.ods.__overview__": {"name": "__overview__", "resource_type": "doc", "package_name": "ods", "path": "overview.md", "original_file_path": "docs/overview.md", "unique_id": "doc.ods.__overview__", "block_contents": "### Welcome!\n\nFor more information and how ***you!*** can add your own data transformations, see [ODS Developer Documentation](https://uo-is-dds.github.io/ods_docs/)."}}, "exposures": {"exposure.ods.student_detail": {"name": "student_detail", "resource_type": "exposure", "package_name": "ods", "path": "contracts/student_detail/_exp_student_detail.yml", "original_file_path": "domains/registrar/models/contracts/student_detail/_exp_student_detail.yml", "unique_id": "exposure.ods.student_detail", "fqn": ["ods", "contracts", "student_detail", "student_detail"], "type": "application", "owner": {"email": "lampman@uoregon.edu", "name": "Information Services DDS"}, "description": "Student Detail by term/level\n", "label": "Cognos - Student Detail", "maturity": "low", "meta": {}, "tags": ["contract"], "config": {"enabled": true}, "unrendered_config": {}, "url": "https://dbdiagram.io/d/student_detail__exposure-65aa0c43ac844320ae41b443", "depends_on": {"macros": [], "nodes": ["model.ods.mart_student_term_level", "model.ods.mart_persons", "model.ods.con__registrar__student_data_report"]}, "refs": [{"name": "mart_student_term_level", "package": null, "version": null}, {"name": "mart_persons", "package": null, "version": null}, {"name": "con__registrar__student_data_report", "package": null, "version": null}], "sources": [], "metrics": [], "created_at": 1705823512.000057}}, "metrics": {}, "groups": {"group.ods.registrar": {"name": "registrar", "resource_type": "group", "package_name": "ods", "path": "access_group.yml", "original_file_path": "domains/registrar/models/access_group.yml", "unique_id": "group.ods.registrar", "owner": {"email": "lampman@uoregon.edu", "name": "Information Services DDS"}}, "group.ods.general": {"name": "general", "resource_type": "group", "package_name": "ods", "path": "access_group.yml", "original_file_path": "domains/general/models/access_group.yml", "unique_id": "group.ods.general", "owner": {"email": "lampman@uoregon.edu", "name": "Information Services DDS"}}}, "selectors": {}, "disabled": {}, "parent_map": {"model.ods.stg_banner__saturn__spriden": ["source.ods.banner__saturn.spriden"], "model.ods.stg_banner__saturn__stvnatn": ["source.ods.banner__saturn.stvnatn"], "model.ods.stg_banner__saturn__spbpers": ["source.ods.banner__saturn.spbpers"], "model.ods.stg_banner__saturn__sprtele": ["source.ods.banner__saturn.sprtele"], "model.ods.stg_banner__saturn__stvstat": ["source.ods.banner__saturn.stvstat"], "model.ods.stg_banner__saturn__stvtele": ["source.ods.banner__saturn.stvtele"], "model.ods.stg_banner__saturn__stvatyp": ["source.ods.banner__saturn.stvatyp"], "model.ods.stg_banner__saturn__spraddr": ["source.ods.banner__saturn.spraddr"], "model.ods.stg_banner__general__gtvemal": ["source.ods.banner__general.gtvemal"], "model.ods.stg_banner__general__goremal": ["source.ods.banner__general.goremal"], "model.ods.int_banner__entities__filtered_to__organizations": ["model.ods.mart_entities"], "model.ods.int_banner__phones__filtered_to_active": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__phone_types", "model.ods.stg_banner__saturn__sprtele"], "model.ods.int_banner__phone_types": ["model.ods.stg_banner__saturn__stvtele"], "model.ods.int_banner__email_address_types": ["model.ods.stg_banner__general__gtvemal"], "model.ods.int_banner__email_addresses__filtered_to_active": ["model.ods.int_banner__email_address_types", "model.ods.int_banner__entities__filtered_to_active", "model.ods.stg_banner__general__goremal", "model.ods.stg_banner__general__gtvemal"], "model.ods.int_banner__addresses__filtered_to_active": ["model.ods.int_banner__address_nation_types", "model.ods.int_banner__address_state_types", "model.ods.int_banner__address_types", "model.ods.int_banner__entities__filtered_to_active", "model.ods.stg_banner__saturn__spraddr"], "model.ods.int_banner__address_types": ["model.ods.stg_banner__saturn__stvatyp"], "model.ods.int_banner__address_state_types": ["model.ods.stg_banner__saturn__stvstat"], "model.ods.int_banner__address_nation_types": ["model.ods.stg_banner__saturn__stvnatn"], "model.ods.int_banner__entities__filtered_to__persons": ["model.ods.mart_entities"], "model.ods.int_banner__person_details": ["model.ods.int_banner__entities__filtered_to__persons", "model.ods.stg_banner__saturn__spbpers"], "model.ods.int_banner__entity__name__hist": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.stg_banner__saturn__spriden"], "model.ods.int_banner__entity__id__hist": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.stg_banner__saturn__spriden"], "model.ods.int_banner__email_addresses__pivoted_to__entities": ["model.ods.int_banner__email_addresses__filtered_to_active"], "model.ods.int_banner__addresses__pivoted_to__entities": ["model.ods.int_banner__addresses__filtered_to_active"], "model.ods.int_banner__phones__pivoted_to__entities": ["model.ods.int_banner__phones__filtered_to_active"], "model.ods.int_banner__entities__filtered_to_active": ["model.ods.stg_banner__saturn__spriden"], "model.ods.mart_persons": ["model.ods.int_banner__entities__filtered_to__persons", "model.ods.int_banner__person_details"], "model.ods.mart_entities": ["model.ods.int_banner__addresses__pivoted_to__entities", "model.ods.int_banner__email_addresses__pivoted_to__entities", "model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__phones__pivoted_to__entities"], "model.ods.stg_banner__saturn__sorlfos": ["source.ods.banner__saturn.sorlfos"], "model.ods.stg_banner__saturn__stvcoll": ["source.ods.banner__saturn.stvcoll"], "model.ods.stg_banner__saturn__stvterm": ["source.ods.banner__saturn.stvterm"], "model.ods.stg_banner__saturn__shrtgpa": ["source.ods.banner__saturn.shrtgpa"], "model.ods.stg_banner__saturn__stvrsts": ["source.ods.banner__saturn.stvrsts"], "model.ods.stg_banner__saturn__sgrchrt": ["source.ods.banner__saturn.sgrchrt"], "model.ods.stg_banner__saturn__shrlgpa": ["source.ods.banner__saturn.shrlgpa"], "model.ods.stg_banner__saturn__sgrclsr": ["source.ods.banner__saturn.sgrclsr"], "model.ods.stg_banner__saturn__stvmajr": ["source.ods.banner__saturn.stvmajr"], "model.ods.stg_banner__saturn__stvdept": ["source.ods.banner__saturn.stvdept"], "model.ods.stg_banner__saturn__sfbetrm": ["source.ods.banner__saturn.sfbetrm"], "model.ods.stg_banner__saturn__stvastd": ["source.ods.banner__saturn.stvastd"], "model.ods.stg_banner__saturn__stvclas": ["source.ods.banner__saturn.stvclas"], "model.ods.stg_banner__saturn__sorlcur": ["source.ods.banner__saturn.sorlcur"], "model.ods.stg_banner__saturn__stvstyp": ["source.ods.banner__saturn.stvstyp"], "model.ods.stg_banner__saturn__sgbstdn": ["source.ods.banner__saturn.sgbstdn"], "model.ods.stg_banner__saturn__shrttrm": ["source.ods.banner__saturn.shrttrm"], "model.ods.stg_banner__saturn__stvlevl": ["source.ods.banner__saturn.stvlevl"], "model.ods.stg_banner__saturn__shrtrce": ["source.ods.banner__saturn.shrtrce"], "model.ods.stg_banner__saturn__stvchrt": ["source.ods.banner__saturn.stvchrt"], "model.ods.stg_banner__saturn__sgrsatt": ["source.ods.banner__saturn.sgrsatt"], "model.ods.stg_banner__saturn__sfrstcr": ["source.ods.banner__saturn.sfrstcr"], "model.ods.stg_banner__saturn__stvests": ["source.ods.banner__saturn.stvests"], "model.ods.stg_banner__saturn__swbtded": ["source.ods.banner__saturn.swbtded"], "model.ods.stg_banner__saturn__stvatts": ["source.ods.banner__saturn.stvatts"], "model.ods.stg_banner__saturn__sgvadvr": ["source.ods.banner__saturn.sgradvr"], "model.ods.con__registrar__student_data_report": ["model.ods.mart_persons", "model.ods.mart_student_term_level"], "model.ods.int_banner__majors": ["model.ods.stg_banner__saturn__stvmajr"], "model.ods.int_banner__minors": ["model.ods.stg_banner__saturn__stvmajr"], "model.ods.int_banner__student_term_level": ["model.ods.int_banner__majors", "model.ods.int_banner__minors", "model.ods.mart_persons", "model.ods.stg_banner__saturn__sgbstdn"], "model.ods.mart_student_term_level": ["model.ods.int_banner__student_term_level"], "test.ods.not_null_int_banner__majors_major_code.a5144e8a86": ["model.ods.int_banner__majors"], "test.ods.unique_int_banner__majors_major_code.bbc162c8b7": ["model.ods.int_banner__majors"], "test.ods.not_null_int_banner__majors_major_desc.49a575aa1a": ["model.ods.int_banner__majors"], "test.ods.not_null_int_banner__majors_dept_code.7b5f450720": ["model.ods.int_banner__majors"], "test.ods.unique_int_banner__majors_ods_surrogate_key.2a7bfe4573": ["model.ods.int_banner__majors"], "test.ods.not_null_int_banner__minors_minor_code.6af6da03d1": ["model.ods.int_banner__minors"], "test.ods.unique_int_banner__minors_minor_code.5d9bfcc746": ["model.ods.int_banner__minors"], "test.ods.not_null_int_banner__minors_minor_desc.df00522c1c": ["model.ods.int_banner__minors"], "test.ods.not_null_int_banner__minors_dept_code.ccc886fea1": ["model.ods.int_banner__minors"], "test.ods.unique_int_banner__minors_ods_surrogate_key.6e3635fd49": ["model.ods.int_banner__minors"], "test.ods.not_null_int_banner__student_term_level_internal_banner_id.0acdba69f4": ["model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bafe4e89fc": ["model.ods.int_banner__student_term_level", "model.ods.mart_persons"], "test.ods.not_null_int_banner__student_term_level_term_code.bab9e82024": ["model.ods.int_banner__student_term_level"], "test.ods.not_null_int_banner__student_term_level_level_code.7a142ae79d": ["model.ods.int_banner__student_term_level"], "test.ods.not_null_int_banner__student_term_level_honors_college_ind.4656b92916": ["model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_.ad2f3906f1": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_.a135508b1b": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_.842e6c3dd4": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_.5b5861b375": ["model.ods.int_banner__majors", "model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.268a2a29f1": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.86cb204f67": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.68559f8ded": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"], "test.ods.relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.84f641866d": ["model.ods.int_banner__minors", "model.ods.int_banner__student_term_level"], "test.ods.unique_int_banner__student_term_level_ods_surrogate_key.869066ed65": ["model.ods.int_banner__student_term_level"], "test.ods.not_null_mart_student_term_level_internal_banner_id.7090430a19": ["model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bb82186b1b": ["model.ods.mart_persons", "model.ods.mart_student_term_level"], "test.ods.not_null_mart_student_term_level_term_code.ee4207ea0a": ["model.ods.mart_student_term_level"], "test.ods.not_null_mart_student_term_level_level_code.64fe8d83fd": ["model.ods.mart_student_term_level"], "test.ods.not_null_mart_student_term_level_honors_college_ind.dc40de48d5": ["model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_.8778ca0619": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_.4a5da9b116": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_.eef6e1bb86": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_.03073f26c5": ["model.ods.int_banner__majors", "model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.2c6c0447dc": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.206a8ee0de": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.afe7e81c3c": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"], "test.ods.relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.1344a69605": ["model.ods.int_banner__minors", "model.ods.mart_student_term_level"], "test.ods.unique_mart_student_term_level_ods_surrogate_key.691ebc885b": ["model.ods.mart_student_term_level"], "test.ods.not_null_int_banner__entities__filtered_to__organizations_internal_banner_id.5d5d6a2281": ["model.ods.int_banner__entities__filtered_to__organizations"], "test.ods.unique_int_banner__entities__filtered_to__organizations_internal_banner_id.7b7d642e44": ["model.ods.int_banner__entities__filtered_to__organizations"], "test.ods.not_null_int_banner__entities__filtered_to__organizations_banner_id.d573cfb4d8": ["model.ods.int_banner__entities__filtered_to__organizations"], "test.ods.unique_int_banner__entities__filtered_to__organizations_banner_id.c1984667f6": ["model.ods.int_banner__entities__filtered_to__organizations"], "test.ods.not_null_int_banner__entities__filtered_to__organizations_organization_name.c23c65814c": ["model.ods.int_banner__entities__filtered_to__organizations"], "test.ods.unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key.5319758e00": ["model.ods.int_banner__entities__filtered_to__organizations"], "test.ods.not_null_int_banner__phone_types_phone_type_code.56eb1f8811": ["model.ods.int_banner__phone_types"], "test.ods.unique_int_banner__phone_types_phone_type_code.cf9847a78e": ["model.ods.int_banner__phone_types"], "test.ods.not_null_int_banner__phone_types_phone_type_desc.9901a4250a": ["model.ods.int_banner__phone_types"], "test.ods.unique_int_banner__phone_types_phone_type_desc.ce0c0f6967": ["model.ods.int_banner__phone_types"], "test.ods.unique_int_banner__phone_types_ods_surrogate_key.d574ebc5f0": ["model.ods.int_banner__phone_types"], "test.ods.not_null_int_banner__phones__filtered_to_active_internal_banner_id.4b86d292f6": ["model.ods.int_banner__phones__filtered_to_active"], "test.ods.relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.08cf2e356a": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__phones__filtered_to_active"], "test.ods.not_null_int_banner__phones__filtered_to_active_phone_seqno.fb586c4a23": ["model.ods.int_banner__phones__filtered_to_active"], "test.ods.not_null_int_banner__phones__filtered_to_active_phone_type_code.cce6dcf9a9": ["model.ods.int_banner__phones__filtered_to_active"], "test.ods.relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_.94516136b7": ["model.ods.int_banner__phone_types", "model.ods.int_banner__phones__filtered_to_active"], "test.ods.not_null_int_banner__phones__filtered_to_active_updated_at.7dcae4fa88": ["model.ods.int_banner__phones__filtered_to_active"], "test.ods.not_null_int_banner__phones__filtered_to_active_is_unlisted.35a4c30391": ["model.ods.int_banner__phones__filtered_to_active"], "test.ods.unique_int_banner__phones__filtered_to_active_ods_surrogate_key.7586f238e9": ["model.ods.int_banner__phones__filtered_to_active"], "test.ods.not_null_int_banner__email_address_types_email_type_code.e91e2de4be": ["model.ods.int_banner__email_address_types"], "test.ods.unique_int_banner__email_address_types_email_type_code.a09c83d64f": ["model.ods.int_banner__email_address_types"], "test.ods.not_null_int_banner__email_address_types_email_type_desc.2ee100b6f2": ["model.ods.int_banner__email_address_types"], "test.ods.unique_int_banner__email_address_types_email_type_desc.d36ea81120": ["model.ods.int_banner__email_address_types"], "test.ods.unique_int_banner__email_address_types_ods_surrogate_key.147fa8c723": ["model.ods.int_banner__email_address_types"], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id.2e177ea754": ["model.ods.int_banner__email_addresses__filtered_to_active"], "test.ods.relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.623f602022": ["model.ods.int_banner__email_addresses__filtered_to_active", "model.ods.int_banner__entities__filtered_to_active"], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_code.d8204c5d91": ["model.ods.int_banner__email_addresses__filtered_to_active"], "test.ods.relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_.ebd1b15642": ["model.ods.int_banner__email_address_types", "model.ods.int_banner__email_addresses__filtered_to_active"], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_address.d2181d0eb9": ["model.ods.int_banner__email_addresses__filtered_to_active"], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_updated_at.fa09bc3b7a": ["model.ods.int_banner__email_addresses__filtered_to_active"], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_desc.11ea9bb1b6": ["model.ods.int_banner__email_addresses__filtered_to_active"], "test.ods.unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key.1910024f04": ["model.ods.int_banner__email_addresses__filtered_to_active"], "test.ods.not_null_int_banner__address_nation_types_nation_code.4c027ae689": ["model.ods.int_banner__address_nation_types"], "test.ods.unique_int_banner__address_nation_types_nation_code.eb52c779f8": ["model.ods.int_banner__address_nation_types"], "test.ods.not_null_int_banner__address_nation_types_nation_desc.18896349ec": ["model.ods.int_banner__address_nation_types"], "test.ods.unique_int_banner__address_nation_types_nation_desc.c06f3c9161": ["model.ods.int_banner__address_nation_types"], "test.ods.unique_int_banner__address_nation_types_ods_surrogate_key.6933941d47": ["model.ods.int_banner__address_nation_types"], "test.ods.not_null_int_banner__address_state_types_state_code.e419ab50bd": ["model.ods.int_banner__address_state_types"], "test.ods.unique_int_banner__address_state_types_state_code.7cf0ebb958": ["model.ods.int_banner__address_state_types"], "test.ods.not_null_int_banner__address_state_types_state_desc.81abb60d2c": ["model.ods.int_banner__address_state_types"], "test.ods.unique_int_banner__address_state_types_state_desc.b3b6ed3ca2": ["model.ods.int_banner__address_state_types"], "test.ods.unique_int_banner__address_state_types_ods_surrogate_key.a16d65e7e0": ["model.ods.int_banner__address_state_types"], "test.ods.not_null_int_banner__address_types_address_type_code.533adfd426": ["model.ods.int_banner__address_types"], "test.ods.unique_int_banner__address_types_address_type_code.c2a70df37b": ["model.ods.int_banner__address_types"], "test.ods.not_null_int_banner__address_types_address_type_desc.3702696713": ["model.ods.int_banner__address_types"], "test.ods.unique_int_banner__address_types_address_type_desc.585644d2ea": ["model.ods.int_banner__address_types"], "test.ods.unique_int_banner__address_types_ods_surrogate_key.ef3c4df487": ["model.ods.int_banner__address_types"], "test.ods.not_null_int_banner__addresses__filtered_to_active_internal_banner_id.336a453a28": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.f38d8b6dcc": ["model.ods.int_banner__addresses__filtered_to_active", "model.ods.int_banner__entities__filtered_to_active"], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_code.daf40f61c4": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_.e39bc37b06": ["model.ods.int_banner__address_types", "model.ods.int_banner__addresses__filtered_to_active"], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_seqno.ec68ab7c04": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_line_1.5dca10b49f": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.not_null_int_banner__addresses__filtered_to_active_city.5008ec4488": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_.5d4fbe38ca": ["model.ods.int_banner__address_state_types", "model.ods.int_banner__addresses__filtered_to_active"], "test.ods.relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_.642dcb8d6d": ["model.ods.int_banner__address_nation_types", "model.ods.int_banner__addresses__filtered_to_active"], "test.ods.not_null_int_banner__addresses__filtered_to_active_updated_at.19a323a11c": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_desc.cf426e1265": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key.f620fff5e1": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.unique_int_banner__addresses__filtered_to_active_ods_surrogate_key.9d4a70110e": ["model.ods.int_banner__addresses__filtered_to_active"], "test.ods.unique_int_banner__entities__filtered_to__persons_internal_banner_id.5825a0d073": ["model.ods.int_banner__entities__filtered_to__persons"], "test.ods.not_null_int_banner__entities__filtered_to__persons_internal_banner_id.8dc1c4c182": ["model.ods.int_banner__entities__filtered_to__persons"], "test.ods.unique_int_banner__entities__filtered_to__persons_banner_id.6dc726752b": ["model.ods.int_banner__entities__filtered_to__persons"], "test.ods.not_null_int_banner__entities__filtered_to__persons_banner_id.0ead3a9ac7": ["model.ods.int_banner__entities__filtered_to__persons"], "test.ods.not_null_int_banner__entities__filtered_to__persons_last_name.f28116e66e": ["model.ods.int_banner__entities__filtered_to__persons"], "test.ods.unique_int_banner__entities__filtered_to__persons_ods_surrogate_key.60d3bfc1a4": ["model.ods.int_banner__entities__filtered_to__persons"], "test.ods.not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key.088ad45fe2": ["model.ods.int_banner__entities__filtered_to__persons"], "test.ods.unique_int_banner__person_details_internal_banner_id.79d42dc889": ["model.ods.int_banner__person_details"], "test.ods.not_null_int_banner__person_details_internal_banner_id.253609d46c": ["model.ods.int_banner__person_details"], "test.ods.relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_.e0243b6bab": ["model.ods.int_banner__entities__filtered_to__persons", "model.ods.int_banner__person_details"], "test.ods.not_null_int_banner__person_details_is_confidential.6d16fe9e77": ["model.ods.int_banner__person_details"], "test.ods.unique_int_banner__person_details_ods_surrogate_key.f866ffc978": ["model.ods.int_banner__person_details"], "test.ods.not_null_int_banner__entity__name__hist_is_active.d773ea5b1c": ["model.ods.int_banner__entity__name__hist"], "test.ods.not_null_int_banner__entity__name__hist_organization_or_last_name.5b6968aa06": ["model.ods.int_banner__entity__name__hist"], "test.ods.not_null_int_banner__entity__name__hist_updated_at.fce5ca08f0": ["model.ods.int_banner__entity__name__hist"], "test.ods.not_null_int_banner__entity__name__hist_internal_banner_id.f1dc658646": ["model.ods.int_banner__entity__name__hist"], "test.ods.not_null_int_banner__entity__name__hist_is_person.a21b9edd91": ["model.ods.int_banner__entity__name__hist"], "test.ods.unique_int_banner__entity__name__hist_ods_surrogate_key.c9567ec5ca": ["model.ods.int_banner__entity__name__hist"], "test.ods.not_null_int_banner__entity__id__hist_is_active.9b706911ad": ["model.ods.int_banner__entity__id__hist"], "test.ods.not_null_int_banner__entity__id__hist_banner_id.084f2e1cc7": ["model.ods.int_banner__entity__id__hist"], "test.ods.not_null_int_banner__entity__id__hist_updated_at.96b9c36955": ["model.ods.int_banner__entity__id__hist"], "test.ods.not_null_int_banner__entity__id__hist_internal_banner_id.893e2c6e5d": ["model.ods.int_banner__entity__id__hist"], "test.ods.unique_int_banner__entity__id__hist_ods_surrogate_key.9f81f1c941": ["model.ods.int_banner__entity__id__hist"], "test.ods.not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id.8d6abfa3be": ["model.ods.int_banner__addresses__pivoted_to__entities"], "test.ods.unique_int_banner__addresses__pivoted_to__entities_internal_banner_id.121866f1a0": ["model.ods.int_banner__addresses__pivoted_to__entities"], "test.ods.relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.9e5a26e316": ["model.ods.int_banner__addresses__pivoted_to__entities", "model.ods.int_banner__entities__filtered_to_active"], "test.ods.unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key.df0f91e697": ["model.ods.int_banner__addresses__pivoted_to__entities"], "test.ods.not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.f9b7aa1ded": ["model.ods.int_banner__email_addresses__pivoted_to__entities"], "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.3a19682774": ["model.ods.int_banner__email_addresses__pivoted_to__entities"], "test.ods.relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.b2cdff8f58": ["model.ods.int_banner__email_addresses__pivoted_to__entities", "model.ods.int_banner__entities__filtered_to_active"], "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key.6d1acd8265": ["model.ods.int_banner__email_addresses__pivoted_to__entities"], "test.ods.not_null_int_banner__entities__filtered_to_active_internal_banner_id.4b52732a3c": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.unique_int_banner__entities__filtered_to_active_internal_banner_id.ac70248cb2": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.not_null_int_banner__entities__filtered_to_active_banner_id.df1a23f213": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.unique_int_banner__entities__filtered_to_active_banner_id.042f395de4": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.not_null_int_banner__entities__filtered_to_active_organization_or_last_name.dd5f03802c": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.not_null_int_banner__entities__filtered_to_active_is_person.2a79a1fc86": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.not_null_int_banner__entities__filtered_to_active_updated_at.8684231c37": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.unique_int_banner__entities__filtered_to_active_ods_surrogate_key.7b99a1b53f": ["model.ods.int_banner__entities__filtered_to_active"], "test.ods.not_null_int_banner__phones__pivoted_to__entities_internal_banner_id.6c9c0e7ccb": ["model.ods.int_banner__phones__pivoted_to__entities"], "test.ods.unique_int_banner__phones__pivoted_to__entities_internal_banner_id.f179198e99": ["model.ods.int_banner__phones__pivoted_to__entities"], "test.ods.relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.96d18f3c74": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__phones__pivoted_to__entities"], "test.ods.unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key.a7b51e3926": ["model.ods.int_banner__phones__pivoted_to__entities"], "test.ods.unique_mart_entities_internal_banner_id.06b42a7796": ["model.ods.mart_entities"], "test.ods.not_null_mart_entities_internal_banner_id.daa953ee5d": ["model.ods.mart_entities"], "test.ods.unique_mart_entities_banner_id.638670b7f3": ["model.ods.mart_entities"], "test.ods.not_null_mart_entities_banner_id.33871b0305": ["model.ods.mart_entities"], "test.ods.not_null_mart_entities_organization_or_last_name.f0f5e77e5a": ["model.ods.mart_entities"], "test.ods.not_null_mart_entities_is_person.3560fbb438": ["model.ods.mart_entities"], "test.ods.unique_mart_entities_ods_surrogate_key.8769b6d118": ["model.ods.mart_entities"], "test.ods.unique_mart_persons_internal_banner_id.e7c6797622": ["model.ods.mart_persons"], "test.ods.not_null_mart_persons_internal_banner_id.48d2e68d8a": ["model.ods.mart_persons"], "test.ods.unique_mart_persons_banner_id.48ca2d71d4": ["model.ods.mart_persons"], "test.ods.not_null_mart_persons_banner_id.345cf9eeb0": ["model.ods.mart_persons"], "test.ods.not_null_mart_persons_last_name.39c7b007e9": ["model.ods.mart_persons"], "test.ods.not_null_mart_persons_is_confidential.e883837d37": ["model.ods.mart_persons"], "test.ods.unique_mart_persons_ods_surrogate_key.c9dd6f0682": ["model.ods.mart_persons"], "source.ods.banner__saturn.sfbetrm": [], "source.ods.banner__saturn.sfrstcr": [], "source.ods.banner__saturn.sgbstdn": [], "source.ods.banner__saturn.sgradvr": [], "source.ods.banner__saturn.sgrchrt": [], "source.ods.banner__saturn.sgrclsr": [], "source.ods.banner__saturn.sgrsatt": [], "source.ods.banner__saturn.shrlgpa": [], "source.ods.banner__saturn.shrtgpa": [], "source.ods.banner__saturn.shrtrce": [], "source.ods.banner__saturn.shrttrm": [], "source.ods.banner__saturn.sorlcur": [], "source.ods.banner__saturn.sorlfos": [], "source.ods.banner__saturn.stvastd": [], "source.ods.banner__saturn.stvatts": [], "source.ods.banner__saturn.stvchrt": [], "source.ods.banner__saturn.stvclas": [], "source.ods.banner__saturn.stvcoll": [], "source.ods.banner__saturn.stvdept": [], "source.ods.banner__saturn.stvests": [], "source.ods.banner__saturn.stvlevl": [], "source.ods.banner__saturn.stvmajr": [], "source.ods.banner__saturn.stvrsts": [], "source.ods.banner__saturn.stvstyp": [], "source.ods.banner__saturn.stvterm": [], "source.ods.banner__saturn.swbtded": [], "source.ods.banner__general.goremal": [], "source.ods.banner__general.gtvemal": [], "source.ods.banner__saturn.spbpers": [], "source.ods.banner__saturn.spraddr": [], "source.ods.banner__saturn.spriden": [], "source.ods.banner__saturn.sprtele": [], "source.ods.banner__saturn.stvatyp": [], "source.ods.banner__saturn.stvnatn": [], "source.ods.banner__saturn.stvstat": [], "source.ods.banner__saturn.stvtele": [], "exposure.ods.student_detail": ["model.ods.con__registrar__student_data_report", "model.ods.mart_persons", "model.ods.mart_student_term_level"]}, "child_map": {"model.ods.stg_banner__saturn__spriden": ["model.ods.int_banner__entities__filtered_to_active", "model.ods.int_banner__entity__id__hist", "model.ods.int_banner__entity__name__hist"], "model.ods.stg_banner__saturn__stvnatn": ["model.ods.int_banner__address_nation_types"], "model.ods.stg_banner__saturn__spbpers": ["model.ods.int_banner__person_details"], "model.ods.stg_banner__saturn__sprtele": ["model.ods.int_banner__phones__filtered_to_active"], "model.ods.stg_banner__saturn__stvstat": ["model.ods.int_banner__address_state_types"], "model.ods.stg_banner__saturn__stvtele": ["model.ods.int_banner__phone_types"], "model.ods.stg_banner__saturn__stvatyp": ["model.ods.int_banner__address_types"], "model.ods.stg_banner__saturn__spraddr": ["model.ods.int_banner__addresses__filtered_to_active"], "model.ods.stg_banner__general__gtvemal": ["model.ods.int_banner__email_address_types", "model.ods.int_banner__email_addresses__filtered_to_active"], "model.ods.stg_banner__general__goremal": ["model.ods.int_banner__email_addresses__filtered_to_active"], "model.ods.int_banner__entities__filtered_to__organizations": ["test.ods.not_null_int_banner__entities__filtered_to__organizations_banner_id.d573cfb4d8", "test.ods.not_null_int_banner__entities__filtered_to__organizations_internal_banner_id.5d5d6a2281", "test.ods.not_null_int_banner__entities__filtered_to__organizations_organization_name.c23c65814c", "test.ods.unique_int_banner__entities__filtered_to__organizations_banner_id.c1984667f6", "test.ods.unique_int_banner__entities__filtered_to__organizations_internal_banner_id.7b7d642e44", "test.ods.unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key.5319758e00"], "model.ods.int_banner__phones__filtered_to_active": ["model.ods.int_banner__phones__pivoted_to__entities", "test.ods.not_null_int_banner__phones__filtered_to_active_internal_banner_id.4b86d292f6", "test.ods.not_null_int_banner__phones__filtered_to_active_is_unlisted.35a4c30391", "test.ods.not_null_int_banner__phones__filtered_to_active_phone_seqno.fb586c4a23", "test.ods.not_null_int_banner__phones__filtered_to_active_phone_type_code.cce6dcf9a9", "test.ods.not_null_int_banner__phones__filtered_to_active_updated_at.7dcae4fa88", "test.ods.relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.08cf2e356a", "test.ods.relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_.94516136b7", "test.ods.unique_int_banner__phones__filtered_to_active_ods_surrogate_key.7586f238e9"], "model.ods.int_banner__phone_types": ["model.ods.int_banner__phones__filtered_to_active", "test.ods.not_null_int_banner__phone_types_phone_type_code.56eb1f8811", "test.ods.not_null_int_banner__phone_types_phone_type_desc.9901a4250a", "test.ods.relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_.94516136b7", "test.ods.unique_int_banner__phone_types_ods_surrogate_key.d574ebc5f0", "test.ods.unique_int_banner__phone_types_phone_type_code.cf9847a78e", "test.ods.unique_int_banner__phone_types_phone_type_desc.ce0c0f6967"], "model.ods.int_banner__email_address_types": ["model.ods.int_banner__email_addresses__filtered_to_active", "test.ods.not_null_int_banner__email_address_types_email_type_code.e91e2de4be", "test.ods.not_null_int_banner__email_address_types_email_type_desc.2ee100b6f2", "test.ods.relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_.ebd1b15642", "test.ods.unique_int_banner__email_address_types_email_type_code.a09c83d64f", "test.ods.unique_int_banner__email_address_types_email_type_desc.d36ea81120", "test.ods.unique_int_banner__email_address_types_ods_surrogate_key.147fa8c723"], "model.ods.int_banner__email_addresses__filtered_to_active": ["model.ods.int_banner__email_addresses__pivoted_to__entities", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_address.d2181d0eb9", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_code.d8204c5d91", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_desc.11ea9bb1b6", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id.2e177ea754", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_updated_at.fa09bc3b7a", "test.ods.relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_.ebd1b15642", "test.ods.relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.623f602022", "test.ods.unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key.1910024f04"], "model.ods.int_banner__addresses__filtered_to_active": ["model.ods.int_banner__addresses__pivoted_to__entities", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_line_1.5dca10b49f", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_seqno.ec68ab7c04", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_code.daf40f61c4", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_desc.cf426e1265", "test.ods.not_null_int_banner__addresses__filtered_to_active_city.5008ec4488", "test.ods.not_null_int_banner__addresses__filtered_to_active_internal_banner_id.336a453a28", "test.ods.not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key.f620fff5e1", "test.ods.not_null_int_banner__addresses__filtered_to_active_updated_at.19a323a11c", "test.ods.relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_.e39bc37b06", "test.ods.relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.f38d8b6dcc", "test.ods.relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_.642dcb8d6d", "test.ods.relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_.5d4fbe38ca", "test.ods.unique_int_banner__addresses__filtered_to_active_ods_surrogate_key.9d4a70110e"], "model.ods.int_banner__address_types": ["model.ods.int_banner__addresses__filtered_to_active", "test.ods.not_null_int_banner__address_types_address_type_code.533adfd426", "test.ods.not_null_int_banner__address_types_address_type_desc.3702696713", "test.ods.relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_.e39bc37b06", "test.ods.unique_int_banner__address_types_address_type_code.c2a70df37b", "test.ods.unique_int_banner__address_types_address_type_desc.585644d2ea", "test.ods.unique_int_banner__address_types_ods_surrogate_key.ef3c4df487"], "model.ods.int_banner__address_state_types": ["model.ods.int_banner__addresses__filtered_to_active", "test.ods.not_null_int_banner__address_state_types_state_code.e419ab50bd", "test.ods.not_null_int_banner__address_state_types_state_desc.81abb60d2c", "test.ods.relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_.5d4fbe38ca", "test.ods.unique_int_banner__address_state_types_ods_surrogate_key.a16d65e7e0", "test.ods.unique_int_banner__address_state_types_state_code.7cf0ebb958", "test.ods.unique_int_banner__address_state_types_state_desc.b3b6ed3ca2"], "model.ods.int_banner__address_nation_types": ["model.ods.int_banner__addresses__filtered_to_active", "test.ods.not_null_int_banner__address_nation_types_nation_code.4c027ae689", "test.ods.not_null_int_banner__address_nation_types_nation_desc.18896349ec", "test.ods.relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_.642dcb8d6d", "test.ods.unique_int_banner__address_nation_types_nation_code.eb52c779f8", "test.ods.unique_int_banner__address_nation_types_nation_desc.c06f3c9161", "test.ods.unique_int_banner__address_nation_types_ods_surrogate_key.6933941d47"], "model.ods.int_banner__entities__filtered_to__persons": ["model.ods.int_banner__person_details", "model.ods.mart_persons", "test.ods.not_null_int_banner__entities__filtered_to__persons_banner_id.0ead3a9ac7", "test.ods.not_null_int_banner__entities__filtered_to__persons_internal_banner_id.8dc1c4c182", "test.ods.not_null_int_banner__entities__filtered_to__persons_last_name.f28116e66e", "test.ods.not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key.088ad45fe2", "test.ods.relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_.e0243b6bab", "test.ods.unique_int_banner__entities__filtered_to__persons_banner_id.6dc726752b", "test.ods.unique_int_banner__entities__filtered_to__persons_internal_banner_id.5825a0d073", "test.ods.unique_int_banner__entities__filtered_to__persons_ods_surrogate_key.60d3bfc1a4"], "model.ods.int_banner__person_details": ["model.ods.mart_persons", "test.ods.not_null_int_banner__person_details_internal_banner_id.253609d46c", "test.ods.not_null_int_banner__person_details_is_confidential.6d16fe9e77", "test.ods.relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_.e0243b6bab", "test.ods.unique_int_banner__person_details_internal_banner_id.79d42dc889", "test.ods.unique_int_banner__person_details_ods_surrogate_key.f866ffc978"], "model.ods.int_banner__entity__name__hist": ["test.ods.not_null_int_banner__entity__name__hist_internal_banner_id.f1dc658646", "test.ods.not_null_int_banner__entity__name__hist_is_active.d773ea5b1c", "test.ods.not_null_int_banner__entity__name__hist_is_person.a21b9edd91", "test.ods.not_null_int_banner__entity__name__hist_organization_or_last_name.5b6968aa06", "test.ods.not_null_int_banner__entity__name__hist_updated_at.fce5ca08f0", "test.ods.unique_int_banner__entity__name__hist_ods_surrogate_key.c9567ec5ca"], "model.ods.int_banner__entity__id__hist": ["test.ods.not_null_int_banner__entity__id__hist_banner_id.084f2e1cc7", "test.ods.not_null_int_banner__entity__id__hist_internal_banner_id.893e2c6e5d", "test.ods.not_null_int_banner__entity__id__hist_is_active.9b706911ad", "test.ods.not_null_int_banner__entity__id__hist_updated_at.96b9c36955", "test.ods.unique_int_banner__entity__id__hist_ods_surrogate_key.9f81f1c941"], "model.ods.int_banner__email_addresses__pivoted_to__entities": ["model.ods.mart_entities", "test.ods.not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.f9b7aa1ded", "test.ods.relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.b2cdff8f58", "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.3a19682774", "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key.6d1acd8265"], "model.ods.int_banner__addresses__pivoted_to__entities": ["model.ods.mart_entities", "test.ods.not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id.8d6abfa3be", "test.ods.relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.9e5a26e316", "test.ods.unique_int_banner__addresses__pivoted_to__entities_internal_banner_id.121866f1a0", "test.ods.unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key.df0f91e697"], "model.ods.int_banner__phones__pivoted_to__entities": ["model.ods.mart_entities", "test.ods.not_null_int_banner__phones__pivoted_to__entities_internal_banner_id.6c9c0e7ccb", "test.ods.relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.96d18f3c74", "test.ods.unique_int_banner__phones__pivoted_to__entities_internal_banner_id.f179198e99", "test.ods.unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key.a7b51e3926"], "model.ods.int_banner__entities__filtered_to_active": ["model.ods.int_banner__addresses__filtered_to_active", "model.ods.int_banner__email_addresses__filtered_to_active", "model.ods.int_banner__entity__id__hist", "model.ods.int_banner__entity__name__hist", "model.ods.int_banner__phones__filtered_to_active", "model.ods.mart_entities", "test.ods.not_null_int_banner__entities__filtered_to_active_banner_id.df1a23f213", "test.ods.not_null_int_banner__entities__filtered_to_active_internal_banner_id.4b52732a3c", "test.ods.not_null_int_banner__entities__filtered_to_active_is_person.2a79a1fc86", "test.ods.not_null_int_banner__entities__filtered_to_active_organization_or_last_name.dd5f03802c", "test.ods.not_null_int_banner__entities__filtered_to_active_updated_at.8684231c37", "test.ods.relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.f38d8b6dcc", "test.ods.relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.9e5a26e316", "test.ods.relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.623f602022", "test.ods.relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.b2cdff8f58", "test.ods.relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.08cf2e356a", "test.ods.relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.96d18f3c74", "test.ods.unique_int_banner__entities__filtered_to_active_banner_id.042f395de4", "test.ods.unique_int_banner__entities__filtered_to_active_internal_banner_id.ac70248cb2", "test.ods.unique_int_banner__entities__filtered_to_active_ods_surrogate_key.7b99a1b53f"], "model.ods.mart_persons": ["exposure.ods.student_detail", "model.ods.con__registrar__student_data_report", "model.ods.int_banner__student_term_level", "test.ods.not_null_mart_persons_banner_id.345cf9eeb0", "test.ods.not_null_mart_persons_internal_banner_id.48d2e68d8a", "test.ods.not_null_mart_persons_is_confidential.e883837d37", "test.ods.not_null_mart_persons_last_name.39c7b007e9", "test.ods.relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bafe4e89fc", "test.ods.relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bb82186b1b", "test.ods.unique_mart_persons_banner_id.48ca2d71d4", "test.ods.unique_mart_persons_internal_banner_id.e7c6797622", "test.ods.unique_mart_persons_ods_surrogate_key.c9dd6f0682"], "model.ods.mart_entities": ["model.ods.int_banner__entities__filtered_to__organizations", "model.ods.int_banner__entities__filtered_to__persons", "test.ods.not_null_mart_entities_banner_id.33871b0305", "test.ods.not_null_mart_entities_internal_banner_id.daa953ee5d", "test.ods.not_null_mart_entities_is_person.3560fbb438", "test.ods.not_null_mart_entities_organization_or_last_name.f0f5e77e5a", "test.ods.unique_mart_entities_banner_id.638670b7f3", "test.ods.unique_mart_entities_internal_banner_id.06b42a7796", "test.ods.unique_mart_entities_ods_surrogate_key.8769b6d118"], "model.ods.stg_banner__saturn__sorlfos": [], "model.ods.stg_banner__saturn__stvcoll": [], "model.ods.stg_banner__saturn__stvterm": [], "model.ods.stg_banner__saturn__shrtgpa": [], "model.ods.stg_banner__saturn__stvrsts": [], "model.ods.stg_banner__saturn__sgrchrt": [], "model.ods.stg_banner__saturn__shrlgpa": [], "model.ods.stg_banner__saturn__sgrclsr": [], "model.ods.stg_banner__saturn__stvmajr": ["model.ods.int_banner__majors", "model.ods.int_banner__minors"], "model.ods.stg_banner__saturn__stvdept": [], "model.ods.stg_banner__saturn__sfbetrm": [], "model.ods.stg_banner__saturn__stvastd": [], "model.ods.stg_banner__saturn__stvclas": [], "model.ods.stg_banner__saturn__sorlcur": [], "model.ods.stg_banner__saturn__stvstyp": [], "model.ods.stg_banner__saturn__sgbstdn": ["model.ods.int_banner__student_term_level"], "model.ods.stg_banner__saturn__shrttrm": [], "model.ods.stg_banner__saturn__stvlevl": [], "model.ods.stg_banner__saturn__shrtrce": [], "model.ods.stg_banner__saturn__stvchrt": [], "model.ods.stg_banner__saturn__sgrsatt": [], "model.ods.stg_banner__saturn__sfrstcr": [], "model.ods.stg_banner__saturn__stvests": [], "model.ods.stg_banner__saturn__swbtded": [], "model.ods.stg_banner__saturn__stvatts": [], "model.ods.stg_banner__saturn__sgvadvr": [], "model.ods.con__registrar__student_data_report": ["exposure.ods.student_detail"], "model.ods.int_banner__majors": ["model.ods.int_banner__student_term_level", "test.ods.not_null_int_banner__majors_dept_code.7b5f450720", "test.ods.not_null_int_banner__majors_major_code.a5144e8a86", "test.ods.not_null_int_banner__majors_major_desc.49a575aa1a", "test.ods.relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_.ad2f3906f1", "test.ods.relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_.a135508b1b", "test.ods.relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_.842e6c3dd4", "test.ods.relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_.5b5861b375", "test.ods.relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_.8778ca0619", "test.ods.relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_.4a5da9b116", "test.ods.relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_.eef6e1bb86", "test.ods.relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_.03073f26c5", "test.ods.unique_int_banner__majors_major_code.bbc162c8b7", "test.ods.unique_int_banner__majors_ods_surrogate_key.2a7bfe4573"], "model.ods.int_banner__minors": ["model.ods.int_banner__student_term_level", "test.ods.not_null_int_banner__minors_dept_code.ccc886fea1", "test.ods.not_null_int_banner__minors_minor_code.6af6da03d1", "test.ods.not_null_int_banner__minors_minor_desc.df00522c1c", "test.ods.relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.268a2a29f1", "test.ods.relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.86cb204f67", "test.ods.relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.68559f8ded", "test.ods.relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.84f641866d", "test.ods.relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.2c6c0447dc", "test.ods.relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.206a8ee0de", "test.ods.relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.afe7e81c3c", "test.ods.relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.1344a69605", "test.ods.unique_int_banner__minors_minor_code.5d9bfcc746", "test.ods.unique_int_banner__minors_ods_surrogate_key.6e3635fd49"], "model.ods.int_banner__student_term_level": ["model.ods.mart_student_term_level", "test.ods.not_null_int_banner__student_term_level_honors_college_ind.4656b92916", "test.ods.not_null_int_banner__student_term_level_internal_banner_id.0acdba69f4", "test.ods.not_null_int_banner__student_term_level_level_code.7a142ae79d", "test.ods.not_null_int_banner__student_term_level_term_code.bab9e82024", "test.ods.relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bafe4e89fc", "test.ods.relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_.ad2f3906f1", "test.ods.relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_.a135508b1b", "test.ods.relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_.842e6c3dd4", "test.ods.relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_.5b5861b375", "test.ods.relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.268a2a29f1", "test.ods.relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.86cb204f67", "test.ods.relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.68559f8ded", "test.ods.relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.84f641866d", "test.ods.unique_int_banner__student_term_level_ods_surrogate_key.869066ed65"], "model.ods.mart_student_term_level": ["exposure.ods.student_detail", "model.ods.con__registrar__student_data_report", "test.ods.not_null_mart_student_term_level_honors_college_ind.dc40de48d5", "test.ods.not_null_mart_student_term_level_internal_banner_id.7090430a19", "test.ods.not_null_mart_student_term_level_level_code.64fe8d83fd", "test.ods.not_null_mart_student_term_level_term_code.ee4207ea0a", "test.ods.relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bb82186b1b", "test.ods.relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_.8778ca0619", "test.ods.relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_.4a5da9b116", "test.ods.relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_.eef6e1bb86", "test.ods.relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_.03073f26c5", "test.ods.relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.2c6c0447dc", "test.ods.relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.206a8ee0de", "test.ods.relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.afe7e81c3c", "test.ods.relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.1344a69605", "test.ods.unique_mart_student_term_level_ods_surrogate_key.691ebc885b"], "test.ods.not_null_int_banner__majors_major_code.a5144e8a86": [], "test.ods.unique_int_banner__majors_major_code.bbc162c8b7": [], "test.ods.not_null_int_banner__majors_major_desc.49a575aa1a": [], "test.ods.not_null_int_banner__majors_dept_code.7b5f450720": [], "test.ods.unique_int_banner__majors_ods_surrogate_key.2a7bfe4573": [], "test.ods.not_null_int_banner__minors_minor_code.6af6da03d1": [], "test.ods.unique_int_banner__minors_minor_code.5d9bfcc746": [], "test.ods.not_null_int_banner__minors_minor_desc.df00522c1c": [], "test.ods.not_null_int_banner__minors_dept_code.ccc886fea1": [], "test.ods.unique_int_banner__minors_ods_surrogate_key.6e3635fd49": [], "test.ods.not_null_int_banner__student_term_level_internal_banner_id.0acdba69f4": [], "test.ods.relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bafe4e89fc": [], "test.ods.not_null_int_banner__student_term_level_term_code.bab9e82024": [], "test.ods.not_null_int_banner__student_term_level_level_code.7a142ae79d": [], "test.ods.not_null_int_banner__student_term_level_honors_college_ind.4656b92916": [], "test.ods.relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_.ad2f3906f1": [], "test.ods.relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_.a135508b1b": [], "test.ods.relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_.842e6c3dd4": [], "test.ods.relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_.5b5861b375": [], "test.ods.relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.268a2a29f1": [], "test.ods.relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.86cb204f67": [], "test.ods.relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.68559f8ded": [], "test.ods.relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.84f641866d": [], "test.ods.unique_int_banner__student_term_level_ods_surrogate_key.869066ed65": [], "test.ods.not_null_mart_student_term_level_internal_banner_id.7090430a19": [], "test.ods.relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bb82186b1b": [], "test.ods.not_null_mart_student_term_level_term_code.ee4207ea0a": [], "test.ods.not_null_mart_student_term_level_level_code.64fe8d83fd": [], "test.ods.not_null_mart_student_term_level_honors_college_ind.dc40de48d5": [], "test.ods.relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_.8778ca0619": [], "test.ods.relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_.4a5da9b116": [], "test.ods.relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_.eef6e1bb86": [], "test.ods.relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_.03073f26c5": [], "test.ods.relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.2c6c0447dc": [], "test.ods.relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.206a8ee0de": [], "test.ods.relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.afe7e81c3c": [], "test.ods.relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.1344a69605": [], "test.ods.unique_mart_student_term_level_ods_surrogate_key.691ebc885b": [], "test.ods.not_null_int_banner__entities__filtered_to__organizations_internal_banner_id.5d5d6a2281": [], "test.ods.unique_int_banner__entities__filtered_to__organizations_internal_banner_id.7b7d642e44": [], "test.ods.not_null_int_banner__entities__filtered_to__organizations_banner_id.d573cfb4d8": [], "test.ods.unique_int_banner__entities__filtered_to__organizations_banner_id.c1984667f6": [], "test.ods.not_null_int_banner__entities__filtered_to__organizations_organization_name.c23c65814c": [], "test.ods.unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key.5319758e00": [], "test.ods.not_null_int_banner__phone_types_phone_type_code.56eb1f8811": [], "test.ods.unique_int_banner__phone_types_phone_type_code.cf9847a78e": [], "test.ods.not_null_int_banner__phone_types_phone_type_desc.9901a4250a": [], "test.ods.unique_int_banner__phone_types_phone_type_desc.ce0c0f6967": [], "test.ods.unique_int_banner__phone_types_ods_surrogate_key.d574ebc5f0": [], "test.ods.not_null_int_banner__phones__filtered_to_active_internal_banner_id.4b86d292f6": [], "test.ods.relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.08cf2e356a": [], "test.ods.not_null_int_banner__phones__filtered_to_active_phone_seqno.fb586c4a23": [], "test.ods.not_null_int_banner__phones__filtered_to_active_phone_type_code.cce6dcf9a9": [], "test.ods.relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_.94516136b7": [], "test.ods.not_null_int_banner__phones__filtered_to_active_updated_at.7dcae4fa88": [], "test.ods.not_null_int_banner__phones__filtered_to_active_is_unlisted.35a4c30391": [], "test.ods.unique_int_banner__phones__filtered_to_active_ods_surrogate_key.7586f238e9": [], "test.ods.not_null_int_banner__email_address_types_email_type_code.e91e2de4be": [], "test.ods.unique_int_banner__email_address_types_email_type_code.a09c83d64f": [], "test.ods.not_null_int_banner__email_address_types_email_type_desc.2ee100b6f2": [], "test.ods.unique_int_banner__email_address_types_email_type_desc.d36ea81120": [], "test.ods.unique_int_banner__email_address_types_ods_surrogate_key.147fa8c723": [], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id.2e177ea754": [], "test.ods.relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.623f602022": [], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_code.d8204c5d91": [], "test.ods.relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_.ebd1b15642": [], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_address.d2181d0eb9": [], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_updated_at.fa09bc3b7a": [], "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_desc.11ea9bb1b6": [], "test.ods.unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key.1910024f04": [], "test.ods.not_null_int_banner__address_nation_types_nation_code.4c027ae689": [], "test.ods.unique_int_banner__address_nation_types_nation_code.eb52c779f8": [], "test.ods.not_null_int_banner__address_nation_types_nation_desc.18896349ec": [], "test.ods.unique_int_banner__address_nation_types_nation_desc.c06f3c9161": [], "test.ods.unique_int_banner__address_nation_types_ods_surrogate_key.6933941d47": [], "test.ods.not_null_int_banner__address_state_types_state_code.e419ab50bd": [], "test.ods.unique_int_banner__address_state_types_state_code.7cf0ebb958": [], "test.ods.not_null_int_banner__address_state_types_state_desc.81abb60d2c": [], "test.ods.unique_int_banner__address_state_types_state_desc.b3b6ed3ca2": [], "test.ods.unique_int_banner__address_state_types_ods_surrogate_key.a16d65e7e0": [], "test.ods.not_null_int_banner__address_types_address_type_code.533adfd426": [], "test.ods.unique_int_banner__address_types_address_type_code.c2a70df37b": [], "test.ods.not_null_int_banner__address_types_address_type_desc.3702696713": [], "test.ods.unique_int_banner__address_types_address_type_desc.585644d2ea": [], "test.ods.unique_int_banner__address_types_ods_surrogate_key.ef3c4df487": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_internal_banner_id.336a453a28": [], "test.ods.relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.f38d8b6dcc": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_code.daf40f61c4": [], "test.ods.relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_.e39bc37b06": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_seqno.ec68ab7c04": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_line_1.5dca10b49f": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_city.5008ec4488": [], "test.ods.relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_.5d4fbe38ca": [], "test.ods.relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_.642dcb8d6d": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_updated_at.19a323a11c": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_desc.cf426e1265": [], "test.ods.not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key.f620fff5e1": [], "test.ods.unique_int_banner__addresses__filtered_to_active_ods_surrogate_key.9d4a70110e": [], "test.ods.unique_int_banner__entities__filtered_to__persons_internal_banner_id.5825a0d073": [], "test.ods.not_null_int_banner__entities__filtered_to__persons_internal_banner_id.8dc1c4c182": [], "test.ods.unique_int_banner__entities__filtered_to__persons_banner_id.6dc726752b": [], "test.ods.not_null_int_banner__entities__filtered_to__persons_banner_id.0ead3a9ac7": [], "test.ods.not_null_int_banner__entities__filtered_to__persons_last_name.f28116e66e": [], "test.ods.unique_int_banner__entities__filtered_to__persons_ods_surrogate_key.60d3bfc1a4": [], "test.ods.not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key.088ad45fe2": [], "test.ods.unique_int_banner__person_details_internal_banner_id.79d42dc889": [], "test.ods.not_null_int_banner__person_details_internal_banner_id.253609d46c": [], "test.ods.relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_.e0243b6bab": [], "test.ods.not_null_int_banner__person_details_is_confidential.6d16fe9e77": [], "test.ods.unique_int_banner__person_details_ods_surrogate_key.f866ffc978": [], "test.ods.not_null_int_banner__entity__name__hist_is_active.d773ea5b1c": [], "test.ods.not_null_int_banner__entity__name__hist_organization_or_last_name.5b6968aa06": [], "test.ods.not_null_int_banner__entity__name__hist_updated_at.fce5ca08f0": [], "test.ods.not_null_int_banner__entity__name__hist_internal_banner_id.f1dc658646": [], "test.ods.not_null_int_banner__entity__name__hist_is_person.a21b9edd91": [], "test.ods.unique_int_banner__entity__name__hist_ods_surrogate_key.c9567ec5ca": [], "test.ods.not_null_int_banner__entity__id__hist_is_active.9b706911ad": [], "test.ods.not_null_int_banner__entity__id__hist_banner_id.084f2e1cc7": [], "test.ods.not_null_int_banner__entity__id__hist_updated_at.96b9c36955": [], "test.ods.not_null_int_banner__entity__id__hist_internal_banner_id.893e2c6e5d": [], "test.ods.unique_int_banner__entity__id__hist_ods_surrogate_key.9f81f1c941": [], "test.ods.not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id.8d6abfa3be": [], "test.ods.unique_int_banner__addresses__pivoted_to__entities_internal_banner_id.121866f1a0": [], "test.ods.relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.9e5a26e316": [], "test.ods.unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key.df0f91e697": [], "test.ods.not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.f9b7aa1ded": [], "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.3a19682774": [], "test.ods.relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.b2cdff8f58": [], "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key.6d1acd8265": [], "test.ods.not_null_int_banner__entities__filtered_to_active_internal_banner_id.4b52732a3c": [], "test.ods.unique_int_banner__entities__filtered_to_active_internal_banner_id.ac70248cb2": [], "test.ods.not_null_int_banner__entities__filtered_to_active_banner_id.df1a23f213": [], "test.ods.unique_int_banner__entities__filtered_to_active_banner_id.042f395de4": [], "test.ods.not_null_int_banner__entities__filtered_to_active_organization_or_last_name.dd5f03802c": [], "test.ods.not_null_int_banner__entities__filtered_to_active_is_person.2a79a1fc86": [], "test.ods.not_null_int_banner__entities__filtered_to_active_updated_at.8684231c37": [], "test.ods.unique_int_banner__entities__filtered_to_active_ods_surrogate_key.7b99a1b53f": [], "test.ods.not_null_int_banner__phones__pivoted_to__entities_internal_banner_id.6c9c0e7ccb": [], "test.ods.unique_int_banner__phones__pivoted_to__entities_internal_banner_id.f179198e99": [], "test.ods.relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.96d18f3c74": [], "test.ods.unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key.a7b51e3926": [], "test.ods.unique_mart_entities_internal_banner_id.06b42a7796": [], "test.ods.not_null_mart_entities_internal_banner_id.daa953ee5d": [], "test.ods.unique_mart_entities_banner_id.638670b7f3": [], "test.ods.not_null_mart_entities_banner_id.33871b0305": [], "test.ods.not_null_mart_entities_organization_or_last_name.f0f5e77e5a": [], "test.ods.not_null_mart_entities_is_person.3560fbb438": [], "test.ods.unique_mart_entities_ods_surrogate_key.8769b6d118": [], "test.ods.unique_mart_persons_internal_banner_id.e7c6797622": [], "test.ods.not_null_mart_persons_internal_banner_id.48d2e68d8a": [], "test.ods.unique_mart_persons_banner_id.48ca2d71d4": [], "test.ods.not_null_mart_persons_banner_id.345cf9eeb0": [], "test.ods.not_null_mart_persons_last_name.39c7b007e9": [], "test.ods.not_null_mart_persons_is_confidential.e883837d37": [], "test.ods.unique_mart_persons_ods_surrogate_key.c9dd6f0682": [], "source.ods.banner__saturn.sfbetrm": ["model.ods.stg_banner__saturn__sfbetrm"], "source.ods.banner__saturn.sfrstcr": ["model.ods.stg_banner__saturn__sfrstcr"], "source.ods.banner__saturn.sgbstdn": ["model.ods.stg_banner__saturn__sgbstdn"], "source.ods.banner__saturn.sgradvr": ["model.ods.stg_banner__saturn__sgvadvr"], "source.ods.banner__saturn.sgrchrt": ["model.ods.stg_banner__saturn__sgrchrt"], "source.ods.banner__saturn.sgrclsr": ["model.ods.stg_banner__saturn__sgrclsr"], "source.ods.banner__saturn.sgrsatt": ["model.ods.stg_banner__saturn__sgrsatt"], "source.ods.banner__saturn.shrlgpa": ["model.ods.stg_banner__saturn__shrlgpa"], "source.ods.banner__saturn.shrtgpa": ["model.ods.stg_banner__saturn__shrtgpa"], "source.ods.banner__saturn.shrtrce": ["model.ods.stg_banner__saturn__shrtrce"], "source.ods.banner__saturn.shrttrm": ["model.ods.stg_banner__saturn__shrttrm"], "source.ods.banner__saturn.sorlcur": ["model.ods.stg_banner__saturn__sorlcur"], "source.ods.banner__saturn.sorlfos": ["model.ods.stg_banner__saturn__sorlfos"], "source.ods.banner__saturn.stvastd": ["model.ods.stg_banner__saturn__stvastd"], "source.ods.banner__saturn.stvatts": ["model.ods.stg_banner__saturn__stvatts"], "source.ods.banner__saturn.stvchrt": ["model.ods.stg_banner__saturn__stvchrt"], "source.ods.banner__saturn.stvclas": ["model.ods.stg_banner__saturn__stvclas"], "source.ods.banner__saturn.stvcoll": ["model.ods.stg_banner__saturn__stvcoll"], "source.ods.banner__saturn.stvdept": ["model.ods.stg_banner__saturn__stvdept"], "source.ods.banner__saturn.stvests": ["model.ods.stg_banner__saturn__stvests"], "source.ods.banner__saturn.stvlevl": ["model.ods.stg_banner__saturn__stvlevl"], "source.ods.banner__saturn.stvmajr": ["model.ods.stg_banner__saturn__stvmajr"], "source.ods.banner__saturn.stvrsts": ["model.ods.stg_banner__saturn__stvrsts"], "source.ods.banner__saturn.stvstyp": ["model.ods.stg_banner__saturn__stvstyp"], "source.ods.banner__saturn.stvterm": ["model.ods.stg_banner__saturn__stvterm"], "source.ods.banner__saturn.swbtded": ["model.ods.stg_banner__saturn__swbtded"], "source.ods.banner__general.goremal": ["model.ods.stg_banner__general__goremal"], "source.ods.banner__general.gtvemal": ["model.ods.stg_banner__general__gtvemal"], "source.ods.banner__saturn.spbpers": ["model.ods.stg_banner__saturn__spbpers"], "source.ods.banner__saturn.spraddr": ["model.ods.stg_banner__saturn__spraddr"], "source.ods.banner__saturn.spriden": ["model.ods.stg_banner__saturn__spriden"], "source.ods.banner__saturn.sprtele": ["model.ods.stg_banner__saturn__sprtele"], "source.ods.banner__saturn.stvatyp": ["model.ods.stg_banner__saturn__stvatyp"], "source.ods.banner__saturn.stvnatn": ["model.ods.stg_banner__saturn__stvnatn"], "source.ods.banner__saturn.stvstat": ["model.ods.stg_banner__saturn__stvstat"], "source.ods.banner__saturn.stvtele": ["model.ods.stg_banner__saturn__stvtele"], "exposure.ods.student_detail": []}, "group_map": {"registrar": ["model.ods.stg_banner__saturn__stvmajr", "model.ods.stg_banner__saturn__sgbstdn", "model.ods.con__registrar__student_data_report", "model.ods.int_banner__majors", "model.ods.int_banner__minors", "model.ods.int_banner__student_term_level", "model.ods.mart_student_term_level", "test.ods.not_null_int_banner__majors_major_code.a5144e8a86", "test.ods.unique_int_banner__majors_major_code.bbc162c8b7", "test.ods.not_null_int_banner__majors_major_desc.49a575aa1a", "test.ods.not_null_int_banner__majors_dept_code.7b5f450720", "test.ods.unique_int_banner__majors_ods_surrogate_key.2a7bfe4573", "test.ods.not_null_int_banner__minors_minor_code.6af6da03d1", "test.ods.unique_int_banner__minors_minor_code.5d9bfcc746", "test.ods.not_null_int_banner__minors_minor_desc.df00522c1c", "test.ods.not_null_int_banner__minors_dept_code.ccc886fea1", "test.ods.unique_int_banner__minors_ods_surrogate_key.6e3635fd49", "test.ods.not_null_int_banner__student_term_level_internal_banner_id.0acdba69f4", "test.ods.relationships_int_banner__student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bafe4e89fc", "test.ods.not_null_int_banner__student_term_level_term_code.bab9e82024", "test.ods.not_null_int_banner__student_term_level_level_code.7a142ae79d", "test.ods.not_null_int_banner__student_term_level_honors_college_ind.4656b92916", "test.ods.relationships_int_banner__student_term_level_major_1_code__major_code__ref_int_banner__majors_.ad2f3906f1", "test.ods.relationships_int_banner__student_term_level_major_2_code__major_code__ref_int_banner__majors_.a135508b1b", "test.ods.relationships_int_banner__student_term_level_major_3_code__major_code__ref_int_banner__majors_.842e6c3dd4", "test.ods.relationships_int_banner__student_term_level_major_4_code__major_code__ref_int_banner__majors_.5b5861b375", "test.ods.relationships_int_banner__student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.268a2a29f1", "test.ods.relationships_int_banner__student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.86cb204f67", "test.ods.relationships_int_banner__student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.68559f8ded", "test.ods.relationships_int_banner__student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.84f641866d", "test.ods.unique_int_banner__student_term_level_ods_surrogate_key.869066ed65", "test.ods.not_null_mart_student_term_level_internal_banner_id.7090430a19", "test.ods.relationships_mart_student_term_level_internal_banner_id__internal_banner_id__ref_mart_persons_.bb82186b1b", "test.ods.not_null_mart_student_term_level_term_code.ee4207ea0a", "test.ods.not_null_mart_student_term_level_level_code.64fe8d83fd", "test.ods.not_null_mart_student_term_level_honors_college_ind.dc40de48d5", "test.ods.relationships_mart_student_term_level_major_1_code__major_code__ref_int_banner__majors_.8778ca0619", "test.ods.relationships_mart_student_term_level_major_2_code__major_code__ref_int_banner__majors_.4a5da9b116", "test.ods.relationships_mart_student_term_level_major_3_code__major_code__ref_int_banner__majors_.eef6e1bb86", "test.ods.relationships_mart_student_term_level_major_4_code__major_code__ref_int_banner__majors_.03073f26c5", "test.ods.relationships_mart_student_term_level_minor_1_code__minor_code__ref_int_banner__minors_.2c6c0447dc", "test.ods.relationships_mart_student_term_level_minor_2_code__minor_code__ref_int_banner__minors_.206a8ee0de", "test.ods.relationships_mart_student_term_level_minor_3_code__minor_code__ref_int_banner__minors_.afe7e81c3c", "test.ods.relationships_mart_student_term_level_minor_4_code__minor_code__ref_int_banner__minors_.1344a69605", "test.ods.unique_mart_student_term_level_ods_surrogate_key.691ebc885b"], "general": ["model.ods.stg_banner__saturn__spriden", "model.ods.stg_banner__saturn__stvnatn", "model.ods.stg_banner__saturn__spbpers", "model.ods.stg_banner__saturn__sprtele", "model.ods.stg_banner__saturn__stvstat", "model.ods.stg_banner__saturn__stvtele", "model.ods.stg_banner__saturn__stvatyp", "model.ods.stg_banner__saturn__spraddr", "model.ods.stg_banner__general__gtvemal", "model.ods.stg_banner__general__goremal", "model.ods.int_banner__entities__filtered_to__organizations", "model.ods.int_banner__phones__filtered_to_active", "model.ods.int_banner__phone_types", "model.ods.int_banner__email_address_types", "model.ods.int_banner__email_addresses__filtered_to_active", "model.ods.int_banner__addresses__filtered_to_active", "model.ods.int_banner__address_types", "model.ods.int_banner__address_state_types", "model.ods.int_banner__address_nation_types", "model.ods.int_banner__entities__filtered_to__persons", "model.ods.int_banner__person_details", "model.ods.int_banner__entity__name__hist", "model.ods.int_banner__entity__id__hist", "model.ods.int_banner__email_addresses__pivoted_to__entities", "model.ods.int_banner__addresses__pivoted_to__entities", "model.ods.int_banner__phones__pivoted_to__entities", "model.ods.int_banner__entities__filtered_to_active", "model.ods.mart_persons", "model.ods.mart_entities", "test.ods.not_null_int_banner__entities__filtered_to__organizations_internal_banner_id.5d5d6a2281", "test.ods.unique_int_banner__entities__filtered_to__organizations_internal_banner_id.7b7d642e44", "test.ods.not_null_int_banner__entities__filtered_to__organizations_banner_id.d573cfb4d8", "test.ods.unique_int_banner__entities__filtered_to__organizations_banner_id.c1984667f6", "test.ods.not_null_int_banner__entities__filtered_to__organizations_organization_name.c23c65814c", "test.ods.unique_int_banner__entities__filtered_to__organizations_ods_surrogate_key.5319758e00", "test.ods.not_null_int_banner__phone_types_phone_type_code.56eb1f8811", "test.ods.unique_int_banner__phone_types_phone_type_code.cf9847a78e", "test.ods.not_null_int_banner__phone_types_phone_type_desc.9901a4250a", "test.ods.unique_int_banner__phone_types_phone_type_desc.ce0c0f6967", "test.ods.unique_int_banner__phone_types_ods_surrogate_key.d574ebc5f0", "test.ods.not_null_int_banner__phones__filtered_to_active_internal_banner_id.4b86d292f6", "test.ods.relationships_int_banner__phones__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.08cf2e356a", "test.ods.not_null_int_banner__phones__filtered_to_active_phone_seqno.fb586c4a23", "test.ods.not_null_int_banner__phones__filtered_to_active_phone_type_code.cce6dcf9a9", "test.ods.relationships_int_banner__phones__filtered_to_active_phone_type_code__phone_type_code__ref_int_banner__phone_types_.94516136b7", "test.ods.not_null_int_banner__phones__filtered_to_active_updated_at.7dcae4fa88", "test.ods.not_null_int_banner__phones__filtered_to_active_is_unlisted.35a4c30391", "test.ods.unique_int_banner__phones__filtered_to_active_ods_surrogate_key.7586f238e9", "test.ods.not_null_int_banner__email_address_types_email_type_code.e91e2de4be", "test.ods.unique_int_banner__email_address_types_email_type_code.a09c83d64f", "test.ods.not_null_int_banner__email_address_types_email_type_desc.2ee100b6f2", "test.ods.unique_int_banner__email_address_types_email_type_desc.d36ea81120", "test.ods.unique_int_banner__email_address_types_ods_surrogate_key.147fa8c723", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_internal_banner_id.2e177ea754", "test.ods.relationships_int_banner__email_addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.623f602022", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_code.d8204c5d91", "test.ods.relationships_int_banner__email_addresses__filtered_to_active_email_type_code__email_type_code__ref_int_banner__email_address_types_.ebd1b15642", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_address.d2181d0eb9", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_updated_at.fa09bc3b7a", "test.ods.not_null_int_banner__email_addresses__filtered_to_active_email_type_desc.11ea9bb1b6", "test.ods.unique_int_banner__email_addresses__filtered_to_active_ods_surrogate_key.1910024f04", "test.ods.not_null_int_banner__address_nation_types_nation_code.4c027ae689", "test.ods.unique_int_banner__address_nation_types_nation_code.eb52c779f8", "test.ods.not_null_int_banner__address_nation_types_nation_desc.18896349ec", "test.ods.unique_int_banner__address_nation_types_nation_desc.c06f3c9161", "test.ods.unique_int_banner__address_nation_types_ods_surrogate_key.6933941d47", "test.ods.not_null_int_banner__address_state_types_state_code.e419ab50bd", "test.ods.unique_int_banner__address_state_types_state_code.7cf0ebb958", "test.ods.not_null_int_banner__address_state_types_state_desc.81abb60d2c", "test.ods.unique_int_banner__address_state_types_state_desc.b3b6ed3ca2", "test.ods.unique_int_banner__address_state_types_ods_surrogate_key.a16d65e7e0", "test.ods.not_null_int_banner__address_types_address_type_code.533adfd426", "test.ods.unique_int_banner__address_types_address_type_code.c2a70df37b", "test.ods.not_null_int_banner__address_types_address_type_desc.3702696713", "test.ods.unique_int_banner__address_types_address_type_desc.585644d2ea", "test.ods.unique_int_banner__address_types_ods_surrogate_key.ef3c4df487", "test.ods.not_null_int_banner__addresses__filtered_to_active_internal_banner_id.336a453a28", "test.ods.relationships_int_banner__addresses__filtered_to_active_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.f38d8b6dcc", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_code.daf40f61c4", "test.ods.relationships_int_banner__addresses__filtered_to_active_address_type_code__address_type_code__ref_int_banner__address_types_.e39bc37b06", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_seqno.ec68ab7c04", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_line_1.5dca10b49f", "test.ods.not_null_int_banner__addresses__filtered_to_active_city.5008ec4488", "test.ods.relationships_int_banner__addresses__filtered_to_active_state_code__state_code__ref_int_banner__address_state_types_.5d4fbe38ca", "test.ods.relationships_int_banner__addresses__filtered_to_active_nation_code__nation_code__ref_int_banner__address_nation_types_.642dcb8d6d", "test.ods.not_null_int_banner__addresses__filtered_to_active_updated_at.19a323a11c", "test.ods.not_null_int_banner__addresses__filtered_to_active_address_type_desc.cf426e1265", "test.ods.not_null_int_banner__addresses__filtered_to_active_ods_surrogate_key.f620fff5e1", "test.ods.unique_int_banner__addresses__filtered_to_active_ods_surrogate_key.9d4a70110e", "test.ods.unique_int_banner__entities__filtered_to__persons_internal_banner_id.5825a0d073", "test.ods.not_null_int_banner__entities__filtered_to__persons_internal_banner_id.8dc1c4c182", "test.ods.unique_int_banner__entities__filtered_to__persons_banner_id.6dc726752b", "test.ods.not_null_int_banner__entities__filtered_to__persons_banner_id.0ead3a9ac7", "test.ods.not_null_int_banner__entities__filtered_to__persons_last_name.f28116e66e", "test.ods.unique_int_banner__entities__filtered_to__persons_ods_surrogate_key.60d3bfc1a4", "test.ods.not_null_int_banner__entities__filtered_to__persons_ods_surrogate_key.088ad45fe2", "test.ods.unique_int_banner__person_details_internal_banner_id.79d42dc889", "test.ods.not_null_int_banner__person_details_internal_banner_id.253609d46c", "test.ods.relationships_int_banner__person_details_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to__persons_.e0243b6bab", "test.ods.not_null_int_banner__person_details_is_confidential.6d16fe9e77", "test.ods.unique_int_banner__person_details_ods_surrogate_key.f866ffc978", "test.ods.not_null_int_banner__entity__name__hist_is_active.d773ea5b1c", "test.ods.not_null_int_banner__entity__name__hist_organization_or_last_name.5b6968aa06", "test.ods.not_null_int_banner__entity__name__hist_updated_at.fce5ca08f0", "test.ods.not_null_int_banner__entity__name__hist_internal_banner_id.f1dc658646", "test.ods.not_null_int_banner__entity__name__hist_is_person.a21b9edd91", "test.ods.unique_int_banner__entity__name__hist_ods_surrogate_key.c9567ec5ca", "test.ods.not_null_int_banner__entity__id__hist_is_active.9b706911ad", "test.ods.not_null_int_banner__entity__id__hist_banner_id.084f2e1cc7", "test.ods.not_null_int_banner__entity__id__hist_updated_at.96b9c36955", "test.ods.not_null_int_banner__entity__id__hist_internal_banner_id.893e2c6e5d", "test.ods.unique_int_banner__entity__id__hist_ods_surrogate_key.9f81f1c941", "test.ods.not_null_int_banner__addresses__pivoted_to__entities_internal_banner_id.8d6abfa3be", "test.ods.unique_int_banner__addresses__pivoted_to__entities_internal_banner_id.121866f1a0", "test.ods.relationships_int_banner__addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.9e5a26e316", "test.ods.unique_int_banner__addresses__pivoted_to__entities_ods_surrogate_key.df0f91e697", "test.ods.not_null_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.f9b7aa1ded", "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_internal_banner_id.3a19682774", "test.ods.relationships_int_banner__email_addresses__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.b2cdff8f58", "test.ods.unique_int_banner__email_addresses__pivoted_to__entities_ods_surrogate_key.6d1acd8265", "test.ods.not_null_int_banner__entities__filtered_to_active_internal_banner_id.4b52732a3c", "test.ods.unique_int_banner__entities__filtered_to_active_internal_banner_id.ac70248cb2", "test.ods.not_null_int_banner__entities__filtered_to_active_banner_id.df1a23f213", "test.ods.unique_int_banner__entities__filtered_to_active_banner_id.042f395de4", "test.ods.not_null_int_banner__entities__filtered_to_active_organization_or_last_name.dd5f03802c", "test.ods.not_null_int_banner__entities__filtered_to_active_is_person.2a79a1fc86", "test.ods.not_null_int_banner__entities__filtered_to_active_updated_at.8684231c37", "test.ods.unique_int_banner__entities__filtered_to_active_ods_surrogate_key.7b99a1b53f", "test.ods.not_null_int_banner__phones__pivoted_to__entities_internal_banner_id.6c9c0e7ccb", "test.ods.unique_int_banner__phones__pivoted_to__entities_internal_banner_id.f179198e99", "test.ods.relationships_int_banner__phones__pivoted_to__entities_internal_banner_id__internal_banner_id__ref_int_banner__entities__filtered_to_active_.96d18f3c74", "test.ods.unique_int_banner__phones__pivoted_to__entities_ods_surrogate_key.a7b51e3926", "test.ods.unique_mart_entities_internal_banner_id.06b42a7796", "test.ods.not_null_mart_entities_internal_banner_id.daa953ee5d", "test.ods.unique_mart_entities_banner_id.638670b7f3", "test.ods.not_null_mart_entities_banner_id.33871b0305", "test.ods.not_null_mart_entities_organization_or_last_name.f0f5e77e5a", "test.ods.not_null_mart_entities_is_person.3560fbb438", "test.ods.unique_mart_entities_ods_surrogate_key.8769b6d118", "test.ods.unique_mart_persons_internal_banner_id.e7c6797622", "test.ods.not_null_mart_persons_internal_banner_id.48d2e68d8a", "test.ods.unique_mart_persons_banner_id.48ca2d71d4", "test.ods.not_null_mart_persons_banner_id.345cf9eeb0", "test.ods.not_null_mart_persons_last_name.39c7b007e9", "test.ods.not_null_mart_persons_is_confidential.e883837d37", "test.ods.unique_mart_persons_ods_surrogate_key.c9dd6f0682"]}, "saved_queries": {}, "semantic_models": {}}